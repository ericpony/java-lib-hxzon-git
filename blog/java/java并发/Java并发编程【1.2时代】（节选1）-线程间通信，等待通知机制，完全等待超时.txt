Java并发编程【1.2时代】（节选1）-线程间通信，等待通知机制，完全等待超时
http://ifeve.com/java_multi_thread_programming_1_2/

本文介绍了Java原生的多线程技术（1.2），
通过详细介绍wait和notify相关的机制、基础的多线程技术以及基于这些技术的等待超时、线程间的通信技术和线程池高阶技术，
最后通过一个基于线程池的简单文本web服务器—MollyServer，来阐明多线程带来好处。
通过介绍这些技术，展示了在没有使用Java并发包的时代（1.5-）是如何完成Java的多线程编程，为理解Java5提供了良好帮助。

============
并发访问对象
6

      Java支持多个线程同时的访问一个对象，或者对象的变量，由于每个线程可以拥有这个变量的拷贝
	  （这么做的目的是能够快速的执行，虽然变量分配的内存在共享内存中，
	  但是每个执行的线程还是可以拥有一份拷贝，这样做的目的是加速程序的执行，这是现代多核处理器的一个显著特性）。
	  因此，程序在执行过程中，可能一个线程看到的变量并不一定是最新的。

Volatile

     Volatile关键字，就是告知任何对该变量的访问均需要从共享内存中获取，而对它的改变必须同步刷新会共享内存。

       比如，表示一个程序是否运行的变量，boolean on = true，
	   那么可能是另一个线程来对它进行关闭动作，因此将其设置成为volatile boolean on，
	   这样就会在其他线程对它进行改变时，能够让原有的线程立刻感知到。

       但是过多的使用volatile是不必要的，相反它会降低程序执行的效率。

Synchronized

        同步，在带来可见性的同时，它主要是对多个线程在同一个时刻，只能有一个处于方法或者块中。

        可以通过将synchronized关键字加在方法前面或者采用同步快的方式来进行表现：

01
static synchronized void m() {
02
        System.out.println("T");
03
    }
04
 
05
    public static void main(String[] args) {
06
        m();
07
 
08
        synchronized(Synchronized.class) {
09
            m();
10
        }
11
    }
}

        Java同步是针对普通的Java对象而言的，每个Java对象均有一把“锁”，
		这个锁在一个线程进入时会排斥其他线程进入，是一个排他锁。
		通过javap来观察字节码，可以看到：

01
public static void main(java.lang.String[]);
02
  Code:
03
   Stack=2, Locals=2, Args_size=1
04
   0:   invokestatic    #31; //Method m:()V
05
   3:   ldc #1; //class com/murdock/books/multithread/example/Synchronized
06
   5:   dup
07
   6:   astore_1
08
   7:   monitorenter
09
   8:   invokestatic    #31; //Method m:()V
10
   11:  aload_1
11
   12:  monitorexit
12
   13:  goto    19
13
   16:  aload_1
14
   17:  monitorexit
15
   18:  athrow
16
   19:  return
          当出现命令monitorenter时代获得了该对象的锁，当运行命令monitorexit时代表释放了该对象的锁。

============
线程间通信
7

         线程开始运行，就如同一个脚本一样，有自己的栈空间，按照既定的代码一步一步的执行，直到最后的终结。
		 但是每个运作中的线程，如果仅仅是孤立的运作，那么没有一点用处，或者说用处很少，
		 但是多个运作的线程能够相互配合，各司其职将会带来巨大的好处。

线程间通信的必要性

         一个运作的脚本（线程）修改了一个对象的值，另一个线程捕获到这个对象的变化，然后进行对应的操作，
		 这个过程事件的触发启于一个线程，而最终的执行又是一个线程。
		 因此前者好比生产者，后者就是消费者，这样的模式隔开了生产和消费，在功能上和架构上具有良好的伸缩性。
		 但是在Java语言中怎样能够做到上述的过程呢？

         当然，简单的办法是不断的循环去查看，比如：

while (value != desire) {

Thread.sleep(1000);

}

doXxx

        这段伪码就是相当于如果值不是这个消费线程所要的，那么就睡眠一段时间，这样的方式看似能够解决这个问题，但是有两个矛盾的问题。

        第一个，在睡眠时，基本不消耗CPU，但是如果睡得久，那么就不能及时的发现value已经变化，也就是及时性难以保证；

        第二个，如果降低睡眠的时间，比如睡1毫秒，这样消费者能更加迅速的捕获出变化，但是它却占用了更多的CPU时间，造成了无端的浪费。

        面对这个矛盾，Java通过固有的wait/notify机制能够很好的实现这个模式。

等待/通知机制

         等待通知机制，是指一个线程调用了对象A上的wait方法，而另外的一个线程在进行了某些操作后，
		 在对象A上的notify或者notifyAll方法，这样完成了两个线程之间的交互。
		 而这个wait和notify之间的关系就像一个信号量一样来完成二者之间的交互工作。

        一个标准的wait和notify的例子，这个例子有两个线程，
		第一个等待共享的一个值为false，当为false时它进行print，
		另外一个在睡眠了一段时间后，将这个值由原有的true改为false并notify。

01
/**
02
 * @author weipeng
03
 */
04
public class WaitNotify {
05
    static boolean flag = true;
06
    static Object OBJ = new Object();
07
    public static void main(String[] args) {
08
        Thread t1 = new Thread(new Waiter());
09
        t1.start();
10
        try {
11
            Thread.sleep(1000);
12
        } catch (InterruptedException e) {
13
            e.printStackTrace();
14
        }
15
        Thread t2 = new Thread(new Notifier());
16
        t2.start();
17
    }
18
 
19
    /**
20
     * 等待，如果flag为false则打印
21
     */
22
    static class Waiter implements Runnable {
23
 
24
        @Override
25
        public void run() {
26
            // 加锁，拥有OBJ的Monitor
27
            synchronized (OBJ) {
28
                // 当条件不满足时，继续wait，同时释放了OBJ的锁
29
                while (flag) {
30
                    try {
31
                        System.out.println(Thread.currentThread()
32
                                + " still true. wait......");
33
                        OBJ.wait();
34
                    } catch (InterruptedException e) {
35
                        e.printStackTrace();
36
                    }
37
                }
38
                // 条件满足时，完成工作
39
                System.out
40
                        .println(Thread.currentThread() + " is false. doXXX.");
41
            }
42
        }
43
    }
44
 
45
    static class Notifier implements Runnable {
46
 
47
        @Override
48
        public void run() {
49
            synchronized (OBJ) {
50
 
51
                // 获取OBJ的锁，然后进行通知，通知时不会释放OBJ的锁
52
                // 这也类似于过早通知
53
                OBJ.notifyAll();
54
                try {
55
                    Thread.sleep(100);
56
                } catch (InterruptedException e) {
57
                    e.printStackTrace();
58
                }
59
                flag = false;
60
                OBJ.notifyAll();
61
            }
62
        }
63
    }
64
}
      从上面的例子中能够提炼出经典的等待和通知机制，对于等待的一方，遵循如下的原则：

（1）获得对象的锁；

（2）如果条件不满足，那么调用对象的wait，释放锁，被通知后继续检查（2）

（3）条件已经满足，执行对应的逻辑。

synchronized(OBJ) {

while(Condition not hold) {

OBJ.wait();

}

// Condition hold

do XXX;

}

       通知的一方，遵循如下原则：

（1）获得对象的锁；

（2）更新变量或者条件，然后通知。

synchronized(OBJ) {

value = newvalue;

OBJ.notifyAll();

}

============
等待/通知的API

等待和通知机制被深深植入了Java语言中，在Object方法中有5个final的方法，也就是子类不能复写的方法。

方法名称

简介

notify()	随机通知调用notify对象上正在等待的线程，注意这个通知没有放弃对对象的锁，
仅在通知notify完成之后直到释放了对象的锁才在对方线程的wait方法处返回；

notifyAll()	这个方法会依次通知所有的正在等待在该对象上的线程，是一种比较保险的做法；

wait()	该方法会让调用线程进入休眠状态，只有等待另外线程的notify或者被中断才会返回，
注意的是，调用wait后，会释放对象的锁；

wait(long)	等待，这里的参数时间是毫秒，也就是等待长达n毫秒，如果没有通知就超时返回，
但是这里很难区分出是其他线程的notify还是超时返回；

wait(long, int)	对于超时更细粒度的控制，达到纳秒，但是这个方法用的不多。

        这里要说明notify方法不会释放对象的锁，而也只有释放了对象的锁，
		另一个线程才能从wait中竞争获得对象的锁并从wait方法中返回。

01
/**
02
 * @author weipeng
03
 */
04
public class WaitNotify {
05
    static boolean flag = true;
06
 
07
    static Object OBJ = new Object();
08
 
09
    public static void main(String[] args) {
10
        Thread t1 = new Thread(new Waiter());
11
        t1.start();
12
 
13
        try {
14
            Thread.sleep(1000);
15
        } catch (InterruptedException e) {
16
            e.printStackTrace();
17
        }
18
 
19
        Thread t2 = new Thread(new Notifier());
20
        t2.start();
21
 
22
    }
23
 
24
    /**
25
     * 等待，如果flag为false则打印
26
     */
27
    static class Waiter implements Runnable {
28
 
29
        @Override
30
        public void run() {
31
            // 加锁，拥有OBJ的Monitor
32
            synchronized (OBJ) {
33
                // 当条件不满足时，继续wait，同时释放了OBJ的锁
34
                while (flag) {
35
                    try {
36
                        System.out.println(Thread.currentThread()
37
                                + " still true. wait......" + new Date());
38
                        OBJ.wait();
39
                    } catch (InterruptedException e) {
40
                        e.printStackTrace();
41
                    }
42
                }
43
                // 条件满足时，完成工作
44
                System.out
45
                        .println(Thread.currentThread() + " is false. doXXX." + new Date());
46
            }
47
        }
48
    }
49
 
50
    static class Notifier implements Runnable {
51
 
52
        @Override
53
        public void run() {
54
            synchronized (OBJ) {
55
 
56
                // 获取OBJ的锁，然后进行通知，不会在notify调用中，释放OBJ的锁
57
                // 这也类似于过早通知
58
                // 直到当前线程释放了OBJ后，Waiter才能从wait方法中返回
59
                OBJ.notifyAll();
60
 
61
                flag = false;
62
 
63
                try {
64
                    Thread.sleep(10000);
65
                } catch (InterruptedException e) {
66
                    e.printStackTrace();
67
                }
68
            }
69
        }
70
    }
71
}
       程序的输出：

Thread[Thread-0,5,main] still true. wait……Sun Jun 24 20:53:03 CST 2012

Thread[Thread-0,5,main] is false. doXXX.Sun Jun 24 20:53:14 CST 2012

        可以看到，二者之间相差了10秒，也就是Thread.sleep(10000)这段代码造成的，
		可以看出Notifier没有释放OBJ的锁，而Waiter在对方没有释放前是不会返回的。

=========
PipedStream管道

      Piped这个词就是管道，相当于从一端入一端出的输入输出流。
	  是不是从网络和文件上读入内容，而是在线程之间传递数据，而传输的媒介为内存。

      管道主要包括了：

PipedOutputStream、PipedInputStream、PipedReader和PipedWriter四个，面向的处理内容为字节和字符。

01
public class PipedTest {
02
 
03
    static class Print implements Runnable {
04
        private PipedInputStream in;
05
 
06
        public Print(PipedInputStream in) {
07
            this.in = in;
08
        }
09
 
10
        @Override
11
        public void run() {
12
            int receive = 0;
13
            try {
14
                while ((receive = in.read()) != -1) {
15
                    System.out.println(receive);
16
                }
17
            } catch (IOException ex) {
18
                ex.printStackTrace();
19
            }
20
        }
21
 
22
    }
23
 
24
    /**
25
     * @param args
26
     */
27
    public static void main(String[] args) throws Exception {
28
        PipedOutputStream out = new PipedOutputStream();
29
        PipedInputStream in = new PipedInputStream();
30
 
31
        // Out ==> In
32
        out.connect(in);
33
 
34
        Thread t = new Thread(new Print(in));
35
        t.start();
36
 
37
        int receive = 0;
38
 
39
        while ((receive = System.in.read()) != -1) {
40
            out.write(receive);
41
        }
42
    }
43
 
44
}
        上述程序，以main线程作为输入，而另外的Print作为输出。
		对于Piped类型的流，必须要进行connect，如果没有绑定，对于该流的访问会抛出异常。

=========
完全等待超时
8

             有时我们需要在调用一个方法时等待一段时间（一般来说是设置一个值，有更改），等待条件的满足，
			 而等待是有时限的，比如：1000ms，如果在1000ms后无法满足条件那么返回，
			 否则在时限内如果成功则立刻返回。

模式

        之前提到了基于wait的经典模式，即：同步，while，wait加doXxx的逻辑，那么这种模式无法做到一点，就是能够让客户端超时返回。

        如果加入超时的话，对于经典模式的修改其实不会很复杂，假设超时时间是t ms，那么可以推知在now + t之后就会超时，则定义：

remaining = t;

future = now + t;

          这时仅需要wait(remaining)即可，在醒来之后会将future – now，这个会设置到remaining上，但是如果remaining为负数，则直接退出。

01
public synchronized Object get(long mills) throws InterruptedException {
02
        long future = System.currentTimeMillis() + mills;
03
        long remained = mills;
04
 
05
        // 当结果为空并没有超时
06
        while ((result == null) && remained > 0) {
07
            wait(remained);
08
 
09
            remained = future - System.currentTimeMillis();
10
        }
11
 
12
        return result;
13
    }
         在while的判断中加入了remained > 0的约束。这个模式就可以实现等待超时，
		 在mills毫秒内无法获取到result或者result已经获取到了，都会返回。

============
使用实例与场景

        这里我们模拟一个数据库链接获取的过程，这是一个消费者和生产者的案例。

         生产者每1000ms生产一个链接到池子中，每个消费者从池子中获取一个链接，
		 如果在800ms获取不到，那么就返回，并告知获取链接超时。
		 初始的池子里有10个链接，消费者有5个，生产者有2个。

Connection的定义

01
public class Connection {
02
    public void sendStatement() {
03
        try {
04
            Thread.sleep(10);
05
            System.out.println(Thread.currentThread() + " Send Statement");
06
        } catch (InterruptedException e) {
07
            Thread.currentThread().interrupt();
08
        }
09
    }
10
}
ConnectionPool的定义

01
public class ConnectionPool {
02
 
03
    private LinkedList<Connection> pool     = new LinkedList<Connection>();
04
    private static final int       MAX_SIZE = 20;
05
 
06
    public ConnectionPool(int initialSize){
07
        if (initialSize > 0) {
08
            for (int i = 0; i < initialSize; i++) {
09
                pool.addLast(new Connection());
10
            }
11
        }
12
    }
13
 
14
    public void releaseConnection() throws InterruptedException {
15
        synchronized (pool) {
16
            while (pool.size() >= MAX_SIZE) {
17
                pool.wait();
18
            }
19
 
20
            // 添加后需要进行通知，这样其他消费者能够感知到链接池中已经增加了一个链接
21
            pool.addLast(new Connection());
22
            pool.notifyAll();
23
        }
24
    }
25
 
26
    public Connection fetchConnection(long mills) throwsInterruptedException {
27
        synchronized (pool) {
28
            // 完全超时
29
            if (mills <= 0) {
30
                while (pool.isEmpty()) {
31
                    pool.wait();
32
                }
33
 
34
                return pool.removeFirst();
35
            } else {
36
                long futureTime = System.currentTimeMillis() + mills;
37
                long deltaTime = mills;
38
 
39
                while (pool.isEmpty() && deltaTime > 0) {
40
                    pool.wait(deltaTime);
41
                    deltaTime = futureTime - System.currentTimeMillis();
42
                }
43
 
44
                Connection result = null;
45
                if (!pool.isEmpty()) {
46
                    result = pool.removeFirst();
47
                }
48
 
49
                return result;
50
            }
51
        }
52
    }
53
}
          这里主要看一下fecthConnection，它提供了完全超时的实现，主要是通过计算出将要超时的时间点futureTime，
		  和超时的时间距离deltaTime，在这个基础上复用了经典的同步、while和do的结构，
		  只不过是在while的不通过条件中增加了时间距离的消耗判断，如果小于0直接返回，
		  当然面对过早通知，将会更新deltaTime。

          当执行从pool.wait方法中返回后，有可能是超时，也有可能是已经满足了池中有连接的状况，
		  因此如果有连接则直接返回，否则返回空。

测试用例

001
public class ConnectionPoolTest {
002
 
003
    static ConnectionPool pool  = new ConnectionPool(10);
004
 
005
    static CountDownLatch latch = new CountDownLatch(1);
006
 
007
    /**
008
     * <pre>
009
     * Thread[Thread-5,5,main] put a connection.
010
     * Thread[Thread-6,5,main] put a connection.
011
     * Thread[Thread-4,5,main] got a connection
012
     * Thread[Thread-3,5,main] got a connection
013
     * Thread[Thread-5,5,main] put a connection.
014
     * Thread[Thread-6,5,main] put a connection.
015
     * Thread[Thread-1,5,main] got a connection
016
     * Thread[Thread-4,5,main] got a connection
017
     * </pre>
018
     *
019
     * @param args
020
     */
021
    public static void main(String[] args) {
022
        for (int i = 0; i < 5; i++) {
023
            Consumer p = new Consumer(latch);
024
            Thread t = new Thread(p);
025
            t.start();
026
        }
027
 
028
        for (int i = 0; i < 2; i++) {
029
            Producer p = new Producer(latch);
030
            Thread t = new Thread(p);
031
            t.start();
032
        }
033
 
034
        latch.countDown();
035
    }
036
 
037
    static class Producer implements Runnable {
038
 
039
        private CountDownLatch latch;
040
 
041
        public Producer(CountDownLatch latch){
042
            this.latch = latch;
043
        }
044
 
045
        public void run() {
046
            try {
047
                latch.await();
048
            } catch (InterruptedException e) {
049
                Thread.currentThread().interrupt();
050
            }
051
            while (true) {
052
                try {
053
                    Thread.sleep(1000);
054
                } catch (InterruptedException e) {
055
                    e.printStackTrace();
056
                }
057
 
058
                try {
059
                    pool.releaseConnection();
060
                } catch (InterruptedException e) {
061
                    e.printStackTrace();
062
                }
063
 
064
                System.out.println(Thread.currentThread() + " put a connection.");
065
            }
066
        }
067
    }
068
 
069
    static class Consumer implements Runnable {
070
 
071
        private CountDownLatch latch;
072
 
073
        public Consumer(CountDownLatch latch){
074
            this.latch = latch;
075
        }
076
 
077
        public void run() {
078
            try {
079
                latch.await();
080
            } catch (InterruptedException e) {
081
                Thread.currentThread().interrupt();
082
            }
083
            while (true) {
084
                try {
085
                    Thread.sleep(1000);
086
                } catch (InterruptedException e) {
087
                    e.printStackTrace();
088
                }
089
 
090
                try {
091
                    Connection connection = pool.fetchConnection(0);
092
 
093
                    if (connection == null) {
094
                        System.out.println(Thread.currentThread() + " can not got a connection");
095
                    } else {
096
                        System.out.println(Thread.currentThread() + " got a connection");
097
                    }
098
                } catch (InterruptedException e) {
099
                    e.printStackTrace();
100
                }
101
 
102
            }
103
        }
104
    }
105
}
这是一个执行了一段时间的结果：

01
Thread[Thread-5,5,main] put a connection.
02
Thread[Thread-0,5,main] got a connection
03
Thread[Thread-6,5,main] put a connection.
04
Thread[Thread-0,5,main] got a connection
05
Thread[Thread-6,5,main] put a connection.
06
Thread[Thread-5,5,main] put a connection.
07
Thread[Thread-4,5,main] got a connection
08
Thread[Thread-5,5,main] put a connection.
09
Thread[Thread-6,5,main] put a connection.
10
Thread[Thread-4,5,main] got a connection
11
Thread[Thread-0,5,main] got a connection
          可以看到，因为生产者少，所以每次生产连接后，都被等待的消费者取走，
		  而超时是完全超时，如果我们吧等待的时间长度调整到2000ms，就可以看到如下结果：

1
Thread[Thread-6,5,main] put a connection.
2
Thread[Thread-0,5,main] got a connection
3
Thread[Thread-2,5,main] got a connection
4
Thread[Thread-1,5,main] can not got a connection
5
Thread[Thread-5,5,main] put a connection.
6
Thread[Thread-6,5,main] put a connection.
         有部分消费者，等待了2000ms没有得到连接后，就返回了，这里就非常类似数据库链接池的实现。







