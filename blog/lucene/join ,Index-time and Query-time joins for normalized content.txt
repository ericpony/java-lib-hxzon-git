join ,Index-time and Query-time joins for normalized content

by hxzon
===========

Package org.apache.lucene.search.join Description

This modules support index-time and query-time joins.

Index-time joins
索引时联合

The index-time joining support joins while searching, where joined documents are indexed as a single document block using IndexWriter.addDocuments(). This is useful for any normalized content (XML documents or database tables). In database terms, all rows for all joined tables matching a single row of the primary table must be indexed as a single document block, with the parent document being last in the group.
支持在搜索时联合，联合的文档是当做一个文档块被索引。
这对xml文档或数据库表非常有用。


When you index in this way, the documents in your index are divided into parent documents (the last document of each block) and child documents (all others). You provide a Filter that identifies the parent documents, as Lucene does not currently record any information about doc blocks.
如果你使用这种方式索引，被索引的文档将分为父文档（每个块的最后一个文档）和子文档（块的其他文档）。
你提供一个用来标识父文档的过滤器，因为lucene不记录任何文档块的信息。


At search time, use ToParentBlockJoinQuery to remap/join matches from any child Query (ie, a query that matches only child documents) up to the parent document space. The resulting query can then be used as a clause in any query that matches parent.

If you only care about the parent documents matching the query, you can use any collector to collect the parent hits, but if you'd also like to see which child documents match for each parent document, use the ToParentBlockJoinCollector to collect the hits. Once the search is done, you retrieve a TopGroups instance from the ToParentBlockJoinCollector.getTopGroups() method.
如果你只关心匹配的父文档，你可以使用任何收集器来收集父文档查询结果。
但如果你也关心子文档，使用“ToParentBlockJoinCollector”来收集查询结果。
查询完成后，使用“ToParentBlockJoinCollector.getTopGroups()”来取得“TopGroups”对象。

To map/join in the opposite direction, use ToChildBlockJoinQuery. This wraps any query matching parent documents, creating the joined query matching only child documents.

Query-time joins
查询时联合

The query time joining is index term based and implemented as two pass search. The first pass collects all the terms from a fromField that match the fromQuery. The second pass returns all documents that have matching terms in a toField to the terms collected in the first pass.
查询时联合在索引项时，使用两轮搜索。
第一轮收集匹配fromQuery的来自fromField域的项，
？第二轮返回“匹配第一轮收集的项”的“来自toField”域的文档。

Query time joining has the following input:

fromField: The from field to join from.
fromQuery: The query executed to collect the from terms. This is usually the user specified query.
multipleValuesPerDocument: Whether the fromField contains more than one value per document
scoreMode: Defines how scores are translated to the other join side. If you don't care about scoring use ScoreMode.None mode. This will disable scoring and is therefore more efficient (requires less memory and is faster).
toField: The to field to join to
Basically the query-time joining is accessible from one static method. The user of this method supplies the method with the described input and a IndexSearcher where the from terms need to be collected from. The returned query can be executed with the same IndexSearcher, but also with another IndexSearcher. Example usage of the JoinUtil.createJoinQuery() :

  String fromField = "from"; // Name of the from field
  boolean multipleValuesPerDocument = false; // Set only yo true in the case when your fromField has multiple values per document in your index
  String toField = "to"; // Name of the to field
  ScoreMode scoreMode = ScoreMode.Max // Defines how the scores are translated into the other side of the join.
  Query fromQuery = new TermQuery(new Term("content", searchTerm)); // Query executed to collect from values to join to the to values

  Query joinQuery = JoinUtil.createJoinQuery(fromField, multipleValuesPerDocument, toField, fromQuery, fromSearcher, scoreMode);
  TopDocs topDocs = toSearcher.search(joinQuery, 10); // Note: toSearcher can be the same as the fromSearcher
  // Render topDocs...

