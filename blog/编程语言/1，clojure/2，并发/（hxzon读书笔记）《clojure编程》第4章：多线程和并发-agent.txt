（hxzon读书笔记）《clojure编程》第4章：多线程和并发-agent

by hxzon

----
hxzon摘要：

1，send，send-off（阻塞型）。
2，await，await-for。
3，set-error-handler! （设置错误处理器），set-error-mode! （设置错误处理模式，挂掉或忽略）。
4，爬虫示例：利用agent来并行化工作量，有限状态机。

======
1，agent

不协调、异步的引用类型。
对agentA和agentB的修改是完全独立的。
发起对agent进行改变的线程，与真正改变agent值的线程，不是同一个线程。

-1，可以很安全地利用agent进行IO以及其它各种副作用操作。
-2，agent是STM感知的，因此它们可以很安全地用在事务重试的场景下。 

----
2，修改agent：send和send-off 。
参数：更新函数f，以及f需要的参数。f的第1个参数为agent。

更新函数f，加上额外参数，叫做一个“agent action”，每个agent维护一个action的队列。
注意，动作都是串行执行的。

send和send-off都会马上返回，它们只是把这个action放到agent的动作队列上，
然后这些动作会以它们被发送的顺序，在一些专用的线程上执行。
send和send-off的唯一区别就是执行动作的线程不同，
send的动作在一个固定大小的线程池中执行，所以不适宜进行IO或其它阻塞操作。
send-off的动作则在一个不限制大小的线程池中执行，所以适宜阻塞的、非CPU密集型的操作。

(def a (agent 500))
;= #'user/a

(send a range 1000)
;= #<Agent@53d2f8be: 500>

@a
;= (500 501 502 503 504 ... 999)

(def a (agent 0))
;= #'user/a

(send a inc)
;= #<Agent@65f7bb1f: 1>

----
3，等待动作执行完成：await，await-for 。

await-for可以指定超时时间。

(.getQueueCount agentA)可以得到队列中有多少个动作。但这是一个实现细节。

--
(def a (agent 5000))

(def b (agent 10000))

(send-off a #(Thread/sleep %))
;= #<Agent@da7d7b5: 5000>

(send-off b #(Thread/sleep %))
;= #<Agent@c0cd75b: 10000>

@a
;= 5000

(await a b)
;= nil

@a
;= nil

=====
4，处理动作中的错误。

如果一个动作抛出异常，默认的处理策略是这个agent默默的挂掉。
仍可以对挂掉的agent解引用，获得它最后的值，
但是再发送新动作会得到“使这个agent挂掉”的异常。
使用agent-error可以显示获取这个异常。

可以通过restart-agent来重启一个挂掉的agent，并重置它的值。
如果指定:clear-actions选项，还会清除agent已有的动作，防止它又马上挂掉。

(def a (agent nil))
;= #'user/a

(send a (fn [_] (throw (Exception. "something is wrong"))))
;= #<Agent@3cf71b00: nil>

a
;= #<Agent@3cf71b00 FAILED: nil>

(send a identity)
;= #<Exception java.lang.Exception: something is wrong>

(restart-agent a 42)
;= 42

(send a inc)
;= #<Agent@5f2308c9: 43>

(reduce send a (for [x (range 3)]
                 (fn [_] (throw (Exception. (str "error #" x))))))
;= #<Agent@5f2308c9: 43>

(agent-error a)
;= #<Exception java.lang.Exception: error #0>

(restart-agent a 42)
;= 42

(agent-error a)
;= #<Exception java.lang.Exception: error #1>

(restart-agent a 42 :clear-actions true)
;= 42

(agent-error a)
;= nil

----
创建agent时，通过:error-mode可以指定错误处理的模式，默认值:fail表示挂掉，:continue表示忽略错误。
在创建时还可以通过:error-handler指定错误处理函数，它的参数为agent和抛出的异常对象。
也可以通过set-error-handler! 和 set-error-mode! 来设置错误处理函数和错误处理模式。


(def a (agent nil :error-mode :continue))
;= #'user/a

(send a (fn [_] (throw (Exception. "something is wrong"))))
;= #<Agent@44a5b703: nil>

(send a identity)
;= #<Agent@44a5b703: nil>

(def a (agent nil
         :error-mode :continue
         :error-handler (fn [the-agent exception]
                          (.println System/out (.getMessage exception)))))
;= #'user/a

(send a (fn [_] (throw (Exception. "something is wrong"))))
;= #<Agent@bb07c59: nil>
; something is wrong

(send a identity)
:= #<Agent@bb07c59: nil>

(set-error-handler! a (fn [the-agent exception]
                        (when (= "FATAL" (.getMessage exception))
                          (set-error-mode! the-agent :fail))))
;= nil

(send a (fn [_] (throw (Exception. "FATAL"))))
;= #<Agent@6fe546fd: nil>

(send a identity)
;= #<Exception java.lang.Exception: FATAL>

====
5，IO，事务，以及嵌套的send 。

可以非常安全的利用agent来协调IO或者其它类型的阻塞操作。
因为agent会串行执行所有发送给它的动作，因此它给有副作用的操作提供一个很自然的同步点。

可以建立一个agent来保持一个指向文件，或者网络socket的输出流，或一个数据库的连接，或一个消息队列的连接，
可以确定发送到agent的每个动作在执行期间都能独占这个连接。
这使得agent非常容易融合到clojure的环境中，包括ref和atom，它们的目标就是最小化它们跟周围环境的副作用。

agent跟STM的实现紧密融合的。
在一个事务内，通过send和send-off发送的动作，会被保持到事务成功提交。
这意味着，事务被重试100次，被发送给agent的动作，也在事务成功提交“之后”被执行一次。

类似的，在一个agent动作内部，对send和send-off的调用（称为“嵌套发送”），也会被保持直到这个动作完成。

这两种情况下，被发送的动作，都可能因为一个校验器失败而被全部丢弃。

----
5.1，示例：利用agent，将引用状态的变更记录到日志。

利用agent的串行执行（每个动作在执行时独占agent），使得共享IO资源，却不需要使用锁。

利用观察器，以及agent，给游戏中的角色实现一个“后写”日志。

(require '[clojure.java.io :as io])

;两个输出源。
(def console (agent *out*))

(def character-log (agent (io/writer "character-states.log" :append true)))

(defn write
  [^java.io.Writer w & content]
  (doseq [x (interpose " " content)]
    (.write w (str x)))
  (doto w
    (.write "\n")
    .flush))

;观察器，把引用类型跟agent连接起来。
(defn log-reference
  [reference & writer-agents]
  (add-watch reference :log
    (fn [_ reference old new]
      (doseq [writer-agent writer-agents]
        (send-off writer-agent write new)))))

(def smaug (character "Smaug" :health 500 :strength 400))
(def bilbo (character "Bilbo" :health 100 :strength 100))
(def gandalf (character "Gandalf" :health 75 :mana 1000))

(log-reference bilbo console character-log)

(log-reference smaug console character-log)

(wait-futures 1
  (play bilbo attack smaug)
  (play smaug attack bilbo)
  (play gandalf heal bilbo))
; {:max-health 500, :strength 400, :name "Smaug", :items #{}, :health 490.052618}
; {:max-health 100, :strength 100, :name "Bilbo", :items #{}, :health 61.5012391}
; {:max-health 100, :strength 100, :name "Bilbo", :items #{}, :health 100.0}
; {:max-health 100, :strength 100, :name "Bilbo", :items #{}, :health 67.3425151}
; {:max-health 100, :strength 100, :name "Bilbo", :items #{}, :health 100.0}
; {:max-health 500, :strength 400, :name "Smaug", :items #{}, :health 480.990141}
; ...

(defn attack
  [aggressor target]
  (dosync
    (let [damage (* (rand 0.1) (:strength @aggressor) (ensure daylight))]
      (send-off console write
        (:name @aggressor) "hits" (:name @target) "for" damage)
      (commute target update-in [:health] #(max 0 (- % damage))))))

(defn heal
  [healer target]
  (dosync
    (let [aid (min (* (rand 0.1) (:mana @healer))
                (- (:max-health @target) (:health @target)))]
      (when (pos? aid)
        (send-off console write
          (:name @healer) "heals" (:name @target) "for" aid)
        (commute healer update-in [:mana] - (max 5 (/ aid 5)))
        (alter target update-in [:health] + aid)))))

(dosync
  (alter smaug assoc :health 500)
  (alter bilbo assoc :health 100))
; {:max-health 100, :strength 100, :name "Bilbo", :items #{}, :health 100}
; {:max-health 500, :strength 400, :name "Smaug", :items #{}, :health 500}

(wait-futures 1
  (play bilbo attack smaug)
  (play smaug attack bilbo)
  (play gandalf heal bilbo))
; {:max-health 500, :strength 400, :name "Smaug", :items #{}, :health 497.414581}
; Bilbo hits Smaug for 2.585418463393845
; {:max-health 100, :strength 100, :name "Bilbo", :items #{}, :health 66.6262521}
; Smaug hits Bilbo for 33.373747881474934
; {:max-health 500, :strength 400, :name "Smaug", :items #{}, :health 494.667477}
; Bilbo hits Smaug for 2.747103668676348
; {:max-health 100, :strength 100, :name "Bilbo", :items #{}, :health 100.0}
; Gandalf heals Bilbo for 33.37374788147494
; ...

----
5.2，示例：利用agent来并行化工作量。
（有限状态机，受益匪浅。）

(require '[net.cgrand.enlive-html :as enlive])

(use '[clojure.string :only (lower-case)])

(import '(java.net URL MalformedURLException))

(defn- links-from
  [base-url html]
  (remove nil? (for [link (enlive/select html [:a])]
                 (when-let [href (-> link :attrs :href)]
                   (try
                     (URL. base-url href)
                     ; ignore bad URLs
                     (catch MalformedURLException e))))))

(defn- words-from
  [html]
  (let [chunks (-> html
                 (enlive/at [:script] nil)
                 (enlive/select [:body enlive/text-node]))]
    (->> chunks
      (mapcat (partial re-seq #"\w+"))
      (remove (partial re-matches #"\d+"))
      (map lower-case))))

;网址队列，收集爬取的网页上的新链接。
(def url-queue (LinkedBlockingQueue.))

;已抓取的网址。
(def crawled-urls (atom #{}))

;词频信息。
(def word-freqs (atom {}))

(declare get-url)

;定义25个agent，放入agents集合。
;每个agent含有::t 和 :queue 。
; ::t 保存这个agent下一步要做的事情的函数。这里使用全限定关键字，是为了避免和用户加进状态的关键字冲突。
(def agents (set (repeatedly 25 #(agent {::t #'get-url :queue url-queue}))))

(declare run process handle-results)

; ::blocking元数据用来标明本函数为阻塞型，使得run函数会调用send-off来发送它。
(defn ^::blocking get-url
  [{:keys [^BlockingQueue queue] :as state}]
  (let [url (as-url (.take queue))] ;从网址队列里取出一个网址。
    (try
      (if (@crawled-urls url)   ;如果该网址已经爬取过，agent状态不变。
        state
        {:url url
         :content (slurp url)   ;抓取网页内容。
         ::t #'process})    ;下一步进入process函数。
      (catch Exception e
        ;; skip any URL we failed to load
        state)
      (finally (run *agent*)))))
; 在一个动作内部，*agent*绑定到当前的agent。
; 这种用法很常见，它使得agent可以连续运行。

(defn process
  [{:keys [url content]}]
  (try
    (let [html (enlive/html-resource (java.io.StringReader. content))]
      {::t #'handle-results ;下一步进入handle-results函数。
       :url url
       :links (links-from url html)
       :words (reduce (fn [m word]
                        (update-in m [word] (fnil inc 0)))  ;fnil返回一个给参数加上默认值的函数（这里是0），它使得不用显示去检查参数是不是nil。
                {}
                (words-from html))})
    (finally (run *agent*))))

(defn ^::blocking handle-results
  [{:keys [url links words]}]
  (try
    (swap! crawled-urls conj url)   ;加入已抓取的网址。
    (doseq [url links]
      (.put url-queue url))     ;加入爬取网页上找到的新链接。
    (swap! word-freqs (partial merge-with +) words) ;合并词频。
    {::t #'get-url :queue url-queue}    ;下一步进入get-url函数。
    (finally (run *agent*))))

; run会检查有没有::paused（是否暂停）。
(defn paused? [agent] (::paused (meta agent)))

; run，网络爬虫的“主循环”。
(defn run
  ([] (doseq [a agents] (run a)))   ;没有参数的话，启动所有的agent。
  ([a]
    (when (agents a)    ;如果a是agents中的一个agent。
      (send a (fn [{transition ::t :as state}]
                (when-not (paused? *agent*)
                  (let [dispatch-fn (if (-> transition meta ::blocking) ;是否是阻塞型操作，从而选择send或send-off。
                                      send-off
                                      send)]
                    (dispatch-fn *agent* transition)))
                state)))))

;每个agent都含有::t，所以知道下一步的操作，但它没法知道下一步是不是阻塞的，所以需要run。
;同时run能检查一个agent是否打上了::paused标记。

; 可以通过元数据来暂停和重启agent方法。
(defn pause
  ([] (doseq [a agents] (pause a)))
  ([a] (alter-meta! a assoc ::paused true)))

(defn restart
  ([] (doseq [a agents] (restart a)))
  ([a]
    (alter-meta! a dissoc ::paused)
    (run a)))

(defn test-crawler
  "Resets all state associated with the crawler, adds the given URL to the
  url-queue, and runs the crawler for 60 seconds, returning a vector
  containing the number of URLs crawled, and the number of URLs
  accumulated through crawling that have yet to be visited."
  [agent-count starting-url]
  (def agents (set (repeatedly agent-count  ;这里为了测试，重定义了agents，使得可以调整agent数量。
                     #(agent {::t #'get-url :queue url-queue}))))
  (.clear url-queue)
  (swap! crawled-urls empty)
  (swap! word-freqs empty)
  (.add url-queue starting-url)
  (run)
  (Thread/sleep 60000)
  (pause)
  [(count @crawled-urls) (count url-queue)])

(test-crawler 1 "http://www.bbc.co.uk/news/")
;= [86 14598]

(test-crawler 25 "http://www.bbc.co.uk/news/")
;= [670 81775]

; 查看计算出来的单词频度。
(->> (sort-by val @word-freqs)
  reverse
  (take 10))
;= (["the" 23083] ["to" 14308] ["of" 11243] ["bbc" 10969] ["in" 9473]
;= ["a" 9214] ["and" 8595] ["for" 5203] ["is" 4844] ["on" 4364])

(->> (sort-by val @word-freqs)
  (take 10))
;= (["relieved" 1] ["karim" 1] ["gnome" 1] ["brummell" 1] ["mccredie" 1]
;= ["ensinar" 1] ["estrictas" 1] ["arap" 1] ["forcibly" 1] ["kitchin" 1])

; 区分阻塞和非阻塞操作，可以最大化利用资源。
; 通过把process标示成阻塞的，查看对整体吞吐量的负面影响。
(alter-meta! #'process assoc ::blocking true)
;= {:arglists ([{:keys [url content]}]), :ns #<Namespace user>,
;= :name process, :user/blocking true}

(test-crawler 25 "http://www.bbc.co.uk/news/")
;= [573 80576]

