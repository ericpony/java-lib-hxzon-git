稳扎稳打C++11：（类09）构造函数初始化器列表
来源：ilanever.com | 作者：LanPei | 创建时间：2014-4-23 23:59:49
http://ilanever.com/article/sitedetail.html;jsessionid=612D1550D54A398C5871628498084252?id=280


有些情况下必须使用构造函数初始化器。
例如，成员是const的或是引用；
成员是一个类类型，但该类型没有默认构造函数。

==========
目录

有时候构造函数初始化器是必须的
成员初始化的顺序

====
如果我们不在构造函数初始化器列表（constructor initializer list）中显示地初始化成员，
该成员将在“构造函数”执行“前”被默认初始化。

以下两种方式数据成员的值是相同的：

Sales_data::Sales_data(const string &s, unsigned cnt, double price)
{
    bookNo = s;
    units_sold = cnt;
    revenue = cnt * price;
}

Sales_data::Sales_data(const string &s, unsigned cnt, double price):
    bookNo(s), units_sold(cnt), revenue(cnt * price)
{}

以上两种方式不同之处是第一种方式是先初始化成员，再对成员赋值；
第二种方式是使用构造函数初始化器直接初始化成员。
二者的显著区别依赖于数据成员的类型。

====
有时候构造函数初始化器是必须的 

有些情况下必须使用构造函数初始化器。
例如，成员是const的或是引用；
成员是一个类类型，但该类型没有默认构造函数。

使用构造函数初始化器时，在构造函数开始执行时，初始化过程完成。

====
成员初始化的顺序 

成员初始化的顺序与类中成员定义的顺序相同，
与构造函数初始化器列表中初始化的顺序无关。

建议编写过程中，构造函数初始化器的顺序与成员声明的顺序保持一致，
并且避免使用一个成员去初始化另一个成员的情况。

