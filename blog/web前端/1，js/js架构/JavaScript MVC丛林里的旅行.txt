JavaScript MVC丛林里的旅行

http://anotherwayaround.blog.163.com/blog/static/19006622020127121234412/

2012-08-12 17:59:47

原文链接：Journey Through The JavaScript MVC Jungle
http://coding.smashingmagazine.com/2012/07/27/journey-through-the-javascript-mvc-jungle/

除了这篇文章本身，文中推荐的这篇文章也非常好：Learning JavaScript Design Patterns
http://addyosmani.com/resources/essentialjsdesignpatterns/book/#detailmvcmvp

（节选）

======
框架：在什么情况下该使用哪个

为了帮助大家缩小框架的选择范围，下面列出了各种框架的特性总结，希望可以帮助你找到合适的几个选项来进行尝试。

----
我希望它可以像开发桌面应用程序那样开发Web。
它应当提供自己的方法，模块，实现了一个MVC的变种，
不需要手动的关联我应用程序中的组件，支持持久化，
可以计算属性并且可以自动更新模板。
它支持合理的状态管理，而不是像很多其他的框架那样需要手动的路由。
它有很全面的文档和模板。
它还有一些辅助工具（ember.gem，ember for brunch）。
使用Ember.js。

----
我希望它是轻量级的，
并且支持动态绑定的模板、路由、
和一些主流的库集成（比如jQuery，Dojo），并且可以优化性能。
它提供一套实现model，view，controller的方法。
它还没有在很多大型的面相公众的系统上使用过，但是是有潜力的。
理想情况下，这个框架需要那些有搭建复杂应用程序经验的人来使用。
使用CanJS。

----
我希望框架可以使用View来引导行为。
它是这样做到的，使用自定义的HTML标签和组件来完成你的意图。
为它写测试应当比较容易，通过一个MVC的变种来实现URL管理（路由）和分离职责。
他使用了和其他框架都不同的方式，提供了一个HTML解释器，这样你可以在HTML里创建你自己的DSL。
它受到即将到来的Web平台功能（比如Web组件）的启发，并且它有自己的辅助工具（angular-seed）。
使用AngularJS。

----
我希望它很灵活，可以提供最小化的解决方案来帮助我分离职责。
它应当提供一个持久层，并且支持RESTful的同步，models，views（和controllers），事件驱动的通信，模板和路由。
它允许当model变化时，可以更新view。
我希望有一些结构方面的决定可以留给我来做。
理想情况下，很多大公司用这个方案来搭建重要的系统。
如果我用它搭建一个复杂的系统，我希望与一个关于这个框架的活跃社区，
里面已经解决了很多比较重要的问题（Marionette, Chaplin, Aura, Thorax）。
理想情况下，最好还有一些辅助工具（grunt-bbb, brunch）。
使用Backbone.js。

----
我希望它简单，支持异步的交互，并且没有任何依赖。
它应该提供自己的方式来搭建应用，但应该是可扩展的。
它应当提供非常简单的元素比如model，view，controller，event和路由等。
它很小。它在CoffeeScript下也可以使用，并且有充分的文档。
使用Spine。

----
我希望它可以基于数据model和描述性的绑定，很容易的搭建复杂、动态的UI。
它可以在model变化时动态的更新UI，绑定应当是双向的，并且支持数据模型的依赖追踪。
我可以使用任何我喜欢的框架，或者已有的应用。
它可以支持模板，并且是可扩展的。
使用KnockoutJS。

----
我希望它为我搭建大型系统搭建良好的基础。
它需要支持一个成熟的组件结构，支持模块的延迟加载，并且可以异步的，简单的与CDNs集成，
有一系列模块（图形，图标，表格等）可以直接使用，
并且支持国际化（i18n，I10n）。
它支持OOP，MVC，并且可以创建block来创建更复杂的系统。
使用Dojo。

----
我希望它可以使用YUI扩展的结构。
它应当支持model，view和路由，并且可以很简单的开发多个页面的应用程序，
并支持路由、页面的切换等功能。
同时，它是一个大型的，完全的解决方案，
包括创建一个应用程序框架所需要的小控件、组件和工具。
它有辅助工具（yuiproject），但是需要更新。
使用YUI。

----
我希望它可以帮助我搭建简单的Web应用和网站。
我不希望有太多的代码被修改，不需要考虑代码结构的问题。
这个框架可以兼容不同的浏览器，这样我可以关注在有趣的事情上。
它可以让我更方便的绑定事件，更方便的和远程服务交互，可扩展的，并且有一个大的社区支持。
使用jQuery。


======
开发人员对最流行的几个框架的评价

作为我们研究MV*框架的一部分，我们决定对这些解决方案的使用情况做一个调查。
我们采访了一些开发人员，哪些框架是他们最常使用的，
更重要的是，为什么他们要推荐这些框架给大家。
我们还问了哪些东西是他们觉得他们的项目还需要哪些框架没有提供的功能。

我们把一些有意思的回答整理如下。

----
EMBER.JS

优点：
live templates和observable objects的结合改变了我写JavaScript的方式。
在最开始的时候，可能要多费点脑筋，之后，你会发现代码的职责很分明。
我发现一旦我把框架搭建起来了，再添加一个比较复杂的功能也只需要几行代码。
没有Ember，要实现相同的功能是会让人崩溃的。

缺点：
Ember现在只发布到1.0。
还有很多不稳定的地方，比如 路由和Ember data。
它的新网站比较有帮助，但是它的文档还是不如其他框架多，这个有点让人提心吊胆。
一旦遇到什么问题，你可能很难找到到底是为什么。
还有，ember提供的错误消息比较差劲儿。

优点：

主要因素:
a) 它的功能帮我避免了很多重复性代码(bindings, computer properties, view layer with the cool handlebars)
b) 他们的核心团队： 我是一个Rails developer，我知道Yehuda Katz的作品。我相信他 =)

缺点：
文档。很遗憾Ember并没有像Backbone、Angular或者其他框架那样提供很好的文档、教程还有截屏。
现在，我们一边写代码一边找文档，这样很不好。

优点：
遵守约定胜过配置文件。
Ember帮你在一些琐碎的问题上做了一些决定，他是至今为止用来搭建客户端应用程序最方便的框架。

缺点：
学习曲线。
它不像其他框架，比如Backbone那样，有足够的新手指南，
一部分原因是它的社区比较小，
但更主要的原因是因为它现在的版本还是pre-1.0，它还没有发布一个稳定的版本。

优点：
简单，有绑定功能，与Handlebar的集成，可以很容易的实现模块化。

缺点：
我希望这个框架可以帮我集成ember-data，并且支持把本地存储同步到REST API，
现在的版本还不支持这些华丽丽的功能，希望有一天可以实现 ;-)

----
ANGULARJS

优点：
a) 双向的数据绑定非常强大。
你只需要考虑model和它的状态，而不用考虑一系列事件是如何绑定的。
model是唯一正确的数据来源。
b) 性能。
AngularJS本身很小。
它使用DOM节点作为模板，而不是把字符串转化为DOM节点，这样做性能比较好。
c) 如果你只需要支持现代浏览器，那你可以不用依赖jQuery了。

缺点：
我希望当model状态改变时，我可以设置UI状态的渐变。
尤其是对于那些使用ng-show或者ng-hide的元素，我希望可能方便的设置它们的fade或者slide效果。

优点：
它很直观，有很全面的文档。
我喜欢它实现数据绑定的方法，基于HTML的view，嵌入的scope。
我从Backbone/Thorax切换到Angular，一点也不想换回去。
新的Chrome扩展Batarang可以和Chrome Developer's Tools集成，可以方便的动态的访问Angular的数据结构。

缺点：
虽然在GitHub有为Angular添加拖拽功能的外部组件，
但我还是我希望这个框架本身可以提供这个功能。
我还希望有更多的第三方插件，我觉得一个成熟的AngularJS的社区出现是早晚的事情，
到那个时候，Angular的社区就会像现在jQuery的社区一样，我们可以在上面找到很多好用的插件。

优点：
它很大程度上减少了样板代码，通过组件的方式实现了代码的重用，让代码更加优美。
提供了扩展HTML语法的方法，使得一些很复杂的功能只需要为HTML写一个简单的directive（attribute）就可以了。
而且它支持依赖注入，这样就使得测试非常容易。
它可以让你不需要依赖jQuery就可以写大型的应用程序，甚至可以不用直接的操作DOM。
这是一个壮举。

缺点：
它的学习曲线某种程度上比Backbone更陡峭一些，但学习它还是非常有价值的。
文档可以更好一些。

----
BACKBONE.JS

优点：简单。只有4个核心组件（Collection，Model，View，Router）。
有一个成熟的社区，并且在StackOverflow上能找到很多解决方案。
高阶的框架，如Marionette或者Vertebrae，里面有很多非常好的代码。
一些人可能喜欢“low-levelness”——需要写很多重复代码，但是可以自定义应用程序的架构。

缺点：我不喜欢扩展方法的工作方式——它把父对象的内容复制到一个新的对象中。
Prototypal inheritance FTW。
文档里的例子有时候会让我无法关联到我自己的应用场景。
还有，在读了TODO教程之后，还需要自己做好多研究才能找到搭建一个大型应用程序的办法。

我很怀念DocumentCloud (BB, _)在项目里对官方AMD的支持。
[注意：在RequireJS 2.0里，提供了新的RequireJS shim()方法，这个已经不再是一个问题了。]

优点：最开始花了些精力弄明白Backbone是如何工作的，之后发现这个框架非常有用。
表现在几个方面，有良好的支持，轻量级的，并且在持续的更新。
和Underscore、jQuery/Zepto等框架一起，是我在大部分项目中使用的工具。

缺点：有很多关于如何使用Backbone的文档，但是不太一致，并且针对不同Backbone的不同版本。
我曾经让其他的开发者看一下Backbone，他们还在使用版本v0.3。
这并不是一个Backbone本身的问题，但这个问题会导致人们不喜欢这个框架。

这个问题可能在很多事情上都会发生，但我人文在Backbone上发生的比较频繁。
我甚至看见一个月前写的文章还是用很古老的Backbone方法或者模式。

无论我遇到什么样让我不爽的问题，我总能在它的社区里找到靠谱的解决方案。
对我来说，这就是我使用Backbone的原因，有个强大的社区在支持它。

优点：提供了很多合理的抽象 —— 让你可以根据的项目进行调整。

缺点：我会重写（或者删除）Backbone.sync。
它对典型的客户端发起的HTTP请求做了好多假设，并且不太适合和WebSockets一起使用。

优点：很好入门，是一个MV*框架的很不错的实现方式。
它是可定制的，并且有很多其他的人使用它，所以更容易得到帮助和支持。

缺点：它默认不提供对view的绑定（虽然你可以自己搞定）。
修改一个属性就要重画整个页面比较浪费。

RESTful API有很多优点，但是不支持大数据的保存（这是REST本身的问题，但还是一个问题），
并且对于不同类型的操作很难使用不同的URI，这个很不好。

----
KNOCKOUTJS

优点：我不需要一直使用它，但是KnockoutJS是一个实现单页面程序的非常好的工具。
实现实时排序非常方便；
相比于Backbone中所谓的“collection views”，
KnockoutJS通过使用observable arrays提供了更好的API。
可以再observable上添加自定义事件来实现一些效果，等等。

缺点：感觉它的API很难实现大型程序，在大一点的程序中，还是倾向于使用Backbone。
（这可能和社区支持也有关系）。

优点：我喜欢它的数据绑定机制，使用起来非常舒服。
我尤其喜欢它使用control flow的绑定来实现模板替换的方法。

缺点：在程序架构上，没提供什么指导方案或者好的实践。
除了有一个view model之外，这个框架并没提供什么机制来帮助你定义一个结构良好的view model。
用这个框架很容易写出一些很大的不好维护的function。

----
JAVASCRIPTMVC

优点：所有的工具都包含了，只是需要运行命令进行编译。
我用了6个月觉得很好。

缺点：我只是希望下个版本的开发能快点。
开发人员已经知道了问题，但是还是花了大半个月的时间才开始处理，我只能先打个补丁。

----
MARIA

优点：Maria是一个纯MVC的框架，它只关注MVC。不多也不少，简单干净。

缺点：最好再多点使用文档，多点测试用例。
要是有个使用Maria搭建MVC的教程就更好了。

----
CUJO.JS

优点：真正的应用似乎很难很完美的放进MV*的盒子里，最重要的东西总是在这个盒子之外。
使用cojo.js，你可以自己定义这个盒子。

是的，cujo.js是一个high-level的MV*的功能 - 比如创建view，model，controller等等。
但是每个应用是不同的，没有哪个框架能解决所有问题。
cujo.js没有尝试去做所有的事情，它也提供了lower-level的一些工具，
architectural plumbling和丰富的插件系统可以用来集成或者扩展其他的MV*框架。

创建一个适合你的应用的架构，而不是强迫你的应用去使用其他人写出来的框架。

缺点：JavaScript社区还没有准备好去实现一些大规模的应用。
我们中的许多人甚至还不知道设计模式和架构模式的存在。

因为cujo.js和其他的框架非常不同，它需要的不只是一个间的API的引用或一些代码的片段。
如果没有教程，文档或者一步一步的例子，cujo.js可能看起来很奇怪，没法接受，
但是文档方面的支持很快就会有的。

----
BATMAN

优点：它很强大，并且它的view bingdings system很容易使用。
和Rails一起使用很和谐，并且它遵循“约定胜过配置”的思想。

缺点：文档可以写更好些。
而且我觉得Shopify并没有把他承诺要添加的功能添加进来。

----
EXTJS

优点：我认为ExtJS和Ext Designer一起使用时可以发挥最好的作用。
设计师可以使用它做出页面的mockup，再由程序员填入内容。
我觉得把它和其他的MVC框架（比如Backbone）比较是不公平的——
它的强项是创建丰富的图形化界面，而不是简单的Web应用。

对于丰富的，商业的后台应用来说，
我认为ExtJS依然是JavaScript解决方案中最好的选择。
For public-facing Web apps I’d rather have something that gives me more control over the markup 
(and ideally something that degrades gracefully).

缺点：它的学习曲线比其他框架更陡峭。
可能有人说研究ExtJS要花很久，浪费时间。
但我认为，让团队掌握这个工具可以减少他们的开发时间。

优点：我认为ExtJS 4最大的特点就是它帮你养成MVC的习惯，
并且首选的文件系统结构来自bat。
从Dojo的入门教程来看，Dojo主要服务于已有网站，而ExtJS要求你从网站草稿做起。

使用ExtJS让人感觉好像没有在写HTML，它有很丰富的组件库，你只要写能让你网站启动起来的HTML就可以了。

很高兴看到Web组件收到更多的支持。
最终，它会使我们可以操作DOM，而不用害怕破坏了一些插件或者导致你的应用的内部状态变得不一致。

缺点：它的license比较严格，好些人不理解。
如果可以让大家清楚的知道使用它所需要的成本，大家可能就更有兴趣研究它。
对某一些解决方案可能会有这个担心，但对于一些大的商业项目，这个应该不是个问题。

优点：ExtJS是一个帮助我们快速搭建内部应用的很好的工具。
我喜欢用HTML和JavaScript写程序，我对ExtJS很满意。
虽然ExtJS让你感觉好像没有真正在写HTML，但它还是提供了很强大的功能，尤其是当你要创建复杂UI的时候。

缺点：我绝对同意它是一个很重的框架，而且我不会推荐大家在面相公众的网络应用中使用它。
我对这个框架最大的牢骚就是它太难测试了。
我们的测试人员最后改用Sikuli，因为实在是没办法是用Selenium去测试它。

----
DOJO

优点：Dojo的语法很简单。
它支持动态的加载，在有些时候，最初要下载的文件只有6K大小。
它兼容AMD，使它变得非常方便。
它封装了很多功能，可以直接使用，包括基本的DOM操作，还有复杂的SVG，VML和canvas功能。
它的widget系统，Dijit，更提高了它的易用性。
它是一个很丰满很全面的工具集。

缺点：dojo/_base/declare功能不是100%的模式兼容。
并且它的向后兼容性不好，导致很难上手，虽然这个问题可能在Dojo 2.0版本中解决。

优点：很好的组件：tabs，datagrid，formManager等等，在各种浏览器下表现一致。
兼容AMD。
可以使用mock很容仪的测试。
由于amd，它可以和其他的框架集成的很好（我把它和JMVC集成）。

缺点：组件默认的设计方式有点落伍。
不完全的html5。文档很一般。

----
YUI

优点：YUI3是一个模块化的，可以随意使用的组件库，它包含所有Backbone的优点和一些其他的优点。
我认为它改进了Backbone解耦方面的一些概念
（比如，attribute是一个单独的模块，可以放到其他的对象中 - 事件模块可以一样处理）。

缺点：我希望YUI3可以支持Ember的自动关联，我想这是Ember的一大胜利。
否则，我认为YUI3是一个优秀的组件库，我可以随意挑选我需要的内容。
我还希望看到一个更兼容AMD的模块加载器。
现在的加载器工作的很好，但是如果我可以开始一个新的基于AMD的模块，
在这个模块里使用某个YUI3的组件，但其他的地方还使用AMD就更好了。

