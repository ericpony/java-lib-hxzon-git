（hxzon学习笔记）clojure-与java一起工作

by hxzon
========
对java的支持实际只有点和new两种，其它都是语法糖。

1，生成类实例。

通过new：
(def rnd (new java.util.Random))

也可直接写出类名加点号：
(Random.)

========
2，调用类或实例的方法和属性。

(. class-or-instance member-symbol & args)
(. class-or-instance (member-symbol & args))

(. rnd nextInt) 还可成 (.nextInt rnd) 。

(. Math PI) 静态域还可写成 Math/PI 。

静态方法可写成 (System/currentTimeMillis) 。

----
多次连续调用的缩写形式
(.. class-or-instance form & forms)。

(.getLocation (.getCodeSource (.getProtectionDomain (.getClass '(1 2)))))
可以缩写为
(.. '(1 2) getClass getProtectionDomain getCodeSource getLocation)

--
在同一对象上调用多个方法(doto class-or-inst & member-access-forms)。

(doto (System/getProperties)
   (.setProperty "name" "Stuart")
   (.setProperty "favoriteColor" "blue"))

========
3，通过import显示引入类，这样就不需要类全名。

(import [& import-lists])

(import '(java.security MessageDigest))


4，instance? 类似Java的instanceof，检测一个对象是否是某个类的实例。

(instance? Integer 10)
;= true


=========
5，memfn 创建匿名函数包装Java方法，使其在Clojure中能像Clojure函数那样使用。

user=> (map (memfn toUpperCase) ["a" "short" "message"])
("A" "SHORT" "MESSAGE")

还可以写成如下形式：
user=> (map #(.toUpperCase %) ["a" "short" "message"])
("A" "SHORT" "MESSAGE")


6，bean包装JavaBean将其转换为不可变的Clojure映射：
(bean java-bean)


7，format包装了Java的format方法，格式化字符串：

(format fmt-string & args)，如

user=> (format "%s ran %d miles today" "Stu" 8)
"Stu ran 8 miles today"

说明：占位符详细参考Java相关文档。

======
8，可以使用seq将任意Java数组包装成Clojure序列。

user=> (seq (make-array String 5))
(nil nil nil nil nil)


9，创建数组。

创建一维数组 (make-array class length)。

user=> (make-array String 5)
#<String[] [Ljava.lang.String;@5f6303>

创建多维数组 (make-array class dim & more-dims)。

user=> (make-array String 2 2)
#<String[][] [[Ljava.lang.String;@766a24>

一系列类似int-array的函数用来创建Java基础类型数组。

user=> (int-array 5)
#<int[] [I@1742700>


10，
to-array函数直接将集合转化为数组：
(to-array sequence)。

说明：转换的结果为Object数组。

user=> (to-array ["Easier" "array" "creation"])
#<Object[] [Ljava.lang.Object;@cf66b>

----
into-array函数也能将集合转换为数组，并且可以指定数组元素类型：
(into-array type seq)。type可选。

user=> (into-array String ["Easier" "array" "creation"])
#<String[] [Ljava.lang.String;@110c31>

(into-array CharSequence ["a" "b" "c"]) 
;= #<CharSequence[] [Ljava.lang.CharSequence;@5acad437>

生成原始类型数组。
(into-array Long/TYPE (range 5))
;= #<long[] [J@21e3cc77>

如果忽略类型参数，into-array则根据第一个元素猜测数组元素的类型。

(into-array ["a" "b" "c"])
;= #<String[] [Ljava.lang.String;@4413515e>

----
aclone
function
Usage: (aclone array)

Returns a clone of the Java array. Works on arrays of known types.


11，
aset 设置Java数组项值：
一维数组 (aset java-array index value)
多维数组 (aset java-array index-dim1 index-dim2 ... value)

aget 获取Java数组项值：
一维数组 (aget java-array index)
多维数组 (aget java-array index-dim1 index-dim2 ...)

alength获取数字长度：
(alength java-array)

对多维数组处理的性能问题，见下文“Use Primitive Arrays Judiciously”部分。

----
aset-boolean， aset-byte， aset-char， aset-double， aset-float， aset-int， aset-long， aset-short 。

aset-char
function
Usage: (aset-char array idx val)
       (aset-char array idx idx2 & idxv)

Sets the value at the index/indices. 
Works on arrays of char. 
Returns val.


=======
12，（数组循环）

map和reduce只能用于容纳对象的序列，如果应用于数组，会引起装箱。

----
amap函数转换Java数组的每个元素：
(amap a idx ret expr)

amap创建数组的克隆，并绑定到变量ret，
对数组a每一个元素执行expr表达式，idx绑定到数组元素索引，
表达式结果赋值给克隆的数组对应的位置，最后返回克隆的数组（即ret）。

user=> (def strings (into-array ["some" "strings" "here"]))
#'user/strings

user=> (seq (amap strings idx _ (.toUpperCase (aget strings idx))))
("SOME" "STRINGS" "HERE")

----
areduce函数类似amap，但可以返回值任意：
(areduce a idx ret init expr)

areduce开始用init初始化ret，然后对每一个数组a元素计算表达式expr，将计算结果赋给ret，
最后返回ret（即表达式的最后一次计算值）。

user=> (areduce strings idx ret 0 (max ret (.length (aget strings idx))))
7

上面的代码计算数组strings中，最长字符串的长度。


==========
13，通过 ^宏 给参数添加类型元数据。

[^ClassnameXX c]，内部扩展成^{:tag ClassnameXX}，clojure内部用tag来表示类型。

最多只能对4个参数进行类型提示。
clojure中只有long和double两种原始类型，没有int、short、byte、char、boolean等。

(defn ch>= ^Boolean [ ^Character ch1 ^Character ch2]
   (>= (int ch1) (int ch2)))

(defn integer-sum-to [n]
	(let [n (int n)]
	  (loop [i (int 1) sum (int 0)]
		(if (<= i n)
			(recur (inc i) (+ i sum))
			sum))))

(defn ^long integer-sum-to [^long n]
	(loop [i 1 sum 0]
		(if (<= i n)
			(recur (inc i) (+ i sum))
			sum)))

只在必要时才用类型提示。这会使得clojure编译代码时不使用反射，从而提高运行时速度。
如果对参数提示类型，但函数体代码不受该类型限制，那么实际调用时用不匹配的类型实参，不会出错。

(defn accepts-anything
  [^java.util.List x]
  x)
;= #'user/accepts-anything

(accepts-anything (java.util.ArrayList.))
;= #<ArrayList []>

(accepts-anything 5)
;= 5

(accepts-anything false)
;= false

--
为了便于阅读函数定义，还可以将元数据放到函数定义最后：
user=> (defn shout
              ([s] (.toUpperCase s))
              {:tag String})

--
从Clojure1.1开始，你能够为数组声明基本类型提示：
Java的boolean[], char[], byte[], short[], int[], long[], float[], 和 double[]数组能被分别标识为
#^booleans, #^chars, #^bytes, #^shorts, #^ints, #^longs, #^floats, and #^doubles。
（同样可以采用#^objects 标识 Object[]）
https://code.google.com/p/clojure-doc-en2ch/wiki/Chapter_14_performance

--
可以对形式加类型提示：
(defn split-name
	[user]
	(zipmap [:first :last]
		(.split ^String (:name user) " ")))

这里对(:name user)添加类型提示。

--
可以对返回值加类型提示（加在函数的参数上面）：
(defn file-extension
	^String [^java.io.File f]
	(-> (re-seq #"\.(.+)" (.getName f))
		first
		second))

--
可以给var添加类型提示：

(def a "image.png")
;= #'user/a

(java.io.File. a)
; Reflection warning, NO_SOURCE_PATH:1 - call to java.io.File ctor can't be resolved.
;= #<File image.png>

(def ^String a "image.png")
;= #'user/a

(java.io.File. a)
;= #<File image.png>

=========
14，处理异常

异常处理的目的:
(1) 包装检查异常；
(2) 使用finally块清理非内存资源如文件或网络句柄；
(3) 响应问题：忽略异常，重新操作，转换异常为非异常结果。

(try expr* catch-clause* finally-clause?)
; catch-clause -> (catch classname name expr*)
; finally-clause -> (finally expr*)

在Clojure中，检查异常不是必须的，如果不处理则直接忽略异常。

----
响应异常

最常见的情况是在catch块中响应异常。

示例：验证类是否可以找到。

(defn class-available? [class-name]
   (try
      (Class/forName class-name) true
      (catch ClassNotFoundException _ false)))

如果类找不到，则抛出ClassNotFoundException异常，返回false。

----
抛出异常

(throw (IllegalStateException. "I don't know what to do!"))

=========
15，资源清理

如果需要释放的资源有close方法，则可以使用with-open宏：
(with-open [name init-form] & body)

Clojure内部，with-open创建一个try块，将init-form的结果赋给name，
然后运行body，最后在finally块中释放绑定到name的资源。

(defn spit [f content]
  (with-open [#^PrintWriter w (writer f)]
    (.print w content)))

(spit "hello.out" "hello, world")

--
(require '[clojure.java.io :as io])

(defn append-to
  [f text]
  (with-open [w (io/writer f :append true)]
    (doto w (.write text) .flush)))

--
(defn copy-files
  [from to]
  (with-open [in (FileInputStream. from)
              out (FileOutputStream. to)]
    (loop [buf (make-array Byte/TYPE 1024)]
      (let [len (.read in buf)]
        (when (pos? len)
          (.write out buf 0 len)
          (recur buf))))))

========
16，
在Clojure中，可以使用代理来扩展一个类：
(proxy class-and-interfaces super-cons-args & fns)

代理就是java中的匿名内部类。
proxy创建了代理类的一个实例。

proxy机制是完全通用的，可以用在任意Java对象。

user=> (.start (Thread.
              (proxy [Runnable] [] (run [] (println "I ran!")))))
user=> I ran!

在Java中必须实现接口的所有方法，但在Clojure中不必如此。

user=> (proxy [Callable] [])
#<Object$Callable clojure.proxy.java.lang.Object$Callable@11e0c13>

如果忽略方法实现，Clojure将提供一个默认实现，该实现抛出异常UnsupportedOperationException。

============
《clojure编程》第9章：java及jvm互操作-The JVM Is Clojure’s Foundation

clojure以jvm为基础：

字符串就是java String。
nil就是java的null。
数字就是java的数字。
正则表达式是java.util.regex.Pattern的实例。
映射实现了java.util.Map接口，向量、序列、列表实现了java.util.List接口，集合实现了java.util.Set接口。
函数都实现了java.lang.Runnable和java.util.concurrent.Callable接口。
函数就是java方法。
函数编译成类里的方法。
defrecord和 deftype编译成java类里的字段。
defprotocol生成java接口。

==========
《clojure编程》第11章：数字和数学-Use Primitive Arrays Judiciously（优化数值效率）

使用原始类型数组。

1，只要可变对象只在函数内使用，这是可取的，不违背clojure的。

2，p446，《Multidimensional  concerns.》
访问多维数组的性能问题。

(def arr (make-array Double/TYPE 1000 1000))
;= #'user/arr

(time (dotimes [i 1000]
	(dotimes [j 1000]
		(aset arr i j 1.0)
		(aget arr i j))))
; "Elapsed time: 50802.798 msecs"

这是aget和aset不支持直接访问多维数组。
因为中间层是对象数组，它们通过递归使用apply来支持多维操作、获取或设置多维数组的每一层。
因为aset不为n维数组提供直接的函数变体，在使用apply传播到其它参数时，1.0被装箱。
因为没有办法提示arr是一个原始类型数组，所以所有操作都是靠反射。

解决办法是通过手工展开中间层，加上必要的类型提示，如下：

(time (dotimes [i 1000]
	(dotimes [j 1000]
		(let [^doubles darr (aget ^objects arr i)]
			(aset darr j 1.0)
			(aget darr j)))))
; "Elapsed time: 21.543 msecs"
;= nil

如上，提示最终类型是double数组，中间层是Object数组。

但维数增加，代码会迅速复杂，可自定义宏来解决这个问题。

(defmacro deep-aget
	"Gets a value from a multidimensional array as if via `aget`,
	but with automatic application of appropriate type hints to
	each step in the array traversal as guided by the hint added
	to the source array.
	e.g. (deep-aget ^doubles arr i j)"

	([array idx]
		`(aget ~array ~idx)) 
	([array idx & idxs]
		(let [a-sym (gensym "a")]
			`(let [~a-sym (aget ~(vary-meta array assoc :tag 'objects) ~idx)] 
				(deep-aget ~(with-meta a-sym {:tag (-> array meta :tag)}) ~@idxs)))))

--
(defmacro deep-aset
	"Sets a value in a multidimensional array as if via `aset`,
	but with automatic application of appropriate type hints to
	each step in the array traversal as guided by the hint added
	to the target array.
	e.g. (deep-aset ^doubles arr i j 1.0)"
	[array & idxsv]
	(let [hints '{booleans boolean, bytes byte 
		chars char, longs long
		ints int, shorts short
		doubles double, floats float}

		hint (-> array meta :tag)
		[v idx & sxdi] (reverse idxsv)
		idxs (reverse sxdi)
		v (if-let [h (hints hint)] (list h v) v)

		nested-array (if (seq idxs)
			`(deep-aget ~(vary-meta array assoc :tag 'objects) ~@idxs)
			array)

		a-sym (gensym "a")]

		`(let [~a-sym ~nested-array]
			(aset ~(with-meta a-sym {:tag hint}) ~idx ~v))))

使用示例：
(time (dotimes [i 1000]
	(dotimes [j 1000]
		(deep-aset ^doubles arr i j 1.0)
		(deep-aget ^doubles arr i j))))
; "Elapsed time: 25.033 msecs"

--
(macroexpand-1 '(deep-aset ^doubles arr 2 3 1.0))
;(clojure.core/let [a1335 (user/deep-aget arr 2)] (clojure.core/aset a1335 3 (double 1.0)))

(def arr (make-array Double/TYPE 100 100 100))
(macroexpand-1 '(deep-aset ^doubles arr 2 3 4 1.0))
;(clojure.core/let [a1366 (user/deep-aget arr 2 3)] (clojure.core/aset a1366 4 (double 1.0)))

(macroexpand `(deep-aset ^doubles arr 2 3 4 1.0))
;(let* [a1376 (user/deep-aget user/arr 2 3)] (clojure.core/aset a1376 4 1.0))

（hxzon：macroexpand没有继续展开deep-aget？）

--
hxzon代码注释：

(defmacro deep-aget
	"Gets a value from a multidimensional array as if via `aget`,
	but with automatic application of appropriate type hints to
	each step in the array traversal as guided by the hint added
	to the source array.
	e.g. (deep-aget ^doubles arr i j)"

	([array idx]
		`(aget ~array ~idx)) 
对于一维数组，直接使用aget。这里假设array已经合理的提示了类型。

	([array idx & idxs]
		(let [a-sym (gensym "a")]
			`(let [~a-sym (aget ~(vary-meta array assoc :tag 'objects) ~idx)] 
				(deep-aget ~(with-meta a-sym {:tag (-> array meta :tag)}) ~@idxs)))))
对于多维数组，首先生成一个名字a-sym，它表示下一层数组。
~(vary-meta array assoc :tag 'objects)，给array添加object类型提示。
~(with-meta a-sym {:tag (-> array meta :tag)})，给下一层数组添加array所带的类型提示。

--
(defmacro deep-aset
	"Sets a value in a multidimensional array as if via `aset`,
	but with automatic application of appropriate type hints to
	each step in the array traversal as guided by the hint added
	to the target array.
	e.g. (deep-aset ^doubles arr i j 1.0)"
	[array & idxsv]
解构成“数组（带类型提示）”及“下标和值”两部分。

	(let [hints '{booleans boolean, bytes byte 
		chars char, longs long
		ints int, shorts short
		doubles double, floats float}

		hint (-> array meta :tag)
hint为array带的类型提示。

		[v idx & sxdi] (reverse idxsv)
反转“下标和值”，取得值v，和最底层下标idx。

		idxs (reverse sxdi)
恢复中间层的下标。

		v (if-let [h (hints hint)] (list h v) v)
if-let宏接受两个参数，第一个参数为绑定变量，第二个参数为表达式。
并根据第二个表达式参数返回的值确定执行then、else语句。
(hints hint)，返回hint对应的强制转换函数，如果找到，绑定到h，if-let返回(list h v)，否则返回v。

		nested-array (if (seq idxs)
			`(deep-aget ~(vary-meta array assoc :tag 'objects) ~@idxs)
			array)
如果中间层下标不只一个，用deep-aget取得最底一层数组，否则直接返回array（已经是最底一层数组）。

		a-sym (gensym "a")]

		`(let [~a-sym ~nested-array]
			(aset ~(with-meta a-sym {:tag hint}) ~idx ~v))))

参考资料：
Programming Clojure学习笔记——与Java一起工作
http://blog.csdn.net/zh2qiang/article/details/7080485
