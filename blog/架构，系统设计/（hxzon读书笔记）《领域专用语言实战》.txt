（hxzon读书笔记）《领域专用语言实战》

by hxzon
=========
（2013.11.16）

《第1部分，领域专用语言入门》
《第1章，初始DSL》
《第2章，现实中的DSL》

《2.2.3，执行Groovy DSL》

《第3章，DSL驱动的应用程序开发》
本章主要内容：
-1，DSL集成问题，
-2，处理错误和异常（友好明确的提示），
-3，性能（性能不该优先考虑）。

----
内部DSL的集成方式（表3-2）：
-1，通过java 6的脚本引擎，备用选择。
-2，通过DSL包装器集成，例如scala包装器。
-3，语言特有的集成功能，优先考虑，例如groovy类加载。
-4，基于spring的集成。

----
外部DSL集成模式（表3-3）：
-1，上下文驱动的字符串操控（正则表达式，动态代码解释等）。
-2，xml转换成可使用的资源。
-3，非文本表示，转化成AST（抽象语法树）。
-4，dsl中内嵌异质代码。
-5，基于解析器组合子的dsl设计（scala的解析器组合子库）。

================
《第2部分，实现DSL》
《第4章，内部DSL实现模式》
-1，内嵌式dsl：
--1，元编程：隐式上下文（ruby和groovy），灵巧api（连贯接口），动态装饰器（ruby mixin），groovy builder。
--2，类型化抽象：利用scala的静态类型系统（利用编译器编译期检查，可节省大量判断代码）
（hxzon：可节省的只是类型判断代码，不如代码生成更灵活定制。）
-2，生成式dsl：
--3，运行时元编程：ruby代码生成
--4，编译时元编程：clojure宏（没有运行时开销）。

p80，ruby中的动态装饰器（类似scala trait的运行时混入，只混入某个对象。）


------------
《第5章，ruby，groovy，clojure语言中的内部dsl设计》
动态类型语言。
没有类型标注干扰，鸭子类型。
groovy.xml.MarkupBuilder

groovy category来控制元编程的作用域（比ruby猴子补丁的全局作用域更安全）。
groovy ExpandoMetaClass，在运行时向已有的类添加方法、属性、构造器以及静态方法。（类似ruby的猴子补丁。）

p129，clojure实现装饰器。

-----------
《第6章，scala语言中的内部dsl设计》
静态类型语言。

-----------
《第7章，外部dsl的实现载体》
本章内容：使用antlr和eclipse xtext来开发外部dsl。
（hxzon：使用“分析器组合子”更佳。）

外部dsl不会受宿主语言限制。

语法分析器生成器：
-1，yacc，使用lex词法分析器，生成c语言的语法分析器。
-2，bison，使用flex词法分析器，功能几乎和yacc+lex相同，生成c++语言的语法分析器。
-3，antlr，已含词法分析器，能生成java、c、c++、python、ruby等语言的语法分析器。
-4，Coco/R，自动生成词法扫描器，是一种编译器生成器。

----------
《第8章，用scala语法分析器组合子设计外部dsl》


===========
《第3部分，dsl开发的未来趋势》
《第9章，展望dsl设计得未来》

xml繁琐，表达高阶结构（如条件结构）的能力也有欠缺。
分析器组合子越来越流行。
新语言Newspeak拥有一个特别丰富的分析器组合子库，比scala分析器组合子能更好的解耦文法规则和语义模型。
F#，javascript，scheme都在发展自己的分析器组合子库。

----
dsl工作台

不受限文本，用户可与高层次结构直接互动。
分离了dsl界面的关注点和dsl实现的关注点。

----
dsl的成长和演化
-1，隐式上下文更能适应版本演化。
-2，用自动代换解决向后兼容。
-3，门面式dsl设计可以解决诸多版本化问题。
-4，遵从优秀抽象设计的各项原则（附录A）。


=========
附录A	 抽象在领域建模中的角色

A.1	设计得当的抽象应具备的特质
A.1.1	 极简
A.1.2	 精炼
A.1.3	扩展性和组合性

A.2	极简，只公开对外承诺的
A.2.1	 用泛化来保留演化余地
A.2.2	 用子类型化防止实现的泄露
A.2.3 正确实施实现继承

A.3 精炼，只保留自身需要的
A.3.1	 什么是非本质的
A.3.2 非本质复杂性
A.3.3 撇除杂质
A.3.4	 用DI隐藏实现细节

A.4 扩展性提供成长的空间
A.4.1	 什么是扩展性
A.4.2 mixin：满足扩展性的一种设计模式
A.4.3	 用mixin扩展Map
A.4.4	 函数式的扩展性
A.4.5 扩展性也可以临时抱佛脚

A.5 组合性，源自纯粹
A.5.1	 用设计模式满足组合性
A.5.2 回归语言
A.5.3	 副作用和组合性
A.5.4 组合性与并发

===========
《附录C Ruby语言的DSL相关特性》

《附录D Scala语言的DSL相关特性》

《附录E Groovy语言的DSL相关特性》


《附录F Clojure语言的DSL相关特性》


======
《附录B 元编程与DSL设计》（忽略。）
《附录G 多语言开发》（忽略。）
