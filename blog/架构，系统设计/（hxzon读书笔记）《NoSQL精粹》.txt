（hxzon读书笔记）《NoSQL精粹》

~ Pramod J. Sadalage (作者), Martin Fowler (作者), 爱飞翔 (译者) 
34.30 (7折)
=============
hxzon读书笔记：

2013-09-19至20，两天读完，，21复读。

1，
翻译还算用心，对不少名词做了灵活的处理，没有简单的直译。
153页纸，都是网上能够了解到的东西，没有任何深入的思考，作者本身也没有相关的实践经验，性价比极低。

----
2，
关系数据库优点：
权限控制（大部分nosql没有），
更改查询方式代价小（除非很多的join），
并发控制，
sql标准。

--
关系数据库缺点：
阻抗失谐（模型不一致），
不是基于分布式设计（查询，参照完整性，事务，一致性控制以分片的方式执行代价大甚至不可能？）。
需统一模式。
不能表达聚合。

--
nosql优点：
解决阻抗失谐，
聚合有可能利于分片？，
基于特定场景放弃事务、参照完整性，一致性。
方便模式修改，不必统一模式。
更改查询方式的代价大。

--
nosql缺点：
“无模式”其实仍有“隐含模式”，模式从数据库移到了应用中，有可能更不容易理解。
“无模式”数据库本身不能帮忙优化，优化由应用负责，也无法自行验证数据。
“无模式”的灵活性仅限于聚合内部，如果改动聚合边界，其数据迁移工作的代价和关系型是一样的。

----
3，
键值，文档，列族：面向聚合的数据模型。更改查询方式的代价大，一种聚合利于一种交互（查询），却不利于另一种交互（查询）。
图数据库：擅长复杂的关系。

----
4，第5章：一致性

CAP定理：一致性，可用性，分区耐受性（脑裂，网络分区）。

网络分区即集群中的节点彼此无法通信。

N：复制因子，3足够好。
写入仲裁：W>N/2
读取仲裁：R+W>N


----
5，第6章：版本戳

数组式版本戳：[a:1,b:2,c:3]，表示三个节点的数据版本。

----
6，
键值数据库：通过键来搜索，总是查出整个聚合，值由应用程序来解释，有些提供简单的结构（列表、集合）。
大部分精力花在键名设计上（利用键来查找，排序，基于键名来分片）。
适用于存放会话信息，用户配置信息，购物车数据。
基于键名来分片，如果该节点坏了，会丢失该节点保存的数据，也无法再插入该节点的数据。

--
文档数据库：可基于聚合中的字段来查询。
不适用查询一直变化的数据，因为聚合不断变动，最终会变成“最低级别的粒度”，那实际就演变成关系型了。

--
列族数据库：相当于“两级映射”“两级聚合结构”。
按列存储，列通过行健来拼成一行。
列族固定，列不固定。
瘦行：字段式的列。
宽行：列表式的列。
CQL查询语言。

--
图数据库：擅长复杂的关系，例如层级关系（关系型不擅长）。
适用于社交网络，推荐系统，安排运输路线、分派货物、基于位置的服务。
对图数据库分片较难，因为不是面向聚合，而是面向关系。
没有简单的操作能一次性更新图的所有节点或边的属性。

进化关系：键值-》文档-》列族

7，
将数据库封装为服务。
目前最佳的选择仍然是关系型数据库。

=============
目　　录

译者序
前言

第一部分　概 念

第1章　为什么使用NoSQL 2
第2章　聚合数据模型 15
第3章　数据模型详解 27
第4章　分布式模型 40
第5章　一致性 49
第6章　版本戳 65
第7章　映射-化简 71

第二部分　实 现
第8章　键值数据库 84
第9章　文档数据库 92
第10章　列族数据库 102
第11章　图数据库 113
第12章　模式迁移 124
第13章　混合持久化 134
第14章　超越NoSQL 141
第15章　选择合适的数据库 148

参考资料 154

============
目　　录

译者序
前言

第一部分　概 念

第1章　为什么使用NoSQL 2

1.1　关系型数据库的价值 3
1.1.1　获取持久化数据 3
1.1.2　并发 3
1.1.3　集成 4
1.1.4　近乎标准的模型 4
1.2　阻抗失谐 4
1.3　“应用程序数据库”与“集成数据库” 6
1.4　蜂拥而来的集群 8
1.5　NoSQL登场 9
1.6　要点 13

第2章　聚合数据模型 15

2.1　聚合 16
2.1.1　关系模型与聚合模型示例 16
2.1.2　面向聚合的影响 20
2.2　键值数据模型与文档数据模型 22
2.3　列族存储 23
2.4　面向聚合数据库总结 25
2.5　延伸阅读 26
2.6　要点 26

第3章　数据模型详解 27

3.1　关系 28
3.2　图数据库 29
3.3　无模式数据库 31
3.4　物化视图 33
3.5　构建数据存取模型 34
3.6　要点 39

第4章　分布式模型 40

4.1　单一服务器 41
4.2　分片 41
4.3　主从复制 43
4.4　对等复制 45
4.5　结合“分片”与“复制”技术 47
4.6　要点 48

第5章　一致性 49

5.1　更新一致性 50
5.2　读取一致性 51
5.3　放宽“一致性”约束 55
5.4　放宽“持久性”约束 60
5.5　仲裁 62
5.6　延伸阅读 63
5.7　要点 64

第6章　版本戳 65

6.1　“商业事务”与“系统事务” 66
6.2　在多节点环境中生成版本戳 68
6.3　要点 70

第7章　映射-化简 71

7.1　基本“映射-化简” 72
7.2　分区与归并 73
7.3　组合“映射-化简”计算 76
7.3.1　举例说明两阶段“映射-化简” 77
7.3.2　增量式“映射-化简” 80
7.4　延伸阅读 81
7.5　要点 81


第二部分　实 现

第8章　键值数据库 84

8.1　何谓“键值数据库” 85
8.2　键值数据库特性 86
8.2.1　一致性 86
8.2.2　事务 87
8.2.3　查询功能 87
8.2.4　数据结构 89
8.2.5　可扩展性 89
8.3　适用案例 90
8.3.1　存放会话信息 90
8.3.2　用户配置信息 90
8.3.3　购物车数据 90
8.4　不适用场合 90
8.4.1　数据间关系 90
8.4.2　含有多项操作的事务 91
8.4.3　查询数据 91
8.4.4　操作关键字集合 91

第9章　文档数据库 92

9.1　何谓文档数据库 93
9.2　特性 94
9.2.1　一致性 94
9.2.2　事务 95
9.2.3　可用性 96
9.2.4　查询功能 97
9.2.5　可扩展性 99
9.3　适用案例 100
9.3.1　事件记录 100
9.3.2　内容管理系统及博客平台 101
9.3.3　网站分析与实时分析 101
9.3.4　电子商务应用程序 101
9.4　不适用场合 101
9.4.1　包含多项操作的复杂事务 101
9.4.2　查询持续变化的聚合结构 101

第10章　列族数据库 102

10.1　何谓列族数据库 103
10.2　特性 103
10.2.1　一致性 105
10.2.2　事务 107
10.2.3　可用性 107
10.2.4　查询功能 108
10.2.5　可扩展性 110
10.3　适用案例 110
10.3.1　事件记录 110
10.3.2　内容管理系统与博客平台 111
10.3.3　计数器 111
10.3.4　限期使用 111
10.4　不适用场合 112

第11章　图数据库 113

11.1　何谓图数据库 114
11.2　特性 115
11.2.1　一致性 116
11.2.2　事务 117
11.2.3　可用性 117
11.2.4　查询功能 118
11.2.5　可扩展性 121
11.3　适用案例 122
11.3.1　互联数据 122
11.3.2　安排运输路线、分派货物和基于位置的服务 123
11.3.3　推荐引擎 123
11.4　不适用场合 123

第12章　模式迁移 124

12.1　模式变更 125
12.2　变更关系型数据库的模式 125
12.2.1　迁移全新项目 126
12.2.2　迁移既有项目 127
12.3　变更NoSQL数据库的模式 129
12.3.1　增量迁移 131
12.3.2　迁移图数据库的模式 132
12.3.3　改变聚合结构 132
12.4　延伸阅读 133
12.5　要点 133

第13章　混合持久化 134

13.1　各异的数据存储需求 135
13.2　混用各类数据库 135
13.3　将直接数据库操作封装为服务 137
13.4　扩展数据库以增强其功能 138
13.5　选用合适的数据库技术 139
13.6　企业使用混合持久化技术时的考量 139
13.7　部署复杂度 140
13.8　要点 140

第14章　超越NoSQL 141

14.1　文件系统 142
14.2　事件溯源 142
14.3　内存映像 145
14.4　版本控制 146
14.5　XML数据库 146
14.6　对象数据库 147
14.7　要点 147

第15章　选择合适的数据库 148

15.1　程序员的工作效率 149
15.2　数据访问性能 150
15.3　继续沿用默认的关系型数据库 151
15.4　抽离数据库策略以降低风险 152
15.5　要点 153
15.6　结语 153

参考资料 154

