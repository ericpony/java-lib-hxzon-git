（hxzon读书笔记）《clojure编程》第4章：多线程和并发-atom

by hxzon
=====
1，clojure中有4种引用类型可以用来 表达标识：var，ref，agent和atom。

对引用类型解引用，绝对不会阻塞，也绝不会跟其它操作相互干扰。
这点和delay，future，promise形成鲜明对比。

引用类型除了可以解引用，还可以添加元数据。
但是跟普通值不同，不能使用with-meta或者vary-meta，
对引用类型必须使用alter-meta! ，它会直接修改引用类型的元数据（而不是返回一个新的引用类型）。
atom，ref，agent都接受一个额外的:meta关键字参数，用来设置元数据。


对引用类型可以指定“观察器”，在引用类型状态发生变化时会调用观察器函数，
但不保证值真的变化。

对引用类型还可以指定“校验器”，如果引用类型的新值让校验器函数返回非真，会阻止新值。

2，并发操作的分类

根据同步，非同步，协调，非协调，会产生4种组合。
ref是协调的，同步的。
atom是独立的（所以不需协调），同步的。
agent是不协调的，异步的。

var的主要用途则是线程内对于状态的修改。

clojure的兴趣是解决进城内的并发和并行问题，
所以没有提供协调的、异步的引用类型。
这种类型在分布式系统里面更常见，
例如最终一致性数据库，只保证一段时间后，所有对于状态的修改会合并到最终状态中。

========
3，atom

