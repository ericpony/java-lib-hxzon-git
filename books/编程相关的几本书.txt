编程相关的几本书

一、lisp

1，《黑客与画家》
硅谷创业之父Paul Graham的文集。
很早之前便在网上零零散散的读到这本书的片段，但并不知道是出自这本书。
每一篇文章都很让人振奋，我甚至忍不住选了其中几篇发给妹妹。

2，《实用Common Lisp编程》
第16届Jolt生产效率大奖得主。
和多数人一样，Paul Graham在文集中对编程语言，对lisp及Viaweb的描述让我忍不住一定要学一学lisp，于是买了这本书。
正如Paul Graham所说，学习lisp，即便你不用它编程，也会改变你对编程语言的看法，确实如此。
“Fortran和lisp先后诞生，代表了语言设计的两种不同方向。
Fortran一开始就是最为编程语言设计出来的，以硬件架构为基础。
而Lisp则是无意中从纯理论发展为编程语言的，以数学为基础。
硬件架构会过时，但数学是不会过时的。
Lisp语言诞生的时候就包含了9种新思想，随着时间的发展，这些思想才慢慢被加入到其它语言中。”
因为我之前也了解过ruby，scala这样的新兴语言，所以不少东西其实已经见怪不怪，不觉新鲜。

不过我觉得最无敌的一件事是lisp没有语法（或者说只有一种语法：S表达式），
因为没有语法，所以我们不必浪费时间在语法分析上，我们写出来的代码就是程序本身的结构，程序本身就是数据，所以我们可以很容易的用代码来生成代码。
生成代码是编程最通用的解决方案，这是我目前的见解。

作为第二古老的语言，lisp始终未过时，却也始终没成为主流，clojure是最新兴起的jvm上的lisp，希望它能带来奇迹。

3，《计算机程序的构造和解释》
外国人本科的第一门课教材，对比一下就知道中国和外国教育的巨大差距。
用scheme来讲解什么是计算机程序，scheme是lisp的一种方言，被誉为“编程语言中的皇后”。
我只是简单的翻过了前3章，并再次感受lisp的美，当我看到书中用过程来表达点对，过程和数据的界限再次变得模糊时。

4，顺便推荐一个博客，王垠的，王垠是研究程序语言的。我也是最近才发现这个博客，读完了他在新浪博客上的所有文章，很吸引人，可惜删了不少。


二、
1，《松本行弘的程序世界》
松本行弘是ruby的创建者。
约大三的时候，ruby/rails突然火起来。那时候我还没有认识perl，python，所以ruby的一切都很新鲜。
ruby就是要让程序员快乐的编程，这是我很喜欢的一句话。
当这本书出版的时候，便迫不及待的买了一本，想了解一下松本行弘对程序语言设计的看法。
不过没发现特别兴奋之处。
但这本书还是改变了我的一个想法。
原来我一直觉得鸭子类型不是很安全，看了这本书（但其实go的说服力更大点），有点改观。

2，《Joel谈优秀软件开发方法》
同样是一本让人振奋，收益匪浅的文集。
原先也在网上看过一些片段，比如抨击java的那一篇。
后来在公司橱柜里见到这本书，便拿来读了。


3，《Scala程序设计：Java虚拟机多核编程实战》
约前两年，scala突然火起来，并被吹嘘为java的替代者，于是便赶紧买了一本，想要一窥究竟。
当时确实对scala很着迷，着迷到甚至希望spring、tapestry都有scala的版本。
scala的一个特色，就是“向后不兼容”，我当时（现在也是）蛮支持这种“向后不兼容”，不好的东西就该及时丢掉，趁现在还没定型。
我现在不对scala感冒，主要是两点，一是scala拥有越来越多的魔法，二是复杂的类型系统。
王垠描述haskell的文件系统是致命错误，我怀疑scala也会有这个问题。

4，《C++演化和设计》《C++沉思录》
我一直让自己避免接触C++，有许多原因，其中一个是C++的使用太复杂，学习它得不偿失。
但我还是买了这两本书，看了一些，没看完。
主要是想了解C++的设计思想。
C++这么设计，因为它一直在强调两点，“与C兼容”，“性能”。
当然，还有许多语义歧义，工程上的考虑。
虽然如此，我还是不能接受，为性能而增加的这许多不一致性。

5，《About Face 3交互设计精髓》
大学时读了这本书的第2版，然后买了这本书的第3版。
我很喜欢的一本书。

6，《重构：改善既有代码的设计》
在网上就看过这本书，许多内容我都很熟悉，因为我自己对编程设了5个方向，其中之一就是写漂亮的代码。
但我还是专门买了一本，想时刻提醒自己：写“好”代码。

7，《SQL反模式》
对数据库常见设计问题的思考和总结。
这些问题我也是一直在思考的，结果发现，书里不少结论和我相反。
可能是我后来受了一点NoSql的影响。

8，《UNIX编程艺术》
了解UNIX的编程思想。UNIX有许多设计哲学，其中一条是使用文本。
文本有许多好处，例如是人可读的。但我一直很怀疑这一点，因为文本没有结构（效率低下我还能忍受）。
王垠刚好也在一篇文章上指出这一点，呵呵。


9，《Java并发编程实战》
我一直认为，代码首先是正确，其次是漂亮，最后才是性能。
这本书教我们如何并发编程。
在上一家公司，我和同事用swing写客户端，程序里有很多地方用多线程。
我“逃亡”的一个原因，就是明知是错误，却无能为力。

10，《编程珠玑（英文版）》《编程之美》《MySQL技术内幕InnoDB存储引擎》
无意中我发现我一直在关注算法类的书。
可能是缺什么补什么吧。
像我这样的智商，基本就该告别编程这一行，但我还是在挣扎，看究竟能游多远。
大学的课程，我挺喜欢离散数学、编译原理、操作系统，我都是把它们当算法书来看的。
你也看到了，《MySQL技术内幕InnoDB存储引擎》也被我当数据结构和算法书了。
在很早，我就发现了自己的能力和局限，
我能看懂一些东西，却不知道如何使用变通，这就是为什么我承认我不聪明。


三、web
1，《JavaScript Web Applications》
英文。主要讲如何设计一个js mvc框架，受益匪浅。

2，《designing with progressive enhancement(building the web that works for everyone)》
英文。主要讲如何设计组件。
我为上一家公司写了一个内部使用的物料管理网站，因为很简单，先后用了jquery ui和EasyUI，
其实网站很简单，用到的组件不多，所以当我不想引入这两个框架时，就借鉴了这本书里的设计，写了最简单的树、盘。
这本书的一个主要思想是渐进增强，即先为所有的浏览器设计，保证最低级的浏览器也能正常使用。
然后再为高级浏览器增强。
早先我觉得兼容多种浏览器是一件很有趣的事，觉得是自己的一种能力。
不过后来，我改变了想法，我希望鼓励别人去使用更好更快更少bug的浏览器，
我倾向于先为遵循标准的浏览器设计，再去适应ie6等。

3，《Pro HTML5 and CSS3 Design Patterns》
英文。
我一直以为css的盒模型就是那么简单的一回事，直到看到这本书。
我还真没想到css也有“多态”的概念。

4，《JavaScript高级程序设计(第2版)》
我想很多人都不会专门买书学习js，我也是。尤其是有了jQuery后，更加觉得不必学习js了。
和多数人一样，我也是看不起js的，当jQuery出现，用起来就像另一门语言时，我看到了js简陋设计背后意外的灵活。
随着html5，js5的兴起，是时候好好学习js基础了，例如使用===来做比较。
当我这么要求我的伙伴时，他们说，还是第一次见到用三个等号的。
这本书已经出第3版了。



