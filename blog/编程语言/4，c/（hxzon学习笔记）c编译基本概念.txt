（hxzon学习笔记）c编译基本概念

by hxzon
=====
1，编译c程序分几个阶段

《C语言程序设计：现代方法（第2版）》第15章-编写大型程序
p280

预处理：处理宏，生成最终的源文件。
编译：将源文件编译成目标文件，在Windows下为.obj文件，在Linux下为.o文件。
链接：将目标文件和库函数的代码结合在一起，生成可执行程序。

链接器的一个职责，是要解决编译器遗留的外部引用问题，
外部引用发生在一个文件中的函数，调用另一个文件中定义的函数，或者访问另一个文件中定义的变量时。

在c语言中，编译和链接是完全独立的。
头文件的存在是为了给编译器而不是连接器提供信息。
如果希望调用文件foo.c中的函数，就需要确保对foo.c进行编译，
还要确保连接器知道必须在foo.c的目标文件中搜索该函数。

=====
2，常见文件后缀

.a文件，是好多个.o合在一起，用于静态连接 ，即STATIC mode，多个.a可以链接生成一个exe的可执行文件。

.lib文件，静态链接库

.dll文件，动态链接库

.so文件，是shared object，用于动态连接的，
和windows的dll差不多，使用时才载入。

.lo文件，使用libtool编译出的目标文件，
其实就是在o文件中添加了一些信息。

.la文件，使用libtool编译出的库文件，其实是个文本文件，记录同名动态库和静态库的相关信息（配置信息）。

.def文件，模块定义文件为链接器提供有关被链接程序的导出、特性及其他方面的信息。 
生成 DLL 时，.def 文件最有用。 由于存在可代替模块定义语句使用的链接器选项，通常不需要 .def 文件。 
也可以将 __declspec(dllexport) 用作指定导出函数的手段。
在链接器阶段可以使用 /DEF（指定模块定义文件）链接器选项调用 .def 文件。
如果生成的 .exe 文件没有导出，使用 .def 文件将使输出文件较大并降低加载速度。

.ko文件，是Linux 2.6内核使用的动态连接文件的后缀名，
也就是模块文件，用来在Linux系统启动时加载内核模块

dll和exe都是PE文件，所以可以使用pexports 。
lib和a是静态库文件，都是归档类型，不是pe格式。
dll可以使用dlltool 。
lib可以使用lib，和reimp工具。
所有的bin文件，包括dll，exe，lib，a都可以使用dumpbin 。

----
什么是lib文件，lib和dll的关系如何

(1)lib是编译时需要的，dll是运行时需要的。 
如果要完成源代码的编译，有lib就够了。 
如果要使动态连接的程序运行起来，有dll就够了。 
在开发和调试阶段，当然最好都有。 

(2)一般的动态库程序有lib文件和dll文件。
lib文件是必须在编译期就连接到应用程序中的，
而dll文件是运行期才会被调用的。
如果有dll文件，那么对应的lib文件一般是一些索引信息，具体的实现在dll文件中。
如果只有lib文件，那么这个lib文件是静态编译出来的，
索引和实现都在其中。
静态编译的lib文件有好处：给用户安装时就不需要再挂动态库了。
但也有缺点，就是导致应用程序比较大，
而且失去了动态库的灵活性，
在版本升级时，同时要发布新的应用程序才行。 

(3)在动态库的情况下，有两个文件，
一个是引入库（.LIB）文件，一个是DLL文件，
引入库文件包含被DLL导出的函数的名称和位置，
DLL包含实际的函数和数据，应用程序使用LIB文件链接到所需要使用的DLL文件，
库中的函数和数据并不复制到可执行文件中，
因此在应用程序的可执行文件中，存放的不是被调用的函数代码，
而是DLL中所要调用的函数的内存地址，
这样当一个或多个应用程序运行是再把程序代码和被调用的函数代码链接起来，从而节省了内存资源。

从上面的说明可以看出，DLL和.LIB文件必须随应用程序一起发行，
否则应用程序将会产生错误。

.dll还有其他的文件格式如.ocx等，所有的.dll文件都是可执行。


====
3，常见工具

make

automake

CMake

gcc

llvm

minGW

cygwin

====
4，

