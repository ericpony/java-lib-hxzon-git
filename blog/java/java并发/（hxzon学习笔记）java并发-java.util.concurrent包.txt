（hxzon学习笔记）java并发-java.util.concurrent包

by hxzon
==========
http://docs.oracle.com/javase/7/docs/api/

Utility classes commonly useful in concurrent programming.
See: Description

----
接口

BlockingDeque<E>	
A Deque that additionally supports blocking operations that wait for the deque to become non-empty when retrieving an element, 
and wait for space to become available in the deque when storing an element.

阻塞双向队列，在“没有空间可插入”，及“没有元素可取出”时阻塞。

BlockingQueue<E>	
A Queue that additionally supports operations that wait for the queue to become non-empty when retrieving an element, 
and wait for space to become available in the queue when storing an element.

阻塞队列，在“没有空间可插入”，及“没有元素可取出”时阻塞。

Callable<V>	
A task that returns a result and may throw an exception.

带返回值的运行任务。

CompletionService<V>	
A service that decouples the production of new asynchronous tasks from the consumption of the results of completed tasks.
（consumption，消费。）


ConcurrentMap<K,V>	
A Map providing additional atomic putIfAbsent, remove, and replace methods.

并发映射。

ConcurrentNavigableMap<K,V>	
A ConcurrentMap supporting NavigableMap operations, and recursively so for its navigable sub-maps.

并发的可导航的映射。
可导航的映射指键是有序的，所以可以获得最大键、最小键，及指定键范围的子映射。

Delayed	
A mix-in style interface for marking objects that should be acted upon after a given delay.

延迟元素（可能处于未激活状态），接口，用来标记一个对象需在一定延迟后执行。

Executor	
An object that executes submitted Runnable tasks.

任务执行器。

ExecutorService	
An Executor that provides methods to manage termination and methods that can produce a Future for tracking progress of one or more asynchronous tasks.

执行器服务，更多的异步任务功能。

ForkJoinPool.ForkJoinWorkerThreadFactory	
Factory for creating new ForkJoinWorkerThreads.

创建ForkJoin工作线程的工厂。

ForkJoinPool.ManagedBlocker	
Interface for extending managed parallelism for tasks running in ForkJoinPools.
（parallelism，排比。）

Future<V>	
A Future represents the result of an asynchronous computation.

异步计算结果的代理。

RejectedExecutionHandler	
A handler for tasks that cannot be executed by a ThreadPoolExecutor.

任务被拒绝时的处理器。

RunnableFuture<V>	
A Future that is Runnable.



RunnableScheduledFuture<V>	
A ScheduledFuture that is Runnable.

可调度的

ScheduledExecutorService	
An ExecutorService that can schedule commands to run after a given delay, or to execute periodically.

可调度的任务执行器（延迟或定期）。

ScheduledFuture<V>	
A delayed result-bearing action that can be cancelled.



ThreadFactory	
An object that creates new threads on demand.

线程工厂。


TransferQueue<E>	
A BlockingQueue in which producers may wait for consumers to receive elements.

传输队列，一种阻塞队列，生产者等待直到消费者取走元素。

----
类

AbstractExecutorService	
Provides default implementations of ExecutorService execution methods.

任务执行器的实现父类。

ArrayBlockingQueue<E>	
A bounded blocking queue backed by an array.

基于数组的阻塞队列，固定大小。

ConcurrentHashMap<K,V>	
A hash table supporting full concurrency of retrievals and adjustable expected concurrency for updates.

并发的哈希映射（不能并发更新）。

ConcurrentLinkedDeque<E>	
An unbounded concurrent deque based on linked nodes.

基于链表的并发双向队列，可扩展大小。

ConcurrentLinkedQueue<E>	
An unbounded thread-safe queue based on linked nodes.

基于链表的并发双向队列，线程安全，可扩展大小。

ConcurrentSkipListMap<K,V>	
A scalable concurrent ConcurrentNavigableMap implementation.

可伸缩，并发的可导航的映射。

ConcurrentSkipListSet<E>	
A scalable concurrent NavigableSet implementation based on a ConcurrentSkipListMap.

可伸缩，并发的可导航的集合。

CopyOnWriteArrayList<E>	
A thread-safe variant of ArrayList in which all mutative operations (add, set, and so on) are implemented by making a fresh copy of the underlying array.

“写时复制”的，基于数组的列表。

CopyOnWriteArraySet<E>	
A Set that uses an internal CopyOnWriteArrayList for all of its operations.

“写时复制”的，基于数组的集合。

CountDownLatch	
A synchronization aid that allows one or more threads to wait until a set of operations being performed in other threads completes.

同步工具，

CyclicBarrier	
A synchronization aid that allows a set of threads to all wait for each other to reach a common barrier point.

同步工具，让一组线程在某个点上互相等待。

DelayQueue<E extends Delayed>	
An unbounded blocking queue of Delayed elements, in which an element can only be taken when its delay has expired.

延迟队列。只操作激活元素，未激活的元素师不可见的。

Exchanger<V>	
A synchronization point at which threads can pair and swap elements within pairs.

同步工具，让两个线程相互交换数据。

ExecutorCompletionService<V>	
A CompletionService that uses a supplied Executor to execute tasks.



Executors	
Factory and utility methods for Executor, ExecutorService, ScheduledExecutorService, ThreadFactory, and Callable classes defined in this package.

创建执行器的工厂。

ForkJoinPool	
An ExecutorService for running ForkJoinTasks.

执行forkJoin任务的执行器。

ForkJoinTask<V>	
Abstract base class for tasks that run within a ForkJoinPool.

forkJoin任务。

ForkJoinWorkerThread	
A thread managed by a ForkJoinPool, which executes ForkJoinTasks.

执行forkJoin任务的线程。

FutureTask<V>	
A cancellable asynchronous computation.

可取消的，异步执行任务。

LinkedBlockingDeque<E>	
An optionally-bounded blocking deque based on linked nodes.

基于链表的阻塞双向队列。

LinkedBlockingQueue<E>	
An optionally-bounded blocking queue based on linked nodes.

基于链表的阻塞队列。

LinkedTransferQueue<E>	
An unbounded TransferQueue based on linked nodes.

基于链表的“工作窃取”队列。

Phaser	
A reusable synchronization barrier, similar in functionality to CyclicBarrier and CountDownLatch but supporting more flexible usage.

移相器，可复用的同步工具。

PriorityBlockingQueue<E>	
An unbounded blocking queue that uses the same ordering rules as class PriorityQueue and supplies blocking retrieval operations.

优先级阻塞队列，头部有序。

RecursiveAction	
A recursive resultless ForkJoinTask.

无结果的，递归的forkJoin任务。

RecursiveTask<V>	
A recursive result-bearing ForkJoinTask.

有返回值的，递归的forkJoin任务。

ScheduledThreadPoolExecutor	
A ThreadPoolExecutor that can additionally schedule commands to run after a given delay, or to execute periodically.

基于线程池的，调度执行的任务执行器。

Semaphore	
A counting semaphore.

计数信号量。

SynchronousQueue<E>	
A blocking queue in which each insert operation must wait for a corresponding remove operation by another thread, and vice versa.

阻塞队列，插入元素需等待另一个线程取出元素，取出元素需等待另一个线程插入元素。

ThreadLocalRandom	
A random number generator isolated to the current thread.

线程本地的随机数生成器。

ThreadPoolExecutor	
An ExecutorService that executes each submitted task using one of possibly several pooled threads, normally configured using Executors factory methods.

基于线程池的任务执行器。

ThreadPoolExecutor.AbortPolicy	
A handler for rejected tasks that throws a RejectedExecutionException.

任务被拒绝时的处理器，抛出被拒绝异常。

ThreadPoolExecutor.CallerRunsPolicy	
A handler for rejected tasks that runs the rejected task directly in the calling thread of the execute method, unless the executor has been shut down, in which case the task is discarded.

任务被拒绝时的处理器，改为在调用线程执行。

ThreadPoolExecutor.DiscardOldestPolicy	
A handler for rejected tasks that discards the oldest unhandled request and then retries execute, unless the executor is shut down, in which case the task is discarded.

任务被拒绝时的处理器，抛弃最老的任务。

ThreadPoolExecutor.DiscardPolicy	
A handler for rejected tasks that silently discards the rejected task.

任务被拒绝时的处理器，抛弃被拒绝的任务。

----
枚举

TimeUnit	
A TimeUnit represents time durations at a given unit of granularity and provides utility methods to convert across units, and to perform timing and delay operations in these units.

时间单位。

----
异常

BrokenBarrierException	
Exception thrown when a thread tries to wait upon a barrier that is in a broken state, or which enters the broken state while the thread is waiting.

CancellationException	
Exception indicating that the result of a value-producing task, such as a FutureTask, cannot be retrieved because the task was cancelled.

ExecutionException	
Exception thrown when attempting to retrieve the result of a task that aborted by throwing an exception.

RejectedExecutionException	
Exception thrown by an Executor when a task cannot be accepted for execution.

TimeoutException	
Exception thrown when a blocking operation times out.

==============
Package java.util.concurrent Description

Utility classes commonly useful in concurrent programming. 
This package includes a few small standardized extensible frameworks, 
as well as some classes that provide useful functionality and are otherwise tedious or difficult to implement. 
Here are brief descriptions of the main components. 
See also the java.util.concurrent.locks and java.util.concurrent.atomic packages.

----
Executors
执行器

Interfaces. 
接口。
Executor is a simple standardized interface for defining custom thread-like subsystems, including thread pools, asynchronous IO, and lightweight task frameworks. 
Executor是一个简单标准的接口，用来定制基于线程的子系统，包括线程池，异步IO，轻量级任务。
Depending on which concrete Executor class is being used, tasks may execute in a newly created thread, 
an existing task-execution thread, or the thread calling execute, and may execute sequentially or concurrently. 
使用不同的执行器，任务可能在新创建的线程，已有的线程，发起任务的线程上执行，可能顺序也可能并发执行。

ExecutorService provides a more complete asynchronous task execution framework. 
ExecutorService提供更多异步任务的执行功能，
An ExecutorService manages queuing and scheduling of tasks, and allows controlled shutdown. 
ExecutorService排队和调度任务，可受控的关闭。
The ScheduledExecutorService subinterface and associated interfaces add support for delayed and periodic task execution. 
ScheduledExecutorService及相关接口，提供了延迟和定期执行的功能。
ExecutorServices provide methods arranging asynchronous execution of any function expressed as Callable, the result-bearing analog of Runnable. 

A Future returns the results of a function, allows determination of whether execution has completed, and provides a means to cancel execution. 
Future通过一个方法来取得执行结果，允许取消。
A RunnableFuture is a Future that possesses a run method that upon execution, sets its results.
RunnableFuture提供一个run方法来设置它的执行结果。



Implementations. 
实现。
Classes ThreadPoolExecutor and ScheduledThreadPoolExecutor provide tunable, flexible thread pools. 
ThreadPoolExecutor和ScheduledThreadPoolExecutor提供可伸缩的线程池。
The Executors class provides factory methods for the most common kinds and configurations of Executors, as well as a few utility methods for using them. 
Executors类提供了许多工厂方法来定制和创建执行器。
Other utilities based on Executors include the concrete class FutureTask providing a common extensible implementation of Futures, 
and ExecutorCompletionService, that assists in coordinating the processing of groups of asynchronous tasks.

Class ForkJoinPool provides an Executor primarily designed for processing instances of ForkJoinTask and its subclasses. 
These classes employ a work-stealing scheduler that attains high throughput for tasks conforming to restrictions that often hold in computation-intensive parallel processing.
ForkJoinPool类用来执行forkJoin任务。

----
Queues
队列

The ConcurrentLinkedQueue class supplies an efficient scalable thread-safe non-blocking FIFO queue.
Five implementations in java.util.concurrent support the extended BlockingQueue interface, that defines blocking versions of put and take: LinkedBlockingQueue, ArrayBlockingQueue, SynchronousQueue, PriorityBlockingQueue, and DelayQueue. 
The different classes cover the most common usage contexts for producer-consumer, messaging, parallel tasking, and related concurrent designs.

有5种阻塞队列的实现。
分别覆盖以下常用场景：生产者消费者，消息，并行任务，并发相关的设计。


Extended interface TransferQueue, and implementation LinkedTransferQueue introduce a synchronous transfer method (along with related features) in which a producer may optionally block awaiting its consumer.

TransferQueue接口（传输队列），及实现类LinkedTransferQueue，提供同步传递方法，使得生产者可选的阻塞它的消费者。

The BlockingDeque interface extends BlockingQueue to support both FIFO and LIFO (stack-based) operations. 
Class LinkedBlockingDeque provides an implementation.

阻塞双向队列允许先进先出和后进先出（即栈）。

----
Timing
时间

The TimeUnit class provides multiple granularities (including nanoseconds) for specifying and controlling time-out based operations. Most classes in the package contain operations based on time-outs in addition to indefinite waits. In all cases that time-outs are used, the time-out specifies the minimum time that the method should wait before indicating that it timed-out. Implementations make a "best effort" to detect time-outs as soon as possible after they occur. However, an indefinite amount of time may elapse between a time-out being detected and a thread actually executing again after that time-out. All methods that accept timeout parameters treat values less than or equal to zero to mean not to wait at all. To wait "forever", you can use a value of Long.MAX_VALUE.

----
Synchronizers
同步器

Five classes aid common special-purpose synchronization idioms.
5种同步器。

Semaphore is a classic concurrency tool.
信号量。

CountDownLatch is a very simple yet very common utility for blocking until a given number of signals, events, or conditions hold.

A CyclicBarrier is a resettable multiway synchronization point useful in some styles of parallel programming.

A Phaser provides a more flexible form of barrier that may be used to control phased computation among multiple threads.
移相器。

An Exchanger allows two threads to exchange objects at a rendezvous point, and is useful in several pipeline designs.
Exchanger允许两个线程在汇合点交换对象，在“多管道”设计中很有用。

----
Concurrent Collections
并发集合

Besides Queues, this package supplies Collection implementations designed for use in multithreaded contexts: 
ConcurrentHashMap, ConcurrentSkipListMap, ConcurrentSkipListSet, CopyOnWriteArrayList, and CopyOnWriteArraySet. 
除了队列，本包提供了许多在多线程环境下使用的集合类。

When many threads are expected to access a given collection, 
a ConcurrentHashMap is normally preferable to a synchronized HashMap, 
and a ConcurrentSkipListMap is normally preferable to a synchronized TreeMap. 
A CopyOnWriteArrayList is preferable to a synchronized ArrayList when the expected number of reads and traversals greatly outnumber the number of updates to a list.

The "Concurrent" prefix used with some classes in this package is a shorthand indicating several differences from similar "synchronized" classes. 

For example java.util.Hashtable and Collections.synchronizedMap(new HashMap()) are synchronized. But ConcurrentHashMap is "concurrent". 
A concurrent collection is thread-safe, but not governed by a single exclusion lock. 
In the particular case of ConcurrentHashMap, it safely permits any number of concurrent reads as well as a tunable number of concurrent writes. "Synchronized" classes can be useful when you need to prevent all access to a collection via a single lock, at the expense of poorer scalability. 
In other cases in which multiple threads are expected to access a common collection, "concurrent" versions are normally preferable. 
And unsynchronized collections are preferable when either collections are unshared, or are accessible only when holding other locks.

Most concurrent Collection implementations (including most Queues) also differ from the usual java.util conventions in that 
their Iterators provide weakly consistent rather than fast-fail traversal. 
许多并发集合的实现（包括大多数队列），不同于普通集合类，它们的迭代器是“弱一致性”的，而不是“快速失败”的。
A weakly consistent iterator is thread-safe, but does not necessarily freeze the collection while iterating, 
so it may (or may not) reflect any updates since the iterator was created.
“弱一致性”迭代器是线程安全的，但在迭代期间不冻结集合，
所以可能看见（也可能看不见）自迭代器创建后集合所发生的变化。

----
Memory Consistency Properties
内存一致性


Chapter 17 of The Java™ Language Specification defines the happens-before relation on memory operations such as reads and writes of shared variables. 
《java语言规范》第17章定义了共享变量在读写之间的“happens-before”关系。

The results of a write by one thread are guaranteed to be visible to a read by another thread only if the write operation happens-before the read operation. 
一个线程的写，只在写操作在读操作发生前，另一个线程能读到它的结果。

The synchronized and volatile constructs, as well as the Thread.start() and Thread.join() methods, can form happens-before relationships. 
同步和易变（volatile）结构，例如Thread.start()和Thread.join()方法，将形成“happens-before”关系。

In particular:
特别是，
Each action in a thread happens-before every action in that thread that comes later in the program's order.
线程中，每一个动作比同一个线程的其它动作要先。
An unlock (synchronized block or method exit) of a monitor happens-before every subsequent lock (synchronized block or method entry) of that same monitor. 
监视器的解锁（在退出synchronized块或方法时）总是在该监视器的上锁（进入synchronized块或方法时）之前。
And because the happens-before relation is transitive, all actions of a thread prior to unlocking happen-before all actions subsequent to any thread locking that monitor.
因为“之前发生”关系是过渡的，线程中在监视器解锁之前的所有动作，都发生在其它线程上锁该监视器之后的动作。
A write to a volatile field happens-before every subsequent read of that same field. 
一个“易变”字段，它的写发生在所有读之前。
Writes and reads of volatile fields have similar memory consistency effects as entering and exiting monitors, but do not entail mutual exclusion locking.
写读“易变”字段，类似于监视器的内存一致性效果，但不需要互斥锁。
A call to start on a thread happens-before any action in the started thread.
线程的start调用，总是在线程的动作之前。
All actions in a thread happen-before any other thread successfully returns from a join on that thread.
线程的所有动作，总是在其它线程“成功从join返回”之前。
The methods of all classes in java.util.concurrent and its subpackages extend these guarantees to higher-level synchronization. 

In particular:

Actions in a thread prior to placing an object into any concurrent collection happen-before actions subsequent to the access or removal of that element from the collection in another thread.

Actions in a thread prior to the submission of a Runnable to an Executor happen-before its execution begins. 
Similarly for Callables submitted to an ExecutorService.

Actions taken by the asynchronous computation represented by a Future happen-before actions subsequent to the retrieval of the result via Future.get() in another thread.

Actions prior to "releasing" synchronizer methods such as Lock.unlock, Semaphore.release, and CountDownLatch.countDown happen-before actions subsequent to a successful "acquiring" method such as Lock.lock, Semaphore.acquire, Condition.await, and CountDownLatch.await on the same synchronizer object in another thread.

For each pair of threads that successfully exchange objects via an Exchanger, actions prior to the exchange() in each thread happen-before those subsequent to the corresponding exchange() in another thread.

Actions prior to calling CyclicBarrier.await and Phaser.awaitAdvance (as well as its variants) happen-before actions performed by the barrier action, 
and actions performed by the barrier action happen-before actions subsequent to a successful return from the corresponding await in other threads.

Since:
1.5

