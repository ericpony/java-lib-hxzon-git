（hxzon学习笔记）C++面向对象程序设计

by hxzon
《C++ Primer中文版第5版》第15章-面向对象程序设计

====
1，
面向对象程序设计的核心思想就是：数据抽象，继承，动态绑定。
数据抽象，将类的接口和实现分离。
继承，可以定义相似的类型，并对其相似关系建模。
动态绑定，可以在一定程度上忽略相似类型的区别，以统一的方式使用它们的对象。
动态绑定有时又被称为运行时绑定。

2，定义基类，定义派生类

虚函数：基类希望它的派生类各自定义适合自身的版本，基类使用virtual关键字。

派生类也可以使用virtual关键字。但C++11新标准，允许使用override关键字，相当于java中的override注解。
virtual关键字只能出现在类内部的声明语句，不能出现在类外部的函数定义。

基类通常都应该定义一个虚析构函数，即使该函数不执行任何实际操作。

类派生列表：一个冒号，后面紧跟以逗号分隔的基类类表，每个基类前面可以有继承方式的说明符。

C++标准没有明确规定派生类的对象，在内存中如何分布。
即，一个对象中，基类部分和派生类部分不一定是连续存储的。

3，派生类构造函数

除非我们特别指出，否则，派生类对象的基类部分，会像数据成员一样执行默认初始化。

4，继承与静态成员

如果基类定义了一个静态成员，则在整个继承体系中，只存在该成员的唯一定义。

5，可以使用final关键字，来阻止类，或成员函数被继承，和java的final关键字一样。

6，静态类型，动态类型

当使用存在继承关系的类型时，一个表达式有静态类型和动态类型。

在对象之间不存在类型转换，只有引用和指针才有。

7，虚函数的默认实参

虚函数可以有默认实参。
但注意，如果某次函数调用使用了默认实参，该实参值由本次调用的静态类型决定。
所以，最好让基类和派生类的默认实参一致。

8，指明虚函数的某个特定版本，使用作用域运算符。

yyy->Base::xxx();

9，抽象基类：含有纯虚函数的类，某个类型的对象没有意义。

纯虚函数：该函数没有实际意义。在声明语句使用 =0 来标明。

10，继承的访问控制，p543

hxzon总结：

注意区分类的用户（包括派生类的派生类）的权限，及派生类的权限。

三种访问权限，三种继承方式。
public访问权限，即所有代码可以访问。
private访问权限，即所有代码都不可访问，除了友元。
protect访问权限，即友元，及派生类可访问。

继承方式影响的是类的用户的权限（包括派生类的派生类），而不是派生类的权限。
基类的private成员，始终是不可访问的，除了基类的友元。
基类的public成员，使用protect继承后，在派生类中，变成protect成员。
基类的public成员和protect成员，使用private继承后，在派生类中，变成private成员。
所以，私有继承和保护继承，对外（包括派生类的派生类），属于实现细节，不代表接口契约，
用户代码不能让派生类向基类转换。

11，正如友元关系不能传递，友元关系也不能继承。

派生类的成员或友元，只能通过派生类对象（不能对基类对象）来访问基类的受保护成员。

12，使用using声明来改变个别成员的可访问性

（相当于java中，子类扩大某个成员的可见性）

13，使用class关键字定义的派生类，默认是私有继承的。
使用struct关键字定义的派生类，默认是公有继承的。

最好的方式，是显示写出。

（2014.4.3）

14，名称覆盖

子类若定义了与基类成员名称相同的成员，则基类成员在子类中会被覆盖（遮住）。
这里要理解的是C++的名称掩盖规则(name-hiding rules)是很简单的：只看名称，不区别类型。
此外，如果基类中存在某个成员函数的若干个重载版本，而子类也定义了同名函数(参数类型与返回值是否一致都不重要)，
则基类所有版本的重载函数都会被覆盖。

15，



