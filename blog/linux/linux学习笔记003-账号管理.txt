linux学习笔记003-账号管理

《鸟哥的linux私房菜-第十四章、Linux 账号管理与 ACL 权限配置》
最近升级日期：2009/09/09
http://vbird.dic.ksu.edu.tw/linux_basic/0410accountmanager_2.php

=========
2. 账号管理
　　2.1 新增与移除使用者： useradd, useradd 参考档, passwd, chage, usermod, userdel
　　2.2 用户功能：finger, chfn, chsh, id
　　2.3 新增与移除群组：groupadd, groupmod, groupdel, gpasswd 群组管理员
　　2.4 账号管理实例

=========
2，账号管理

好啦！既然要管理账号，当然是由新增与移除使用者开始的啰～底下我们就分别来谈一谈如何新增、 移除与更改用户的相关信息吧～

========
2.1，新增与移除使用者： useradd, 相关配置文件, passwd, usermod, userdel

要如何在 Linux 的系统新增一个用户啊？呵呵～真是太简单了～
我们登陆系统时会输入 (1)账号与 (2)口令， 所以创建一个可用的账号同样的也需要这两个数据。
那账号可以使用 useradd 来新建用户，口令的给予则使用 passwd 这个命令！
这两个命令下达方法如下：

------
useradd
[root@www ~]# useradd [-u UID] [-g 初始群组] [-G 次要群组] [-mM]\
>  [-c 说明栏] [-d 家目录绝对路径] [-s shell] 使用者账号名
选项与参数：
-u  ：后面接的是 UID ，是一组数字。直接指定一个特定的 UID 给这个账号；
-g  ：后面接的那个组名就是我们上面提到的 initial group 啦～
      该群组的 GID 会被放置到 /etc/passwd 的第四个字段内。
-G  ：后面接的组名则是这个账号还可以加入的群组。
      这个选项与参数会修改 /etc/group 内的相关数据喔！
-M  ：强制！不要创建用户家目录！(系统账号默认值)
-m  ：强制！要创建用户家目录！(一般账号默认值)
-c  ：这个就是 /etc/passwd 的第五栏的说明内容啦～可以随便我们配置的啦～
-d  ：指定某个目录成为家目录，而不要使用默认值。务必使用绝对路径！
-r  ：创建一个系统的账号，这个账号的 UID 会有限制 (参考 /etc/login.defs)
-s  ：后面接一个 shell ，若没有指定则默认是 /bin/bash 的啦～
-e  ：后面接一个日期，格式为『YYYY-MM-DD』此项目可写入 shadow 第八字段，
      亦即账号失效日的配置项目啰；
-f  ：后面接 shadow 的第七字段项目，指定口令是否会失效。0为立刻失效，
      -1 为永远不失效(口令只会过期而强制于登陆时重新配置而已。)

范例一：完全参考默认值创建一个用户，名称为 vbird1
[root@www ~]# useradd vbird1
[root@www ~]# ll -d /home/vbird1
drwx------ 4 vbird1 vbird1 4096 Feb 25 09:38 /home/vbird1
# 默认会创建用户家目录，且权限为 700 ！这是重点！

[root@www ~]# grep vbird1 /etc/passwd /etc/shadow /etc/group
/etc/passwd:vbird1:x:504:505::/home/vbird1:/bin/bash
/etc/shadow:vbird1:!!:14300:0:99999:7:::
/etc/group:vbird1:x:505:    <==默认会创建一个与账号一模一样的群组名

其实系统已经帮我们规定好非常多的默认值了，所以我们可以简单的使用『 useradd 账号 』来创建使用者即可。 
CentOS 这些默认值主要会帮我们处理几个项目：

在 /etc/passwd 里面创建一行与账号相关的数据，包括创建 UID/GID/家目录等；
在 /etc/shadow 里面将此账号的口令相关参数填入，但是尚未有口令；
在 /etc/group 里面加入一个与账号名称一模一样的组名；
在 /home 底下创建一个与账号同名的目录作为用户家目录，且权限为 700

由于在 /etc/shadow 内仅会有口令参数而不会有加密过的口令数据，因此我们在创建使用者账号时，
 还需要使用『 passwd 账号 』来给予口令才算是完成了用户创建的流程。
 如果由于特殊需求而需要改变使用者相关参数时， 就得要透过上述表格中的选项来进行创建了，参考底下的案例：

范例二：假设我已知道我的系统当中有个组名为 users ，且 UID 700 并不存在，
        请用 users 为初始群组，以及 uid 为 700 来创建一个名为 vbird2 的账号
[root@www ~]# useradd -u 700 -g users vbird2
[root@www ~]# ll -d /home/vbird2
drwx------ 4 vbird2 users 4096 Feb 25 09:59 /home/vbird2

[root@www ~]# grep vbird2 /etc/passwd /etc/shadow /etc/group
/etc/passwd:vbird2:x:700:100::/home/vbird2:/bin/bash
/etc/shadow:vbird2:!!:14300:0:99999:7:::
# 看一下，UID 与 initial group 确实改变成我们需要的了！

在这个范例中，我们创建的是指定一个已经存在的群组作为使用者的初始群组，因为群组已经存在， 所以在 /etc/group 里面就不会主动的创建与账号同名的群组了！
 此外，我们也指定了特殊的 UID 来作为使用者的专属 UID 喔！
 了解了一般账号后，我们来瞧瞧那啥是系统账号 (system account) 吧！

范例三：创建一个系统账号，名称为 vbird3
[root@www ~]# useradd -r vbird3
[root@www ~]# ll -d /home/vbird3
ls: /home/vbird3: No such file or directory  <==不会主动创建家目录

[root@www ~]# grep vbird3 /etc/passwd /etc/shadow /etc/group
/etc/passwd:vbird3:x:100:103::/home/vbird3:/bin/bash
/etc/shadow:vbird3:!!:14300::::::
/etc/group:vbird3:x:103:

我们在谈到 UID 的时候曾经说过一般账号应该是 500 号以后，那用户自己创建的系统账号则一般是由 100 号以后起算的。
 所以在这里我们加上 -r 这个选项以后，系统就会主动将账号与账号同名群组的 UID/GID 都指定小于 500 以下， 在本案例中则是使用 100(UID) 与 103(GID) 啰！
 此外，由于系统账号主要是用来进行运行系统所需服务的权限配置， 所以系统账号默认都不会主动创建家目录的！

由这几个范例我们也会知道，使用 useradd 创建使用者账号时，其实会更改不少地方，至少我们就知道底下几个文件：

用户账号与口令参数方面的文件：/etc/passwd, /etc/shadow
使用者群组相关方面的文件：/etc/group, /etc/gshadow
用户的家目录：/home/账号名称

那请教一下，你有没有想过，为何『 useradd vbird1 』会主动在 /home/vbird1 创建起用户的家目录？家目录内有什么数据且来自哪里？
为何默认使用的是 /bin/bash 这个 shell ？为何口令字段已经都规范好了 (0:99999:7 那一串)？
呵呵！这就得要说明一下 useradd 所使用的参考文件啰！

----------
useradd 参考档

其实 useradd 的默认值可以使用底下的方法呼叫出来：

[root@www ~]# useradd -D
GROUP=100		<==默认的群组
HOME=/home		<==默认的家目录所在目录
INACTIVE=-1		<==口令失效日，在 shadow 内的第 7 栏
EXPIRE=			<==账号失效日，在 shadow 内的第 8 栏
SHELL=/bin/bash		<==默认的 shell
SKEL=/etc/skel		<==用户家目录的内容数据参考目录
CREATE_MAIL_SPOOL=yes   <==是否主动帮使用者创建邮件信箱(mailbox)

这个数据其实是由 /etc/default/useradd 呼叫出来的！你可以自行用 vim 去观察该文件的内容。
搭配上头刚刚谈过的范例一的运行结果，上面这些配置项目所造成的行为分别是：

GROUP=100：新建账号的初始群组使用 GID 为 100 者

系统上面 GID 为 100 者即是 users 这个群组，此配置项目指的就是让新设使用者账号的初始群组为 users 这一个的意思。 
但是我们知道 CentOS 上面并不是这样的，在 CentOS 上面默认的群组为与账号名相同的群组。
 举例来说， vbird1 的初始群组为 vbird1 。怎么会这样啊？
 这是因为针对群组的角度有两种不同的机制所致， 这两种机制分别是：

私有群组机制：系统会创建一个与账号一样的群组给使用者作为初始群组。
 这种群组的配置机制会比较有保密性，这是因为使用者都有自己的群组，而且家目录权限将会配置为 700 (仅有自己可进入自己的家目录) 之故。
 使用这种机制将不会参考 GROUP=100 这个配置值。代表性的 distributions 有 RHEL, Fedora, CentOS 等；

公共群组机制：就是以 GROUP=100 这个配置值作为新建账号的初始群组，因此每个账号都属于 users 这个群组， 
且默认家目录通常的权限会是『 drwxr-xr-x ... username users ... 』，由于每个账号都属于 users 群组，
因此大家都可以互相分享家目录内的数据之故。代表 distributions 如 SuSE等。

由于我们的 CentOS 使用私有群组机制，因此这个配置项目是不会生效的！不要太紧张啊！

HOME=/home：用户家目录的基准目录(basedir)

用户的家目录通常是与账号同名的目录，这个目录将会摆放在此配置值的目录后。
所以 vbird1 的家目录就会在 /home/vbird1/ 了！很容易理解吧！

INACTIVE=-1：口令过期后是否会失效的配置值

我们在 shadow 文件结构当中谈过，第七个字段的配置值将会影响到口令过期后， 在多久时间内还可使用旧口令登陆。
这个项目就是在指定该日数啦！如果是 0 代表口令过期立刻失效， 如果是 -1 则是代表口令永远不会失效，如果是数字，如 30 ，则代表过期 30 天后才失效。

EXPIRE=：账号失效的日期

就是 shadow 内的第八字段，你可以直接配置账号在哪个日期后就直接失效，而不理会口令的问题。
通常不会配置此项目，但如果是付费的会员制系统，或许这个字段可以配置喔！

SHELL=/bin/bash：默认使用的 shell 程序文件名

系统默认的 shell 就写在这里。假如你的系统为 mail server ，你希望每个账号都只能使用 email 的收发信件功能，
而不许用户登陆系统取得 shell ，那么可以将这里配置为 /sbin/nologin ，如此一来，新建的使用者默认就无法登陆！
也免去后续使用 usermod 进行修改的手续！

SKEL=/etc/skel：用户家目录参考基准目录

这个咚咚就是指定用户家目录的参考基准目录啰～
举我们的范例一为例， vbird1 家目录 /home/vbird1 内的各项数据，都是由 /etc/skel 所复制过去的～
所以呢，未来如果我想要让新增使用者时，该用户的环境变量 ~/.bashrc 就配置妥当的话，
您可以到 /etc/skel/.bashrc 去编辑一下，也可以创建 /etc/skel/www 这个目录，
那么未来新增使用者后，在他的家目录下就会有 www 那个目录了！这样瞭呼？

CREATE_MAIL_SPOOL=yes：创建使用者的 mailbox

你可以使用『 ll /var/spool/mail/vbird1 』看一下，会发现有这个文件的存在喔！这就是使用者的邮件信箱！
除了这些基本的账号配置值之外， UID/GID 还有口令参数又是在哪里参考的呢？
那就得要看一下 /etc/login.defs 啦！ 这个文件的内容有点像底下这样：

MAIL_DIR        /var/spool/mail	<==用户默认邮件信箱放置目录

PASS_MAX_DAYS   99999	<==/etc/shadow 内的第 5 栏，多久需变更口令日数
PASS_MIN_DAYS   0	<==/etc/shadow 内的第 4 栏，多久不可重新配置口令日数
PASS_MIN_LEN    5	<==口令最短的字符长度，已被 pam 模块取代，失去效用！
PASS_WARN_AGE   7	<==/etc/shadow 内的第 6 栏，过期前会警告的日数

UID_MIN         500	<==使用者最小的 UID，意即小于 500 的 UID 为系统保留
UID_MAX       60000	<==使用者能够用的最大 UID
GID_MIN         500	<==使用者自定义组的最小 GID，小于 500 为系统保留
GID_MAX       60000	<==使用者自定义组的最大 GID

CREATE_HOME     yes	<==在不加 -M 及 -m 时，是否主动创建用户家目录？
UMASK           077     <==用户家目录创建的 umask ，因此权限会是 700
USERGROUPS_ENAB yes     <==使用 userdel 删除时，是否会删除初始群组
MD5_CRYPT_ENAB yes      <==口令是否经过 MD5 的加密机制处理

这个文件规范的数据则是如下所示：

mailbox 所在目录：
用户的默认 mailbox 文件放置的目录在 /var/spool/mail，
所以 vbird1 的 mailbox 就是在 /var/spool/mail/vbird1 啰！

shadow 口令第 4, 5, 6 字段内容：
透过 PASS_MAX_DAYS 等等配置值来指定的！
所以你知道为何默认的 /etc/shadow 内每一行都会有『 0:99999:7 』的存在了吗？^_^！
不过要注意的是，由于目前我们登陆时改用 PAM 模块来进行口令检验，所以那个 PASS_MIN_LEN 是失效的！

UID/GID 指定数值：
虽然 Linux 核心支持的账号可高达 232 这么多个，不过一部主机要作出这么多账号在管理上也是很麻烦的！
 所以在这里就针对 UID/GID 的范围进行规范就是了。
 上表中的 UID_MIN 指的就是可登陆系统的一般账号的最小 UID ，至于 UID_MAX 则是最大 UID 之意。

要注意的是，系统给予一个账号 UID 时，
他是 (1)先参考 UID_MIN 配置值取得最小数值；
 (2)由 /etc/passwd 搜寻最大的 UID 数值，
  将 (1) 与 (2) 相比，找出最大的那个再加一就是新账号的 UID 了。
  我们上面已经作出 UID 为 700 的 vbird2 ， 如果再使用『 useradd vbird4 』时，你猜 vbird4 的 UID 会是多少？
  答案是： 701 。 所以中间的 505~699 的号码就空下来啦！

而如果我是想要创建系统用的账号，所以使用 useradd -r sysaccount 这个 -r 的选项时，就会找『比 500 小的最大的那个 UID + 1 』就是了。 ^_^

用户家目录配置值：
为何我们系统默认会帮用户创建家目录？就是这个『CREATE_HOME = yes』的配置值啦！
这个配置值会让你在使用 useradd 时， 主动加入『 -m 』这个产生家目录的选项啊！
如果不想要创建用户家目录，就只能强制加上『 -M 』的选项在 useradd 命令运行时啦！
至于创建家目录的权限配置呢？就透过 umask 这个配置值啊！
因为是 077 的默认配置，因此用户家目录默认权限才会是『 drwx------ 』哩！

用户删除与口令配置值：
使用『USERGROUPS_ENAB yes』这个配置值的功能是： 如果使用 userdel 去删除一个账号时，且该账号所属的初始群组已经没有人隶属于该群组了， 那么就删除掉该群组，
举例来说，我们刚刚有创建 vbird4 这个账号，他会主动创建 vbird4 这个群组。
若 vbird4 这个群组并没有其他账号将他加入支持的情况下，若使用 userdel vbird4 时，该群组也会被删除的意思。
至于『MD5_CRYPT_ENAB yes』则表示使用 MD5 来加密口令明文，而不使用旧式的 DES(注2) 。
现在你知道啦，使用 useradd 这支程序在创建 Linux 上的账号时，至少会参考：

/etc/default/useradd
/etc/login.defs
/etc/skel/*

这些文件，不过，最重要的其实是创建 /etc/passwd, /etc/shadow, /etc/group, /etc/gshadow 还有用户家目录就是了～
所以，如果你了解整个系统运行的状态，也是可以手动直接修改这几个文件就是了。 OK！账号创建了，接下来处理一下用户的口令吧！

----------
passwd

刚刚我们讲到了，使用 useradd 创建了账号之后，在默认的情况下，该账号是暂时被封锁的， 
也就是说，该账号是无法登陆的，你可以去瞧一瞧 /etc/shadow 内的第二个字段就晓得啰～ 
那该如何是好？怕什么？直接给他配置新口令就好了嘛！对吧～配置口令就使用 passwd 啰！

[root@www ~]# passwd [--stdin]  <==所有人均可使用来改自己的口令
[root@www ~]# passwd [-l] [-u] [--stdin] [-S] \
>  [-n 日数] [-x 日数] [-w 日数] [-i 日期] 账号 <==root 功能
选项与参数：
--stdin ：可以透过来自前一个管线的数据，作为口令输入，对 shell script 有帮助！
-l  ：是 Lock 的意思，会将 /etc/shadow 第二栏最前面加上 ! 使口令失效；
-u  ：与 -l 相对，是 Unlock 的意思！
-S  ：列出口令相关参数，亦即 shadow 文件内的大部分信息。
-n  ：后面接天数，shadow 的第 4 字段，多久不可修改口令天数
-x  ：后面接天数，shadow 的第 5 字段，多久内必须要更动口令
-w  ：后面接天数，shadow 的第 6 字段，口令过期前的警告天数
-i  ：后面接『日期』，shadow 的第 7 字段，口令失效日期


范例一：请 root 给予 vbird2 口令
[root@www ~]# passwd vbird2
Changing password for user vbird2.
New UNIX password: <==这里直接输入新的口令，屏幕不会有任何反应
BAD PASSWORD: it is WAY too short <==口令太简单或过短的错误！
Retype new UNIX password:  <==再输入一次同样的口令
passwd: all authentication tokens updated successfully.  <==竟然还是成功修改了！

root 果然是最伟大的人物！当我们要给予用户口令时，透过 root 来配置即可。 
root 可以配置各式各样的口令，系统几乎一定会接受！
所以您瞧瞧，如同上面的范例一，明明鸟哥输入的口令太短了， 但是系统依旧可接受 vbird2 这样的口令配置。
这个是 root 帮忙配置的结果，那如果是用户自己要改口令呢？ 包括 root 也是这样修改的喔！

范例二：用 vbird2 登陆后，修改 vbird2 自己的口令
[vbird2@www ~]$ passwd   <==后面没有加账号，就是改自己的口令！
Changing password for user vbird2.
Changing password for vbird2
(current) UNIX password: <==这里输入『原有的旧口令』
New UNIX password: <==这里输入新口令
BAD PASSWORD: it is based on a dictionary word <==口令检验不通过，请再想个新口令
New UNIX password: <==这里再想个来输入吧
Retype new UNIX password: <==通过口令验证！所以重复这个口令的输入
passwd: all authentication tokens updated successfully. <==有无成功看关键词

passwd 的使用真的要很注意，尤其是 root 先生啊！
鸟哥在课堂上每次讲到这里，说是要帮自己的一般账号创建口令时， 有一小部分的学生就是会忘记加上账号，
结果就变成改变 root 自己的口令，最后.... root 口令就这样不见去！唉～ 
要帮一般账号创建口令需要使用『 passwd 账号 』的格式，使用『 passwd 』表示修改自己的口令！拜托！千万不要改错！

与 root 不同的是，一般账号在更改口令时需要先输入自己的旧口令 (亦即 current 那一行)，然后再输入新口令 (New 那一行)。 
要注意的是，口令的规范是非常严格的，尤其新的 distributions 大多使用 PAM 模块来进行口令的检验，
包括太短、 口令与账号相同、口令为字典常见字符串等，都会被 PAM 模块检查出来而拒绝修改口令，
此时会再重复出现『 New 』这个关键词！ 那时请再想个新口令！若出现『 Retype 』才是你的口令被接受了！
重复输入新口令并且看到『 successfully 』这个关键词时才是修改口令成功喔！

Tips:
与一般使用者不同的是， root 并不需要知道旧口令就能够帮用户或 root 自己创建新口令！ 
但如此一来有困扰～就是如果你的亲密爱人老是告诉你『我的口令真难记，帮我配置简单一点的！』时， 千万不要妥协啊！这是为了系统安全...

为何用户要设订自己的口令会这么麻烦啊？这是因为口令的安全性啦！
如果口令配置太简单， 一些有心人士就能够很简单的猜到你的口令，如此一来人家就可能使用你的一般账号登陆你的主机或使用其他主机资源， 对主机的维护会造成困扰的！
所以新的 distributions 是使用较严格的 PAM 模块来管理口令，这个管理的机制写在 /etc/pam.d/passwd 当中。
而该文件与口令有关的测试模块就是使用：pam_cracklib.so，这个模块会检验口令相关的信息，
并且取代 /etc/login.defs 内的 PASS_MIN_LEN 的配置啦！
关于 PAM 我们在本章后面继续介绍，这里先谈一下， 理论上，你的口令最好符合如下要求：

口令不能与账号相同；
口令尽量不要选用字典里面会出现的字符串；
口令需要超过 8 个字符；
口令不要使用个人信息，如身份证、手机号码、其他电话号码等；
口令不要使用简单的关系式，如 1+1=2， Iamvbird 等；
口令尽量使用大小写字符、数字、特殊字符($,_,-等)的组合。

为了方便系统管理，新版的 passwd 还加入了很多创意选项喔！鸟哥个人认为最好用的大概就是这个『 --stdin 』了！
 举例来说，你想要帮 vbird2 变更口令成为 abc543CC ，可以这样下达命令呢！

范例三：使用 standard input 创建用户的口令
[root@www ~]# echo "abc543CC" | passwd --stdin vbird2
Changing password for user vbird2.
passwd: all authentication tokens updated successfully.

这个动作会直接升级用户的口令而不用再次的手动输入！
好处是方便处理，缺点是这个口令会保留在命令中， 未来若系统被攻破，人家可以在 /root/.bash_history 找到这个口令呢！
所以这个动作通常仅用在 shell script 的大量创建使用者账号当中！
要注意的是，这个选项并不存在所有 distributions 版本中， 请使用 man passwd 确认你的 distribution 是否有支持此选项喔！

如果你想要让 vbird2 的口令具有相当的守则，举例来说你要让 vbird2 每 60 天需要变更口令， 口令过期后 10 天未使用就宣告口令失效，那该如何处理？

范例四：管理 vbird2 的口令使具有 60 天变更、10 天口令失效的配置
[root@www ~]# passwd -S vbird2
vbird2 PS 2009-02-26 0 99999 7 -1 (Password set, MD5 crypt.)
# 上面说明口令创建时间 (2009-02-26)、0 最小天数、99999 变更天数、7 警告日数
# 与口令不会失效 (-1) 。

[root@www ~]# passwd -x 60 -i 10 vbird2
[root@www ~]# passwd -S vbird2
vbird2 PS 2009-02-26 0 60 7 10 (Password set, MD5 crypt.)

那如果我想要让某个账号暂时无法使用口令登陆主机呢？
举例来说， vbird2 这家伙最近老是胡乱在主机乱来， 所以我想要暂时让她无法登陆的话，
最简单的方法就是让她的口令变成不合法 (shadow 第 2 字段长度变掉)！ 处理的方法就更简单的！

范例五：让 vbird2 的账号失效，观察完毕后再让她失效
[root@www ~]# passwd -l vbird2
[root@www ~]# passwd -S vbird2
vbird2 LK 2009-02-26 0 60 7 10 (Password locked.)
# 嘿嘿！状态变成『 LK, Lock 』了啦！无法登陆喔！
[root@www ~]# grep vbird2 /etc/shadow
vbird2:!!$1$50MnwNFq$oChX.0TPanCq7ecE4HYEi.:14301:0:60:7:10::
# 其实只是在这里加上 !! 而已！

[root@www ~]# passwd -u vbird2
[root@www ~]# grep vbird2 /etc/shadow
vbird2:$1$50MnwNFq$oChX.0TPanCq7ecE4HYEi.:14301:0:60:7:10::
# 口令字段恢复正常！

是否很有趣啊！您可以自行管理一下你的账号的口令相关参数喔！接下来让我们用更简单的方法来查阅口令参数喔！ 

------------
chage
除了使用 passwd -S 之外，有没有更详细的口令参数显示功能呢？有的！那就是 chage 了！ 他的用法如下：

[root@www ~]# chage [-ldEImMW] 账号名
选项与参数：
-l ：列出该账号的详细口令参数；
-d ：后面接日期，修改 shadow 第三字段(最近一次更改口令的日期)，格式 YYYY-MM-DD
-E ：后面接日期，修改 shadow 第八字段(账号失效日)，格式 YYYY-MM-DD
-I ：后面接天数，修改 shadow 第七字段(口令失效日期)
-m ：后面接天数，修改 shadow 第四字段(口令最短保留天数)
-M ：后面接天数，修改 shadow 第五字段(口令多久需要进行变更)
-W ：后面接天数，修改 shadow 第六字段(口令过期前警告日期)

范例一：列出 vbird2 的详细口令参数
[root@www ~]# chage -l vbird2
Last password change                               : Feb 26, 2009
Password expires                                   : Apr 27, 2009
Password inactive                                  : May 07, 2009
Account expires                                    : never
Minimum number of days between password change     : 0
Maximum number of days between password change     : 60
Number of days of warning before password expires  : 7

我们在 passwd 的介绍中谈到了处理 vbird2 这个账号的口令属性流程，使用 passwd -S 却无法看到很清楚的说明。
如果使用 chage 那可就明白多了！如上表所示，我们可以清楚的知道 vbird2 的详细参数呢！ 
如果想要修改其他的配置值，就自己参考上面的选项，或者自行 man chage 一下吧！^_^

chage 有一个功能很不错喔！如果你想要让『使用者在第一次登陆时， 强制她们一定要更改口令后才能够使用系统资源』，可以利用如下的方法来处理的！

范例二：创建一个名为 agetest 的账号，该账号第一次登陆后使用默认口令，
        但必须要更改过口令后，使用新口令才能够登陆系统使用 bash 环境
[root@www ~]# useradd agetest
[root@www ~]# echo "agetest" | passwd --stdin agetest
[root@www ~]# chage -d 0 agetest
# 此时此账号的口令创建时间会被改为 1970/1/1 ，所以会有问题！

范例三：尝试以 agetest 登陆的情况
You are required to change your password immediately (root enforced)
WARNING: Your password has expired.
You must change your password now and login again!
Changing password for user agetest.
Changing password for agetest
(current) UNIX password:  <==这个账号被强制要求必须要改口令！

非常有趣吧！你会发现 agetest 这个账号在第一次登陆时可以使用与账号同名的口令登陆， 但登陆时就会被要求立刻更改口令，更改口令完成后就会被踢出系统。
再次登陆时就能够使用新口令登陆了！ 这个功能对学校老师非常有帮助！
因为我们不想要知道学生的口令，那么在初次上课时就使用与学号相同的账号/口令给学生， 让她们登陆时自行配置她们的口令，
如此一来就能够避免其他同学随意使用别人的账号，也能够保证学生知道如何更改自己的口令！ 

---------
usermod

所谓这『人有失手，马有乱蹄』，您说是吧？所以啰，当然有的时候会『不小心』在 useradd 的时候加入了错误的配置数据。
或者是，在使用 useradd 后，发现某些地方还可以进行细部修改。
此时，当然我们可以直接到 /etc/passwd 或 /etc/shadow 去修改相对应字段的数据， 
不过，Linux 也有提供相关的命令让大家来进行账号相关数据的微调呢～那就是 usermod 啰～

[root@www ~]# usermod [-cdegGlsuLU] username
选项与参数：
-c  ：后面接账号的说明，即 /etc/passwd 第五栏的说明栏，可以加入一些账号的说明。
-d  ：后面接账号的家目录，即修改 /etc/passwd 的第六栏；
-e  ：后面接日期，格式是 YYYY-MM-DD 也就是在 /etc/shadow 内的第八个字段数据啦！
-f  ：后面接天数，为 shadow 的第七字段。
-g  ：后面接初始群组，修改 /etc/passwd 的第四个字段，亦即是 GID 的字段！
-G  ：后面接次要群组，修改这个使用者能够支持的群组，修改的是 /etc/group 啰～
-a  ：与 -G 合用，可『添加次要群组的支持』而非『配置』喔！
-l  ：后面接账号名称。亦即是修改账号名称， /etc/passwd 的第一栏！
-s  ：后面接 Shell 的实际文件，例如 /bin/bash 或 /bin/csh 等等。
-u  ：后面接 UID 数字啦！即 /etc/passwd 第三栏的数据；
-L  ：暂时将用户的口令冻结，让他无法登陆。其实仅改 /etc/shadow 的口令栏。
-U  ：将 /etc/shadow 口令栏的 ! 拿掉，解冻啦！

如果你仔细的比对，会发现 usermod 的选项与 useradd 非常类似！ 
这是因为 usermod 也是用来微调 useradd 添加的使用者参数嘛！
不过 usermod 还是有新增的选项， 那就是 -L 与 -U ，不过这两个选项其实与 passwd 的 -l, -u 是相同的！
而且也不见得会存在所有的 distribution 当中！接下来，让我们谈谈一些变更参数的实例吧！

范例一：修改使用者 vbird2 的说明栏，加上『VBird's test』的说明。
[root@www ~]# usermod -c "VBird's test" vbird2
[root@www ~]# grep vbird2 /etc/passwd
vbird2:x:700:100:VBird's test:/home/vbird2:/bin/bash

范例二：用户 vbird2 口令在 2009/12/31 失效。
[root@www ~]# usermod -e "2009-12-31" vbird2
[root@www ~]# grep vbird2 /etc/shadow
vbird2:$1$50MnwNFq$oChX.0TPanCq7ecE4HYEi.:14301:0:60:7:10:14609:

范例三：我们创建 vbird3 这个系统账号时并没有给予家目录，请创建他的家目录
[root@www ~]# ll -d ~vbird3
ls: /home/vbird3: No such file or directory  <==确认一下，确实没有家目录的存在！
[root@www ~]# cp -a /etc/skel /home/vbird3
[root@www ~]# chown -R vbird3:vbird3 /home/vbird3
[root@www ~]# chmod 700 /home/vbird3
[root@www ~]# ll -a ~vbird3
drwx------  4 vbird3 vbird3 4096 Sep  4 18:15 .  <==用户家目录权限
drwxr-xr-x 11 root   root   4096 Feb 26 11:45 ..
-rw-r--r--  1 vbird3 vbird3   33 May 25  2008 .bash_logout
-rw-r--r--  1 vbird3 vbird3  176 May 25  2008 .bash_profile
-rw-r--r--  1 vbird3 vbird3  124 May 25  2008 .bashrc
drwxr-xr-x  3 vbird3 vbird3 4096 Sep  4 18:11 .kde
drwxr-xr-x  4 vbird3 vbird3 4096 Sep  4 18:15 .mozilla
# 使用 chown -R 是为了连同家目录底下的用户/群组属性都一起变更的意思；
# 使用 chmod 没有 -R ，是因为我们仅要修改目录的权限而非内部文件的权限！

----------
userdel

这个功能就太简单了，目的在删除用户的相关数据，而用户的数据有：

用户账号/口令相关参数：/etc/passwd, /etc/shadow
使用者群组相关参数：/etc/group, /etc/gshadow
用户个人文件数据： /home/username, /var/spool/mail/username..
整个命令的语法非常简单：

[root@www ~]# userdel [-r] username
选项与参数：
-r  ：连同用户的家目录也一起删除

范例一：删除 vbird2 ，连同家目录一起删除
[root@www ~]# userdel -r vbird2

这个命令下达的时候要小心了！通常我们要移除一个账号的时候，你可以手动的将 /etc/passwd 与 /etc/shadow 里头的该账号取消即可！
一般而言，如果该账号只是『暂时不激活』的话，那么将 /etc/shadow 里头账号失效日期 (第八字段) 配置为 0 就可以让该账号无法使用，
但是所有跟该账号相关的数据都会留下来！ 使用 userdel 的时机通常是『你真的确定不要让该用户在主机上面使用任何数据了！』

另外，其实用户如果在系统上面操作过一阵子了，那么该用户其实在系统内可能会含有其他文件的。 
举例来说，他的邮件信箱 (mailbox) 或者是例行性工作排程 (crontab, 十六章) 之类的文件。 
所以，如果想要完整的将某个账号完整的移除，最好可以在下达 userdel -r username 之前， 
先以『 find / -user username 』查出整个系统内属于 username 的文件，然后再加以删除吧！

==========
2.2，用户功能

不论是 useradd/usermod/userdel ，那都是系统管理员所能够使用的命令， 
如果我是一般身份使用者，那么我是否除了口令之外，就无法更改其他的数据呢？ 
当然不是啦！这里我们介绍几个一般身份用户常用的账号数据变更与查询命令啰！

-------
finger

finger 的中文字面意义是：『手指』或者是『指纹』的意思。
这个 finger 可以查阅很多用户相关的信息喔！ 
大部分都是在 /etc/passwd 这个文件里面的信息啦！我们就先来检查检查用户信息吧！

[root@www ~]# finger [-s] username
选项与参数：
-s  ：仅列出用户的账号、全名、终端机代号与登陆时间等等；
-m  ：列出与后面接的账号相同者，而不是利用部分比对 (包括全名部分)

范例一：观察 vbird1 的用户相关账号属性
[root@www ~]# finger vbird1
Login: vbird1                           Name: (null)
Directory: /home/vbird1                 Shell: /bin/bash
Never logged in.
No mail.
No Plan.

由于 finger 类似指纹的功能，他会将用户的相关属性列出来！
如上表所示，其实他列出来的几乎都是 /etc/passwd 文件里面的东西。列出的信息说明如下：

Login：为使用者账号，亦即 /etc/passwd 内的第一字段；
Name：为全名，亦即 /etc/passwd 内的第五字段(或称为批注)；
Directory：就是家目录了；
Shell：就是使用的 Shell 文件所在；
Never logged in.：figner 还会调查用户登陆主机的情况喔！
No mail.：调查 /var/spool/mail 当中的信箱数据；
No Plan.：调查 ~vbird1/.plan 文件，并将该文件取出来说明！

不过是否能够查阅到 Mail 与 Plan 则与权限有关了！
因为 Mail / Plan 都是与使用者自己的权限配置有关， root 当然可以查阅到用户的这些信息，
但是 vbird1 就不见得能够查到 vbird3 的信息， 因为 /var/spool/mail/vbird3 与 /home/vbird3/ 的权限分别是 660, 700 ，
那 vbird1 当然就无法查阅的到！ 这样解释可以理解吧？
此外，我们可以创建自己想要运行的预定计划，当然，最多是给自己看的！可以这样做：

范例二：利用 vbird1 创建自己的计划档
[vbird1@www ~]$ echo "I will study Linux during this year." > ~/.plan
[vbird1@www ~]$ finger vbird1
Login: vbird1                           Name: (null)
Directory: /home/vbird1                 Shell: /bin/bash
Never logged in.
No mail.
Plan:
I will study Linux during this year.

范例三：找出目前在系统上面登陆的用户与登陆时间
[vbird1@www ~]$ finger
Login     Name       Tty      Idle  Login Time   Office     Office Phone
root      root       tty1           Feb 26 09:53
vbird1               tty2           Feb 26 15:21

在范例三当中，我们发现输出的信息还会有 Office, Office Phone 等信息，那这些信息要如何记录呢？ 
底下我们会介绍 chfn 这个命令！来看看如何修改用户的 finger 数据吧！

----------
chfn

chfn 有点像是： change finger 的意思！这玩意的使用方法如下：

[root@www ~]# chfn [-foph] [账号名]
选项与参数：
-f  ：后面接完整的大名；
-o  ：您办公室的房间号码；
-p  ：办公室的电话号码；
-h  ：家里的电话号码！

范例一：vbird1 自己更改一下自己的相关信息！
[vbird1@www ~]$ chfn
Changing finger information for vbird1.
Password:                        <==确认身份，所以输入自己的口令
Name []: VBird Tsai test         <==输入你想要呈现的全名
Office []: Dic in Ksu. Tainan    <==办公室号码
Office Phone []: 06-2727175#356  <==办公室电话
Home Phone []: 06-1234567        <==家里电话号码

Finger information changed.
[vbird1@www ~]$ grep vbird1 /etc/passwd
vbird1:x:504:505:VBird Tsai test,Dic in Ksu. Tainan,06-2727175#356,06-1234567:
/home/vbird1:/bin/bash
# 其实就是改到第五个字段，该字段里面用多个『 , 』分隔就是了！

[vbird1@www ~]$ finger vbird1
Login: vbird1                           Name: VBird Tsai test
Directory: /home/vbird1                 Shell: /bin/bash
Office: Dic in Ksu. Tainan              Office Phone: 06-2727175#356
Home Phone: 06-1234567
On since Thu Feb 26 15:21 (CST) on tty2
No mail.
Plan:
I will study Linux during this year.
# 就是上面特殊字体呈现的那些地方是由 chfn 所修改出来的！

这个命令说实在的，除非是你的主机有很多的用户，否则倒真是用不着这个程序！
这就有点像是 bbs 里头更改你『个人属性』的那一个数据啦！
不过还是可以自己玩一玩！尤其是用来提醒自己相关数据啦！ ^_^

----------
chsh

这就是 change shell 的简写！使用方法就更简单了！

[vbird1@www ~]$ chsh [-ls]
选项与参数：
-l  ：列出目前系统上面可用的 shell ，其实就是 /etc/shells 的内容！
-s  ：配置修改自己的 Shell 啰

范例一：用 vbird1 的身份列出系统上所有合法的 shell，并且指定 csh 为自己的 shell
[vbird1@www ~]$ chsh -l
/bin/sh
/bin/bash
/sbin/nologin  <==所谓：合法不可登陆的 Shell 就是这玩意！
/bin/tcsh
/bin/csh       <==这就是 C shell 啦！
/bin/ksh
# 其实上面的信息就是我们在 bash 中谈到的 /etc/shells 啦！

[vbird1@www ~]$ chsh -s /bin/csh; grep vbird1 /etc/passwd
Changing shell for vbird1.
Password:  <==确认身份，请输入 vbird1 的口令
Shell changed.
vbird1:x:504:505:VBird Tsai test,Dic in Ksu. Tainan,06-2727175#356,06-1234567:
/home/vbird1:/bin/csh

[vbird1@www ~]$ chsh -s /bin/bash
# 测试完毕后，立刻改回来！

[vbird1@www ~]$ ll $(which chsh)
-rws--x--x 1 root root 19128 May 25  2008 /usr/bin/chsh

不论是 chfn 与 chsh ，都是能够让一般用户修改 /etc/passwd 这个系统文件的！
所以你猜猜，这两个文件的权限是什么？ 一定是 SUID 的功能啦！看到这里，想到前面！ 这就是 Linux 的学习方法～ ^_^

----------
id

id 这个命令则可以查询某人或自己的相关 UID/GID 等等的信息，他的参数也不少，不过， 都不需要记～反正使用 id 就全部都列出啰～ ^_^

[root@www ~]# id [username]

范例一：查阅 root 自己的相关 ID 信息！
[root@www ~]# id
uid=0(root) gid=0(root) groups=0(root),1(bin),2(daemon),3(sys),4(adm),6(disk),
10(wheel) context=root:system_r:unconfined_t:SystemLow-SystemHigh
# 上面信息其实是同一行的数据！包括会显示 UID/GID 以及支持的所有群组！
# 至于后面那个 context=... 则是 SELinux 的内容，先不要理会他！

范例二：查阅一下 vbird1 吧～
[root@www ~]# id vbird1
uid=504(vbird1) gid=505(vbird1) groups=505(vbird1) context=root:system_r:
unconfined_t:SystemLow-SystemHigh

[root@www ~]# id vbird100
id: vbird100: No such user  <== id 这个命令也可以用来判断系统上面有无某账号！

==========
2.3，新增与移除群组

OK！了解了账号的新增、删除、更动与查询后，再来我们可以聊一聊群组的相关内容了。
 基本上，群组的内容都与这两个文件有关：/etc/group, /etc/gshadow。 群组的内容其实很简单，都是上面两个文件的新增、修改与移除而已，
  不过，如果再加上有效群组的概念，那么 newgrp 与 gpasswd 则不可不知呢！

---------
groupadd

[root@www ~]# groupadd [-g gid] [-r] 组名
选项与参数：
-g  ：后面接某个特定的 GID ，用来直接给予某个 GID ～
-r  ：创建系统群组啦！与 /etc/login.defs 内的 GID_MIN 有关。

范例一：新建一个群组，名称为 group1
[root@www ~]# groupadd group1
[root@www ~]# grep group1 /etc/group /etc/gshadow
/etc/group:group1:x:702:
/etc/gshadow:group1:!::
# 群组的 GID 也是会由 500 以上最大 GID+1 来决定！

曾经有某些版本的教育训练手册谈到，为了让使用者的 UID/GID 成对，她们建议新建的与使用者私有群组无关的其他群组时，使用小于 500 以下的 GID 为宜。 
也就是说，如果要创建群组的话，最好能够使用『 groupadd -r 群组名』的方式来创建啦！ 
不过，这见仁见智啦！看你自己的抉择啰！

-----------
groupmod

跟 usermod 类似的，这个命令仅是在进行 group 相关参数的修改而已。

[root@www ~]# groupmod [-g gid] [-n group_name] 群组名
选项与参数：
-g  ：修改既有的 GID 数字；
-n  ：修改既有的组名

范例一：将刚刚上个命令创建的 group1 名称改为 mygroup ， GID 为 201
[root@www ~]# groupmod -g 201 -n mygroup group1
[root@www ~]# grep mygroup /etc/group /etc/gshadow
/etc/group:mygroup:x:201:
/etc/gshadow:mygroup:!::

不过，还是那句老话，不要随意的更动 GID ，容易造成系统资源的错乱喔！

----------
groupdel

呼呼！ groupdel 自然就是在删除群组的啰～用法很简单：

[root@www ~]# groupdel [groupname]

范例一：将刚刚的 mygroup 删除！
[root@www ~]# groupdel mygroup

范例二：若要删除 vbird1 这个群组的话？
[root@www ~]# groupdel vbird1
groupdel: cannot remove user's primary group.

为什么 mygroup 可以删除，但是 vbird1 就不能删除呢？
原因很简单，『有某个账号 (/etc/passwd) 的 initial group 使用该群组！』 
如果查阅一下，你会发现在 /etc/passwd 内的 vbird1 第四栏的 GID 就是 /etc/group 内的 vbird1 那个群组的 GID ，所以啰，当然无法删除～
否则 vbird1 这个用户登陆系统后， 就会找不到 GID ，那可是会造成很大的困扰的！
那么如果硬要删除 vbird1 这个群组呢？ 你『必须要确认 /etc/passwd 内的账号没有任何人使用该群组作为 initial group 』才行喔！所以，你可以：

修改 vbird1 的 GID ，或者是：
删除 vbird1 这个使用者。

-----------
gpasswd：群组管理员功能

如果系统管理员太忙碌了，导致某些账号想要加入某个项目时找不到人帮忙！这个时候可以创建『群组管理员』喔！ 
什么是群组管理员呢？就是让某个群组具有一个管理员，这个群组管理员可以管理哪些账号可以加入/移出该群组！ 
那要如何『创建一个群组管理员』呢？就得要透过 gpasswd 啰！

# 关于系统管理员(root)做的动作：
[root@www ~]# gpasswd groupname
[root@www ~]# gpasswd [-A user1,...] [-M user3,...] groupname
[root@www ~]# gpasswd [-rR] groupname
选项与参数：
    ：若没有任何参数时，表示给予 groupname 一个口令(/etc/gshadow)
-A  ：将 groupname 的主控权交由后面的使用者管理(该群组的管理员)
-M  ：将某些账号加入这个群组当中！
-r  ：将 groupname 的口令移除
-R  ：让 groupname 的口令栏失效

# 关于群组管理员(Group administrator)做的动作：
[someone@www ~]$ gpasswd [-ad] user groupname
选项与参数：
-a  ：将某位使用者加入到 groupname 这个群组当中！
-d  ：将某位使用者移除出 groupname 这个群组当中。


范例一：创建一个新群组，名称为 testgroup 且群组交由 vbird1 管理：
[root@www ~]# groupadd testgroup  <==先创建群组
[root@www ~]# gpasswd testgroup   <==给这个群组一个口令吧！
Changing the password for group testgroup
New Password:
Re-enter new password:
# 输入两次口令就对了！
[root@www ~]# gpasswd -A vbird1 testgroup  <==加入群组管理员为 vbird1
[root@www ~]# grep testgroup /etc/group /etc/gshadow
/etc/group:testgroup:x:702:
/etc/gshadow:testgroup:$1$I5ukIY1.$o5fmW.cOsc8.K.FHAFLWg0:vbird1:
# 很有趣吧！此时 vbird1 则拥有 testgroup 的主控权喔！身份有点像板主啦！

范例二：以 vbird1 登陆系统，并且让他加入 vbird1, vbird3 成为 testgroup 成员
[vbird1@www ~]$ id
uid=504(vbird1) gid=505(vbird1) groups=505(vbird1) ....
# 看得出来，vbird1 尚未加入 testgroup 群组喔！

[vbird1@www ~]$ gpasswd -a vbird1 testgroup
[vbird1@www ~]$ gpasswd -a vbird3 testgroup
[vbird1@www ~]$ grep testgroup /etc/group
testgroup:x:702:vbird1,vbird3

很有趣的一个小实验吧！我们可以让 testgroup 成为一个可以公开的群组，然后创建起群组管理员， 群组管理员可以有多个。
在这个案例中，我将 vbird1 配置为 testgroup 的群组管理员，所以 vbird1 就可以自行添加群组成员啰～呼呼！
然后，该群组成员就能够使用 newgrp 啰～

===========
2.4，账号管理实例

账号管理不是随意建置几个账号就算了！有时候我们需要考虑到一部主机上面可能有多个账号在协同工作！ 
举例来说，在大学任教时，我们学校的专题生是需要分组的，这些同一组的同学间必须要能够互相修改对方的数据文件， 
但是同时这些同学又需要保留自己的私密数据，因此直接公开家目录是不适宜的。
那该如何是好？ 为此，我们底下提供几个例子来让大家思考看看啰：

任务一：单纯的完成上头交代的任务，假设我们需要的账号数据如下，你该如何实作？

账号名称	账号全名	支持次要群组	是否可登陆主机	口令
myuser1	1st user	mygroup1	可以	password
myuser2	2nd user	mygroup1	可以	password
myuser3	3rd user	无额外支持	不可以	password

处理的方法如下所示：

# 先处理账号相关属性的数据：
[root@www ~]# groupadd mygroup1
[root@www ~]# useradd -G mygroup1 -c "1st user" myuser1
[root@www ~]# useradd -G mygroup1 -c "2nd user" myuser2
[root@www ~]# useradd -c "3rd user" -s /sbin/nologin myuser3

# 再处理账号的口令相关属性的数据：
[root@www ~]# echo "password" | passwd --stdin myuser1
[root@www ~]# echo "password" | passwd --stdin myuser2
[root@www ~]# echo "password" | passwd --stdin myuser3

要注意的地方主要有：myuser1 与 myuser2 都有支持次要群组，但该群组不见得会存在，因此需要先手动创建他！ 
然后 myuser3 是『不可登陆系统』的账号，因此需要使用 /sbin/nologin 这个 shell 来给予，这样该账号就无法登陆啰！ 
这样是否理解啊！接下来再来讨论比较难一些的环境！如果是专题环境该如何制作？

任务二：我的使用者 pro1, pro2, pro3 是同一个项目计划的开发人员，我想要让这三个用户在同一个目录底下工作， 但这三个用户还是拥有自己的家目录与基本的私有群组。
假设我要让这个项目计划在 /srv/projecta 目录下开发， 可以如何进行？

# 1. 假设这三个账号都尚未创建，可先创建一个名为 projecta 的群组，
#    再让这三个用户加入其次要群组的支持即可：
[root@www ~]# groupadd projecta
[root@www ~]# useradd -G projecta -c "projecta user" pro1
[root@www ~]# useradd -G projecta -c "projecta user" pro2
[root@www ~]# useradd -G projecta -c "projecta user" pro3
[root@www ~]# echo "password" | passwd --stdin pro1
[root@www ~]# echo "password" | passwd --stdin pro2
[root@www ~]# echo "password" | passwd --stdin pro3

# 2. 开始创建此项目的开发目录：
[root@www ~]# mkdir /srv/projecta
[root@www ~]# chgrp projecta /srv/projecta
[root@www ~]# chmod 2770 /srv/projecta
[root@www ~]# ll -d /srv/projecta
drwxrws--- 2 root projecta 4096 Feb 27 11:29 /srv/projecta

由于此项目计划只能够给 pro1, pro2, pro3 三个人使用，所以 /srv/projecta 的权限配置一定要正确才行！ 
所以该目录群组一定是 projecta ，但是权限怎么会是 2770 呢还记得第七章谈到的 SGID 吧？
为了让三个使用者能够互相修改对方的文件， 这个 SGID 是必须要存在的喔！
如果连这里都能够理解，嘿嘿！您的账号管理已经有一定程度的概念啰！ ^_^

但接下来有个困扰的问题发生了！
假如任务一的 myuser1 是 projecta 这个项目的助理，他需要这个项目的内容， 但是他『不可以修改』项目目录内的任何数据！
那该如何是好？你或许可以这样做：

将 myuser1 加入 projecta 这个群组的支持，但是这样会让 myuser1 具有完整的 /srv/projecta 的权限， myuser1 是可以删除该目录下的任何数据的！
这样是有问题的；
将 /srv/projecta 的权限改为 2775 ，让 myuser1 可以进入查阅数据。但此时会发生所有其他人均可进入该目录查阅的困扰！ 
这也不是我们要的环境。
真要命！传统的 Linux 权限无法针对某个个人配置专属的权限吗？其实是可以啦！接下来我们就来谈谈这个功能吧！

