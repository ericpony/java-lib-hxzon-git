（hxzon思考）编程中的设计

by hxzon
=======
1，接口，实现继承

继承分“接口继承”和“实现继承”。

接口的意义：契约（用代码来表示契约，对比文档标注，好处是强制）。

“实现继承”只是为了代码复用。
用这种方式来实现复用，大部分时候是因为编程语言有缺陷。
例如“混入”，比实现继承更佳。

----
菱形继承问题（两种实现都匹配）：像clojure的prefer机制，明确指明那种实现优先即可。

----
层级问题：java等通过继承来静态形成层级，
clojure通过元数据，任意地动态地建立层级，不必为了得到层级，而继承，层级只是一种数据分类。



=======
2，异常处理（受检异常，非受检异常，返回错误值）
见《（hxzon思考）异常处理》。

=======
3，编译型和虚拟机型

虚拟机能够提供运行时信息，从而实现动态性。（有性能损耗。）

编译型只能通过代码生成代码（预处理文本宏，模板）？
C++的多态是在编译期？

lisp通过语法宏，在编译期完成语法转换，从而完全不需要运行时的元信息。（最佳？）

go将虚拟机编译进程序当中。

=======
4，类型

提前写上类型，限制了代码的通用性（限制了可用类型）。
但如果事先知道类型限制（包括长度），写上类型有助于优化性能。类似整形长度等信息，编译器是不可能自动推断的。



