（hxzon翻译）Changes to Clojure in Version 1.6.x

by hxzon
（2013.12.16）（2014.3.31）
https://github.com/clojure/clojure/blob/master/changes.md
======

Changes to Clojure in Version 1.6
CONTENTS

========
1 Compatibility and Dependencies，兼容性和依赖。

----
1.1 JDK Version Update
jdk版本升级。

Clojure now builds with Java SE 1.6 and emits bytecode requiring Java SE 1.6 instead of Java SE 1.5. [CLJ-1268]
需要java se 1.6或以上。

----
1.2 ASM Library Update

The embedded version of the ASM bytecode library has been upgraded to ASM 4.1. [CLJ-713]
内嵌的ASM库升级至4.1版本。

----
1.3 Promoted "Alpha" Features

（Promoted，v.<正>促进( promote的过去式和过去分词 )； 提升； 推销； 使 （学生）升级。）

The following features are no longer marked Alpha in Clojure:
以下功能不再是alpha状态。

Watches - add-watch, remove-watch
引用类型的观察器。

Transients - transient, persistent!, conj!, assoc!, dissoc!, pop!, disj!
易变集合。

Exception data - ex-info, ex-data
异常信息。

Promises - promise, deliver
承诺。

Records - defrecord
记录类型。

Types - deftype
普通类型。

Pretty-print tables - print-table
美化打印表格。

========
2 New and Improved Features，新功能或改进。

2.1 Java API
供java使用的api。

The clojure.java.api package provides a minimal interface to bootstrap Clojure access from other JVM languages. 
It does this by providing: 

1. The ability to use Clojure's namespaces to locate an arbitrary var, returning the var's clojure.lang.IFn interface. 

2. A convenience method read for reading data using Clojure's edn reader.

IFns provide complete access to Clojure's APIs. 
You can also access any other library written in Clojure, 
after adding either its source or compiled form to the classpath.

The public Java API for Clojure consists of the following classes and interfaces:

clojure.java.api.Clojure
clojure.lang.IFn

All other Java classes should be treated as implementation details, 
and applications should avoid relying on them.
以上两个包是公开的，其它的类则属于实现细节，请避免直接使用它们。

To look up and call a Clojure function:

IFn plus = Clojure.var("clojure.core", "+");
plus.invoke(1, 2);

Functions in clojure.core are automatically loaded. 
clojure.core的函数是自动加载的。

Other namespaces can be loaded via require:

IFn require = Clojure.var("clojure.core", "require");
require.invoke(Clojure.read("clojure.set"));

IFns can be passed to higher order functions, e.g. the example below passes plus to read:

IFn map = Clojure.var("clojure.core", "map");
IFn inc = Clojure.var("clojure.core", "inc");
map.invoke(inc, Clojure.read("[1 2 3]"));

Most IFns in Clojure refer to functions. 
A few, however, refer to non-function data values. 
To access these, use deref instead of fn:

IFn printLength = Clojure.var("clojure.core", "*print-length*");
Clojure.var("clojure.core", "deref").invoke(printLength);	//解引用

----
2.2 Map destructuring extended to support namespaced keys
映射结构支持有命名空间的键

CLJ-1318
In the past, map destructuring with :keys and :syms 
would not work with maps containing namespaced keys or symbols. 
The :keys and :syms forms have been updated to allow them to match namespaced keys and bind to a local variable based on the name.
现在允许它们匹配有命名空间的键，且绑定到本地变量。

Examples:

(let [m {:x/a 1, :y/b 2}
      {:keys [x/a y/b]} m]
  (+ a b))

(let [m {'x/a 1, 'y/b 2}
      {:syms [x/a y/b]} m]
  (+ a b))

Additionally, the :keys form can now take keywords instead of symbols. 
This provides support specifically for auto-resolved keywords:
而且，:keys 现在可以使用关键字。

(let [m {:x/a 1, :y/b 2}
      {:keys [:x/a :y/b]} m]
  (+ a b))

(let [m {::x 1}
      {:keys [::x]} m]
  x)

----
2.3 New "some" operations

Many conditional functions rely on logical truth 
(where "falsey" values are nil or false). 
Sometimes it is useful to have functions that rely on "not nilness" instead. 
These functions have been added to support these cases [CLJ-1343]:

some? - same as (not (nil? x))

if-some - like if-let, but checks (some? test) instead of test

when-some - like when-let, but checks (some? test) instead of test

----
2.4 Hashing

Clojure 1.6 provides new hashing algorithms for primitives and collections, 
accessible via IHashEq/hasheq (in Java) or the clojure.core/hash function (in Clojure). 
In general, these changes should be transparent to users, 
except hash codes used inside hashed collections like maps and sets will have better properties.

Hash codes returned by the Java .hashCode() method are unchanged 
and continue to match Java behavior or conform to the Java specification as appropriate.

Any collections implementing IHashEq or wishing to interoperate with Clojure collections 
should conform to the hashing algorithms specified in http://clojure.org/data_structures#hash 
and use the new function mix-collection-hash for the final mixing operation. 
Alternatively, you may call the helper functions hash-ordered-coll and hash-unordered-coll.

Any details of the current hashing algorithm not specified on that page should be considered subject to future change.

Related tickets for dev and regressions:

CLJ-1328 Make several Clojure tests independent of ordering

CLJ-1331 Update primitive vectors to use Murmur3 hash

CLJ-1335 Update hash for empty PersistentList and LazySeq

CLJ-1336 Make hashing mixing functions available in Clojure

CLJ-1338 Make Murmur3 class public

CLJ-1344 Update mapHasheq to call Murmur3 algorithm

CLJ-1348 Add hash-ordered-coll and hash-unordered-coll

CLJ-1355 Restore cached hashCode for Symbol and (uncached) hashCode for Keyword

CLJ-1365 Add type hints for new collection hash functions

----
2.5 bitops
位操作。

CLJ-827 - unsigned-bit-shift-right

A new unsigned-bit-shift-right (Java's >>>) has been added to the core library. 
The shift distance is truncated to the least 6 bits (per the Java specification for long >>>).

添加了新函数，无符号右位移。

Examples: 

(unsigned-bit-shift-right 2r100 1) 
;; 2r010 

(unsigned-bit-shift-right 2r100 2) 
;; 2r001 

(unsigned-bit-shift-right 2r100 3) 
;; 2r000

----
2.6 clojure.test

CLJ-866 - test-vars

CLJ-1352 - fix regression in CLJ-866

Added a new clojure.test/test-vars function that takes a list of vars, 
groups them by namespace, and runs them with their fixtures.

添加了一个新方法clojure.test/test-vars 。


========
3 Enhancements，增强。

3.1 Printing，打印。

CLJ-908 Print metadata for functions when print-meta is true and remove errant space at beginning.

CLJ-937 pprint cl-format now supports E, F, and G formats for ratios.
比例数支持使用E，F，G来格式化。

----
3.2 Error messages，改进异常信息。

CLJ-1248 Include type information in reflection warning messages
CLJ-1099 If non-seq passed where seq is needed, 
error message now is an ExceptionInfo with the instance value, retrievable via ex-data.

CLJ-1083 Fix error message reporting for "munged" function names (like a->b).

CLJ-1056 Handle more cases and improve error message for errors in defprotocol definitions.

CLJ-1102 Better handling of exceptions with empty stack traces.

CLJ-939 Exceptions thrown in the top level ns form are reported without file or line number.

----
3.3 Documentation strings，改进文档。

CLJ-1164 Fix typos in clojure.instant/validated and other internal instant functions.

CLJ-1143 Correct doc string for ns macro.

CLJ-196 Clarify value of file is undefined in the REPL.

CLJ-1228 Fix a number of spelling errors in namespace and doc strings.

CLJ-835 Update defmulti doc to clarify expectations for hierarchy argument.

CLJ-1304 Fix minor typos in documentation and comments

CLJ-1302 Mention that keys and vals order are consistent with seq order

----
3.4 Performance，性能。

CLJ-858 Improve speed of STM by removing System.currentTimeMillis.
通过移除System.currentTimeMillis，提升STM速度。

CLJ-669 clojure.java.io/do-copy: use java.nio for Files
使用java nio来复制文件。

commit Reduce overhead of protocol callsites by removing unneeded generated cache fields.

----
3.5 Other enhancements，其它改进。

CLJ-908 Make default-data-reader-fn set!-able in REPL, similar to data-readers.

CLJ-783 Make clojure.inspector/inspect-tree work on sets.

CLJ-896 Make browse-url aware of xdg-open.

CLJ-1160 Fix clojure.core.reducers/mapcat does not stop on reduced? values.
mapcat的错误：没有在reduced? 的值上停止。

CLJ-1121 -> and ->> have been rewritten to work with a broader set of macros.
重新实现这两个串行宏。

CLJ-1105 clojure.walk now supports records.
clojure.walk支持记录类型。

CLJ-949 Removed all unnecessary cases of sneakyThrow.

CLJ-1238 Allow EdnReader to read foo// (matches LispReader behavior).

CLJ-1264 Remove uses of _ as a var in the Java code (causes warning in Java 8).
在java中，不再使用 _ 作为一个var。

CLJ-394 Add record? predicate.

CLJ-1200 ArraySeq dead code cleanup, ArraySeq_short support added.

CLJ-1331 Primitive vectors should implement hasheq and use new hash algorithm
原始类型的向量，需要实现hasheq方法，且使用新的哈希算法。

CLJ-1354 Make APersistentVector.SubVector public so other collections can access

CLJ-1353 Make awt run headless during the build process

========
4 Bug Fixes，bug修复。

CLJ-1018 Make range consistently return infinite sequence of start with a step of 0.
当step为0时，range返回无限列表。

CLJ-863 Make interleave return () on 0 args and identity on 1 args.
interleave，没有参数时返回空列表，有1个参数时返回identity 。

CLJ-1072 Update internal usages of the old metadata reader syntax to new syntax.
内部也使用新的元数据语法，即 #^ 改成 ^ 。

CLJ-1193 Make bigint and biginteger functions work on double values outside long range.
使bigint和biginteger函数在双精度值上正常，当双精度值超出long范围时。

CLJ-1154 Make Compile.java flush but not close stdout so errors can be reported.
不关闭stdout，使得错误能输出。

CLJ-1161 Remove bad version.properties from sources jar.


CLJ-1175 Fix invalid behavior of Delay/deref if an exception is thrown 
- exception will now be rethrown on subsequent calls and not enter a corrupted state.
delay解引用时，如果发生异常，

CLJ-1171 Fix several issues with instance? to make it consistent when used with apply.
instance? 和 apply 一起使用时，不一致。

CLJ-1202 Protocol fns with dashes may get incorrectly compiled into field accesses.
协议的方法名含有下划线时，会错误的编译成字段访问器。

CLJ-850 Add check to emit invokePrim with return type of double or long if type-hinted.

CLJ-1177 clojure.java.io URL to File coercion corrupts path containing UTF-8 characters.

CLJ-1234 Accept whitespace in Record and Type reader forms (similar to data literals).
记录字面量和类型字面量可以包含空白符。

CLJ-1233 Allow ** as a valid symbol name without triggering dynamic warnings.
允许两个星号作为有效的符号名。

CLJ-1246 Add support to clojure.reflect for classes with annotations.
clojure.reflect支持带注解的类。

CLJ-1184 Evaling #{do ...} or [do ...] is treated as do special form.
#{do ...} 和 [do ...] 都视为特殊形式do 。

CLJ-1090 Indirect function calls through Var instances fail to clear locals.
（indirect，间接的。）
通过var实例间接调用函数时，清除本地绑定失败。

CLJ-1076 pprint tests fail on Windows, expecting \n.

CLJ-766 Make into-array work consistently with short-array and byte-array on bigger types.
into-array在字节数组和短整型数组上不一致。

CLJ-1285 Data structure invariants are violated after persistent operations 
when collision node created by transients.

CLJ-1222 Multiplication overflow issues around Long/MIN_VALUE
long最小值做乘法时溢出。

CLJ-1118 Inconsistent numeric comparison semantics between BigDecimals and other numerics
bigDecimal和其它数值之间，数值比较的语义不一致。

CLJ-1125 Clojure can leak memory in a servlet container when using dynamic bindings or STM transactions.
当使用动态绑定，或STM事务时，clojure在servlet容器中可能内存泄露。

CLJ-1082 Subvecs of primitve vectors cannot be reduced

CLJ-1301 Case expressions use a mixture of hashCode and hasheq, potentially leading to missed case matches when these differ.

CLJ-983 proxy-super does not restore original binding if call throws exception

CLJ-1176 clojure.repl/source errors when read-eval bound to :unknown

CLJ-935 clojure.string/trim uses different definition of whitespace than triml and trimr
clojure.string/trim方法对空白符的定义，与triml和trimr不同。

CLJ-1058 StackOverflowError on exception in reducef for PersistentHashMap fold

CLJ-1328 Fix some tests in the Clojure test suite to make their names unique and independent of hashing order

CLJ-1339 Empty primitive vectors throw NPE on .equals with non-vector sequential types

CLJ-1363 Field access via .- in reflective case does not work

CLJ-944 Compiler gives constant collections types which mismatch their runtime values

CLJ-1387 reduce-kv on large hash maps ignores reduced result

