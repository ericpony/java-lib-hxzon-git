《On Lisp》-前言

On Lisp 中文版
Common Lisp 高级编程技术
Paul Graham
Copyright  2007 Paul Graham
原书站点: http://www.paulgraham.com/onlisp.html

==============
译者序

《On Lisp》不是一本 Lisp 的入门教材，
它更适合读过 《ANSI Common Lisp》 或者 《Practical Common Lisp》的 Lisp 学习者。
它对 Lisp 宏本身及其使用做了非常全面的说明，同时自底向上的编程思想贯穿全书，
这也是本书得名的原因，即，基于 Lisp，扩展 Lisp。

原作者 Paul Graham 同时也是《ANSI Common Lisp》一书的作者。

《On Lisp》成书早在 1994 年 ANSI Common Lisp 标准发布以前，
书中使用了许多古老的 Lisp 操作符，其中一些代码已经无法在最新的 Common Lisp 平台上执行了。
所以译文里所有的源代码都被改成了符合现行 Common Lisp 标准的形式，
凡译者修改过的地方都会以脚注的形式注明。

我要特别感谢来自 AMD/ATI 的 Kov Chai 同学，
他独立翻译了第 5， 6， 22， 23， 25 章及附录，并对全书进行了细致的校对。
另外 Kov Chai 还主导了本书的 LATEX 排版工作。

感谢 Yufei Chen 同学提供改进排版的补丁。
他还参与了第 21 章的翻译工作。
Mathematical Systems, Inc. 的 Lisp 程序员 Jianshi Huang? 同学是我最初翻译本书时的合作者，
他翻译了第 24章，并初步校对了本书前三章。

Chun TIAN (binghe)
NetEase.com, Inc.

==============
前言

本书适用于那些想更上一层楼的 Lisp 程序员。
书中假设读者已经初步了解 Lisp，但不要求有丰富的编程经验。
最初几章里会重温很多基础知识。
我希望这些章节也会让有经验的 Lisp 程序员感兴趣，因为它们以崭新的视角展示了熟知的主题。

通常很难一语道清一门编程语言的精髓，但 John Foderato 的话已经很贴切了： 
Lisp 是一门可编程的编程语言。(Lisp is a programmable programming language.)
这难免以偏概全，但这种让 Lisp 随心而变的能力，在很大程度上正是 Lisp 专家和新手的不同之处。
在自上而下，把程序逐渐具体化，用编程语言实现设计的同时，
资深的 Lisp 程序员也实践着自底向上的方法，他们通过创建语言来描述程序的行为。
本书教授自底向上编写程序的方法，因为这是 Lisp 与生俱来的强项。

自底向上的设计 (Bottom-up Design)

随着软件复杂度的增长，自底向上设计的重要性也日益提高。
今天的程序可能不得不面对极其复杂甚至开放式的需求。
在这种情况下，传统的自上而下方法有时会失效。
一种新的编程风格应运而生，它和当前大部分计算机科学课程的思路截然不同: 
一个自底向上的程序由一系列的层写成，每一层都作为更高一层的编程语言。
X Window 和 TEX 就是这种程序设计风格的典范。

本书有两层主题: 
首先，对以自底向上的方法编制的程序来说， Lisp 语言是不二之选，
反过来，编写 Lisp 程序的话，采用自底向上的编程风格也是理所当然的。
因此《On Lisp》将吸引两类读者。
对于那些有兴趣编写可扩展程序的人，本书将告诉你如果有了合适的语言，你能做些什么。
对于 Lisp 程序员来说，本书提供了第一手的实践指南，指引他们把 Lisp 的优势发挥到极致。

本书选用现在的这个书名是为了强调自底向上编程对于 Lisp 的重要性。
你不再仅仅是用 Lisp 编写程序，
在 Lisp 之上 (On Lisp)，你可以构造自己的语言，然后再用这个语言来写程序。

尽管用任何语言都可以写出自底向上风格的程序，但 Lisp 对于这种编程风格来说是最自然的载体。
在 Lisp里，自底向上的设计并不是那种仅为少见的大型程序或者高难程序服务的专门技术。
任何规模的程序都可以在一定程度上以这种方式编写。
Lisp 从一开始就被设计成可扩展的语言。
这种语言本身基本上就是一个 Lisp 函数的集合，这些函数和你自己定义的没有本质区别。
更进一步， Lisp 函数可以表达成列表，而列表同时也是 Lisp 的数据结构。
这就意味着你可以写出能生成 Lisp 代码的 Lisp 函数。

一个好的 Lisp 程序员必须懂得如何利用上述这种可能性。
通常的途径是定义一种称为宏的操作符。
驾驭宏是从编写正确的 Lisp 程序走向编写漂亮的程序过程中最重要的一步。
入门级 Lisp 书籍给宏留下的篇幅仅限于一个宏的简短的概述: 
解释一下宏是什么，加上几个例子蜻蜓点水地提一下，说能用它实现一些奇妙的东西。
不过本书会给予这些奇妙的东西特别的重视。
这里的目标之一就是把所有关于宏的知识作一次总结，
在以往，人们只能从使用宏的经验和教训中来吸取这些知识。

一般来说， Lisp 的入门读物都不会强调 Lisp 和其他语言的区别，这情有可原。
它们必须想办法把知识传授给那些被教育成只会用 Pascal 术语来构思程序的学生。
如果非要细究这些区别的话，只会把问题复杂化:
例如 defun 虽然看起来像一个过程定义，
但实际上，它是一个编写程序的程序，这个程序生成了一段代码，
而这段代码新建了一个函数对象，然后用函数定义时给出的第一个参数作为这个函数对象的索引。

本书的目的之一就是解释究竟是什么使 Lisp 不同于其他语言。
刚落笔时，我心里明白，同等条件下自己会更倾向于用 Lisp 而不是 C、 Pascal 或 Fortran 来写程序。
我也知道这不只是个人好恶的问题。
但当意识到就要郑重其事地告诉大家 Lisp 语言在某些方面更优秀时，
我发现应该做好准备，说说到底为什么。

曾有人问 Louis Armstrong 什么是爵士乐，他答道 “如果你问爵士乐是什么，那你永远不会知道。” 
但他确实以一种方式回答了这个问题：他向世人展示了什么是爵士乐。
同样也只有一种方式来解释 Lisp 的威力，就是演示那些对于其他语言来说极其困难甚至不可能实现的技术。
多数关于编程的书籍，包括 Lisp 编程书籍，采用的都是那些你可以用任何其它语言编写的程序。
《On Lisp》涉及的多是那些只能用 Lisp 写的程序。
可扩展性，自底向上程序设计，交互式开发，源代码转换，嵌入式语言，
这些都是 Lisp 展示其高级特性的舞台。

当然从理论上讲，任意图灵等价的编程语言能做的事，其它任何语言都可以做到。
但这种能力和编程语言的能力却完全是两码事。
理论上，任何你能用编程语言做到的事，也可以用图灵机来做，但实际上在图灵机上编程得不偿失。

所以，当我说这本书是关于如何做那些其他语言力所不及的事情的时候，
我并非指数学意义上的 “不可能”，而是从编程语言的角度出发的。
这就是说，如果你不得不用 C 来写本书中的一些程序，你可能需要先用 C 写一个 Lisp 编译器。
举个例子，在 C 语言里嵌入 Prolog 你能想象这需要多少工作量吗? 
第 24 章将说明如何用 180 行 Lisp 做到这一点。

尽管我希望能比单单演示 Lisp 的强大之处做得更多。
我也想解释为何 Lisp 与众不同。
这是一个更微妙的问题，这个问题是那么难回答，它无法使用诸如 “符号计算” 这样的术语来搪塞。
我将尽我所学，尽可能清楚明白地解释这些问题。


本书规划

由于函数是 Lisp 程序的基础，所以本书开始的几章是有关函数的。
第 2 章解释 Lisp 函数究竟是什么，以及它们带来了何种可能。
第 3 章讨论函数型编程的优点，这是 Lisp 程序最主要的风格。
第 4 章展示如何用函数来扩展 Lisp。
第 5 章建议了一种新的抽象方式，即返回其他函数的函数。
最后，第 6 章显示了怎样使用函数来取代传统的数据结构。

本书剩下的篇幅则更加关注宏。
一部分原因是因为宏本身的内容就更多些，一部分是因为至今尚无著作完整地介绍过宏的方方面面。
第 7–10 章构成了一套关于宏技术的完整教程。
学完这个教程后，你将了解一个有经验的 Lisp 程序员所知的关于宏的大多数内容: 
它们如何工作；怎样定义，测试，以及调试它们；何时应该使用以及何时不应该使用宏；
宏的主要类型；怎样写生成宏展开代码的程序；宏风格一般如何区别于 Lisp风格；
以及怎样甄别和改正每一种宏特有的问题。

在这套宏教程之后，第 11–18 章展示了一些可以用宏来构造的强有力的抽象机制。
第 11 章展示如何写典型的宏 那些创造上下文，或者实现循环或条件判断的宏。
第 12 章解释宏在操作普通变量中的角色。
第 13 章展示宏如何通过将计算转移到编译期来使程序运行得更快。
第 14 章介绍了指代 (anaphoric) 宏，它允许你在程序里使用代词。
第 15 章展示了宏如何为第 5 章里定义的函数生成器提供一个更便利的接口。
第 16 章展示了如何使用定义宏的宏来让 Lisp 为你写程序。
第 17 章讨论读取宏 (read-macro)，以及第 18 章，解构宏。

第 19 章开始了本书的第四部分，这一部分的重点是嵌入式语言。
第 19 章通过展示同一个程序，一个回答数据库查询的程序，
先是用解释器，然后用真正的嵌入式语言，来介绍这一主题。

第 20 章展示了如何将续延 (continuation) 的概念引入 Common Lisp 程序，
这是一种描述延续性计算的对象。
续延是一个强有力的工具，可以用来实现多进程和非确定性选择。
至于如何把这些控制结构嵌入到 Lisp 中，第 21 和 22 章将对此进一步展开讨论。
非确定性听上去好像是一种具有非同寻常能力的抽象机制，它让你的程序似乎能未卜先知。
第 23 和 24 章展示了两种嵌入式语言，它们证明了非确定性绝非浪得虚名: 
一个完整的 ATN 解析器，以及一个嵌入式 Prolog，总共才 200 行代码。 

这些程序的长短本身并没有什么意义。
如果你喜欢写像天书一样的程序，没人知道你用 200 行代码能写出什么。
关键在于，这些程序并非靠编程技巧才变得短小，而是由于它们是以 Lisp 所固有的，自然的方式写成的。
第 23 和 24 章的用意并不是教授如何用一页代码实现 ATN 解析器或者用两页实现 Prolog，
而是想说明这些程序，当给出它们最自然的 Lisp 实现的时候是如此的简洁。
后面这两个章节的嵌入式语言用实例证明了我开始时的两个观点: 
Lisp 对于以自底向上的编程风格来说是一种自然的语言，
同时自底向上的编程风格也是编写 Lisp 程序理所当然的方式。

本书以关于面向对象编程的讨论做结，
其中特别讨论了 CLOS， Common Lisp 对象系统。
把这一主题留到最后，
我们可以更加清楚地看到，面向对象的编程方式是一种扩展，
这种扩展植根于一些早已存在于 Lisp 的思想之上。
它是多种可以建立在 Lisp 上的抽象之一。

自成一章的附注始于第 267 页。
这些注释里包括参考文献，补充或者替换的代码，
或者是有关 Lisp，但和当前主题没有直接联系的一些文字。
注释是用页面留白上的小圆圈标注出来的，就像这样。
另外还有一个 关于包 (package) 的附录，在第 263 页。

去纽约逛一圈或许对世界上的多数文化会有走马观花的了解，
同样，在把 Lisp 作为一门可扩展编程语言来学习也能接触到大部分的 Lisp 技术。
这里描述的大多数技术通常都已为 Lisp 社区所熟知，但很多内容至今也没有在任何地方有记载。
而有些问题，例如宏的作用或变量捕捉的本质，
甚至对于许多很有经验的 Lisp 程序员来说也只是一知半解。


示例

Lisp 是个语言家族。
由于 Common Lisp 仍然是广泛使用的方言，本书的大部分示例都是使用 Common Lisp编写的。
在 1984 年， Guy Steele 的 Common Lisp: the Language (CLTL1) 首次定义了这门语言。
1990 年，该书第二版 (CLTL2) 出版以后，这一定义被取而代之， CLTL2 可能会让位于将来的 ANSI 标准。 

本书包含数百个示例，小到简单的表达式，大至可运行的 Prolog 实现。
书中代码的编写，尽量照顾到了各个细节，使得它们可以在任何版本的 Common Lisp 上运行。
有极少数例子需要用到 CLTL1 规范之外的特性，这些示例将会在正文中加以明确的标识。
最后几个章节里包括了一些 Scheme 的示例代码，这些代码也会有清楚的标记。

所有代码可以通过匿名 FTP 从 endor.harvard.edu 下载，在 pub/onlisp 目录里。
问题和评论可以发到 onlisp@das.harvard.edu。


致谢

写此书时，我要特别感谢 Robert Morris 的帮助。
我经常去向他寻求建议，每次都会满载而归。
本书的一些示例代码就来自他，包括 85 页上的一个 for 版本， 130 页上的 aand 版本， 
163 页的 match， 209 页的广度优先 true-choose，以及第 24.2 节的 Prolog 解释器。
事实上，
整本书都反映 (有时基本是抄录) 了过去七年来我跟 Robert 之间的对话。
(谢谢你， rtm！)

我还要特别感谢 David Moon，他仔细阅读了大部分手稿并且给出许多非常有用的评论。
第 12 章是按照他的建议完全重写了的， 80 页关于变量捕捉的示例代码也是他提供的。

我很幸运地拥有 David Touretzky 和 Skoma Brittain 两位技术审稿人。
有些章节就是在他们的建议下追加或者重写的。
第 275 页给出的另一个非确定性选择操作符就出自 David Toureztky 的一个建议。

还有一些人欣然阅读了部分或全部手稿，他们是 Tom Cheatham， 
Richard Draves (他在 1985 年也帮助重写了 alambda 和 propmacro)， 
John Foderaro， David Hendler， George Luger， Robert Muller， Mark Nitzberg，
以及 Guy Steele。

我感谢 Cheatham 教授以及整个哈佛，他们为我提供了撰写此书的条件。
也感谢 Aiken 实验室的全体成员，
包括 Tony Hartman， Janusz Juda， Harry Bochner，以及 Joanne Klys。

Prentice Hall 的工作人员干得非常出色。
我为与 Alan Apt 这位优秀的编辑和好伙伴一起共事感到幸运。
同时也感谢 Mona Pompili， Shirley Michaels，
以及 Shirley McGuire 的组织工作和他们的幽默。
剑桥 Bow and Arrow 出版社的无与伦比的 Gino Lee 制作了封面。
封面上的那棵树暗示了第 18 页上的观点。

本书使用 LATEX 排版，这是一种由 Leslie Lamport 在 Donald Knuth 的 TEX 基础上设计的语言，
另外使用了来自 L. A. Carr， Van Jacobson 和 Guy Steele 的宏。
插图由 John Vlissides 和 Scott Stanton 设计的 idraw 完成。
整本书用 L. Peter Deutsch 的 Ghostscript 生成之后，在 Tim eisen 的 Ghostview 里预览。
Chiron Inc. 公司的 Gary Bisbee 制作了能用来进行照相制版的拷贝。

我要感谢其他许多人，包括 Paul Becker， Phil Chapnick， Alice Hartley， Glenn Holloway， Meichun Hsu， 
KrzysztofLenk， Arman Maghbouleh， Howard Mullings， Nancy Parmet， 
Robert Penny， Gary Sabot， Patrick Slaney， Steve
Strassman， Dave Watkins， Weickers 一家，还有 Bill Woods。

最后，我要感谢我的父母，谢谢他们为我树立的榜样还有对我的鼓励；
还有 Jackie，要是我听得进他说的话，或许能学到点什么。

我希望阅读此书是件乐事。
在所有我知道的语言中， Lisp 是我的最爱，只因它是最优美的。
本书着眼于最 Lisp 化的 Lisp。
写作这本书的过程充满了乐趣，愿你在阅读此书时能感同身受。

Paul Graham

