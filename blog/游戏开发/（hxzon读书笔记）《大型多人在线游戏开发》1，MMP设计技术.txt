（hxzon读书笔记）《大型多人在线游戏开发》1，MMP设计技术

by hxzon
=======
《1，MMP设计技术》

（2013.11.08）

《1.1，《卡通城在线》：面向大众的大型多人游戏》
《1.1.2，社会性问题》
降低血腥暴力程度，例如生命值改成“笑槽”，死亡改成“需要休息重获开心值”。

=======
《1.2，每个人都需要某个人：怎样让在线游戏玩家进行合作》

=======
《1.3 ，MMP游戏中的游戏平衡》
《为游戏中的数值建立基线》
《为数值编写模拟程序》
《建立游戏中的度量》
跟踪是否失衡：
-1，玩家升级，都停留在某个等级上，是否某个地方太多困难。
-2，物品使用，哪个物品总是使用，哪个物品总是没人用。
-3，动作，大部分时间花在怪物作战上还是制造武器上，或者治疗时间上。


=======
《1.4，使用支付矩阵来设计游戏》

《1.4.1，什么是支付矩阵》

囚徒困境：两个囚犯都招供具有一个特性，那就是在另一个参与者没有改变策略的前提下，任何一个参与者都不会选择离开这个状态。（这称为“纳什平衡”）。

必须注意纳什平衡并不考虑一个序列中的多个转换。

《1.4.6，延迟和停止》
定义每个状态所需最少和最多的时间，然后为每个状态添加一个转换表（下一步可进入哪些状态）。

《1.4.7，自动化》
支付矩阵可看做是两个相交的状态机，玩家1的状态机沿着左边显示，
玩家2的状态机沿着上方显示，两个状态机的交集就是支付信息。
一个玩家控制列状态的变化，另一个玩家控制行状态的变化。

估价函数：耗费或是获得的资源，当前状态（包括生命值）的增加减少
以及这些动作对朋友和敌人的能力的影响。

========
《1.5，使用用例来描述游戏行为》

有效降低二义性。
《1.5.4，如何识别用例》
对角色和事件的识别。

-1，角色。与其把玩家本身作为一个角色来建模，还不如把玩家所控制的人物作为一个角色来建模更有用。
把独立的由计算机控制的实体，如怪物，NPC以及车辆作为角色处理时有益的。
使用这个方法可以把涉及多个实体的复杂行为链变成角色之间的离散交互。

-2，事件。从总体上看，用例是由角色发起的事件继承而来的。
对这些事件进行列表，每个事件提供一句话的描述。

《1.5.5，用例中的元素：一个标准模板》

-1，标题。
-2，描述。
-3，基本过程。用例的核心是它的步骤列表。用例开始成形了。
-4，从一个用例中引用另一个用例。
-5，扩展。用来描述用例中的一些步骤，这些步骤的行为会随着某些条件的改变而改变。
扩展包括了错误处理和非异常状态下的分支逻辑。
应该在基本过程中的步骤以不带有任何扩展的直接序列方式列出。
如果一个扩展需要使用很多步骤来描述一个比较详细的执行过程，那么创建一个新的用例更为合适。
或者创建一个独立的部分。

-6，前提条件和后置条件。用来保证系统的完整性。
本书不推荐使用可选的后置条件，因为这意味着存在被忽略的扩展。

-7，注释。用来捕捉过于冗长，或不适合放在其他地方的细节。
《1.5.7，开始实现》
-1，候选抽象概念。用例的每个步骤都是一个具有主语和谓语的句子，通常还有一个宾语。
-2，对抽象概念的分析。回顾玩家角色攻击怪物这一用例，并且颠倒这两个角色来看看会发生什么情况。也许可以发现一个更高层次的抽象概念。
-3，开发一个类结构。

《1.5.9，用例的指导方针》
-1，描写问题，而不是解决方案。
-2，迭代。不断调整推敲。
-3，面对面合作，用例是一种交流工具。
-4，不要指望用例可以捕获所有需求。
用例不能对安全性、性能、网络延迟、侵入预防、过程控制等进行建模。
-5，交流。
-6，使用用例进行计划。每个用例都代表了开发工作中一个相当小的可管理单元。
-7，避免线性思考。
-8，不要过于强调工具。
-9，把重点放在清晰的交流上而不是格式上。
-10，避免把注意力集中在客户端服务器的细节上。
-11，把游戏和用户界面分离开。
常犯错误，在一个描述游戏行为的用例中描述用户界面交互。
-12，不要强求完全的覆盖。
有些技术领域（数据库，网络，进程管理这样的底层架构领域）早已被实现者良好的理解了。

=============
（2013.11.11）
《1.6，使用生命值来设计转换因子》

《1.6.1，武器的价值》
根据物品损坏前所能造成的所有伤害来决定其价格，而不只是把价格建立在其造成伤害的速度上。

公式：

价值=攻击次数*（损坏后的平均攻击力+（全新时的平均攻击力-损坏后的平均攻击力）/2）。

修复成本=基本成本*损坏百分比的平方。

《1.6.3，从npc获得的战利品》

战利品参考价值=玩家武器的损坏+玩家防具的损坏。
战利品价值=2*玩家武器的损坏。
玩家武器的损坏=战利品价值/2。
玩家武器的损坏=npc受到的伤害+npc防具的损坏。
战利品价值=2*（npc受到的伤害+npc防具的损坏）。

如果掉出战利品有概率，必须同时考虑概率以及损坏量。

《1.6.4，制造业》
如果游戏中有贸易功能并且允许玩家制造武器。

如果发现部件成本太低，可以通过增加制造过程中的人力成本来进行调整。

《1.6.6，检验》
应该对所有的贸易进行记录，并且把玩家之间的交易价格和预设价格进行比较。
如果某个物品的价格和玩家之间的交易价格不同，或是该物品的交易量突然上下起伏，就可以明确知道，为它制定的价格是错误的。

=======
（2013.11.15）
《1.7，在MMP游戏设计中加入故事情节》
角色升级系统。
完全基于机械性角色升级的游戏会让他们丧失人类喜欢戏剧性和故事的本能。

《1.7.4，挑战更多的认知能力》
把一个纯粹游戏当做一个纯粹游戏来玩，涉及一个特定的认知能力集合（反应、观察能力以及空间和逻辑智能）。
而把一个剧情游戏当做一个剧情游戏来玩，涉及一个不同的认知能力集合（社交、叙事、情感智能）。
《1.7.6，为MMP游戏模式加入故事情节》
-1，把角色升级作为故事。
但是大多数玩家最终还是为了获得更大利益而进行游戏的。
社会名誉本身就具有故事性。
-2，发掘戏剧性场景。
《1.7.7，公共目标》
-3，创建持久的动态场景。

玩家会发现他们不仅能发现故事，而且所发现的故事是由他们自己塑造出来的。

=======
《1.8，客户服务和玩家声望：一切都和信任有关》
捣乱的玩家。
声望：由别人来对那个被讨论的人作出评价。
声望系统不仅可以用来阻止尽可能多的不良行为，还可以用来鼓励和奖赏游戏社区中的良好行为。
如果在某个情况下，善意的行为相对于粗鲁的行为来说更有利，那么事后对行为动机进行指责并没有什么意义。

声望不仅要鼓励正常行为，还应当阻止恶意行为：
-1，必须给那些公认的“坏”人一些惩罚，以促使他们改变或者把他们从游戏社会中赶走。
-2，在玩家指控其它玩家的不良行为时，他必须小心的斟酌他的决定。

不能以偏概全。
-1，要判断一个玩家的好坏，不能只根据几个人的说法，而要根据他们对社会的实际影响。
-2，要根据玩家的行为模式来判断他们是不是长期地捣乱。

《1.8.9，当前使用的行为模式跟踪方法》
阿佛加多信任度量是一个用来处理大型社会交互的系统。
贝叶斯分析也可以给出解答。
图1-19。
《1.8.10，更多的问题》
虽然有很多合理的理由可以让玩家具有不同的角色和个性，但是允许一个玩家在游戏服务中保留两个独立的声望所带来的好处并不比坏处多。

能力是信任的基础，而不是信任的替代。

（第1章结束。）



