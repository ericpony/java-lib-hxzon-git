（hxzon翻译）Changes to Clojure in Version 1.6.x

by hxzon
（2013.12.16）
https://github.com/clojure/clojure/blob/master/changes.md
======

Changes to Clojure in Version 1.6
CONTENTS

1 Compatibility and Dependencies，兼容性和依赖。

1.1 JDK Version Updates

Clojure now builds with Java SE 1.6 and emits bytecode requiring Java SE 1.6 instead of Java SE 1.5. [CLJ-1268]

1.2 Promoted "Alpha" Features
（Promoted，v.<正>促进( promote的过去式和过去分词 )； 提升； 推销； 使 （学生）升级。）

The following features are no longer marked Alpha in Clojure:
以下功能不再是alpha状态。

Watches - add-watch, remove-watch

Transients - transient, persistent!, conj!, assoc!, dissoc!, pop!, disj!
易变集合。

Exception data - ex-info, ex-data
Promises - promise, deliver

Records - defrecord
Types - deftype

Pretty-print tables - print-table

========
2 New and Improved Features，新功能或改进。

2.1 Java API

The clojure.api package provides a minimal interface to bootstrap Clojure access from other JVM languages. 
It does this by providing: 
1. The ability to use Clojure's namespaces to locate an arbitrary var, returning the var's clojure.lang.IFn interface. 
2. A convenience method read for reading data using Clojure's edn reader

IFns provide complete access to Clojure's APIs. 
You can also access any other library written in Clojure, 
after adding either its source or compiled form to the classpath.

The public Java API for Clojure consists of the following classes and interfaces:

clojure.api.API
clojure.lang.IFn

All other Java classes should be treated as implementation details, 
and applications should avoid relying on them.
以上两个包是公开的，其它的类则属于实现细节，避免直接使用它们。

To lookup and call a Clojure function:

IFn plus = API.var("clojure.core", "+");
plus.invoke(1, 2);

Functions in clojure.core are automatically loaded. 
clojure.core的函数是自动加载的。

Other namespaces can be loaded via require:

IFn require = API.var("clojure.core", "require");
require.invoke(API.read("clojure.set"));

IFns can be passed to higher order functions, e.g. the example below passes plus to read:

IFn map = API.var("clojure.core", "map");
IFn inc = API.var("clojure.core", "inc");
map.invoke(inc, API.read("[1 2 3]"));

Most IFns in Clojure refer to functions. 
A few, however, refer to non-function data values. 
To access these, use deref instead of fn:

IFn printLength = API.var("clojure.core", "*print-length*");
API.var("clojure.core", "deref").invoke(printLength);

2.2 bitops

CLJ-827 - unsigned-bit-shift-right
A new unsigned-bit-shift-right (Java's >>>) has been added to the core library. 
The shift distance is truncated to the least 6 bits (per the Java specification for long >>>).
添加了新函数，无符号右位移。

Examples: 

(unsigned-bit-shift-right 2r100 1) 
;; 2r010 

(unsigned-bit-shift-right 2r100 2) 
;; 2r001 

(unsigned-bit-shift-right 2r100 3) 
;; 2r000

2.3 clojure.test

CLJ-866 - test-vars
Added a new clojure.test/test-vars function that takes a list of vars, 
groups them by namespace, and runs them with their fixtures.
添加了一个新方法clojure.test/test-vars 。

========
3 Enhancements，增强。

3.1 Printing，打印。

CLJ-908 Print metadata for functions when print-meta is true and remove errant space at beginning.

CLJ-937 pprint cl-format now supports E, F, and G formats for ratios.

3.2 Error messages，改进异常信息。

CLJ-1099 If non-seq passed where seq is needed, 
error message now is an ExceptionInfo with the instance value, retrievable via ex-data.

CLJ-1083 Fix error message reporting for "munged" function names (like a->b).

CLJ-1056 Handle more cases and improve error message for errors in defprotocol definitions.

CLJ-1102 Better handling of exceptions with empty stack traces.

CLJ-939 Exceptions thrown in the top level ns form are reported without file or line number.

3.3 Documentation strings，改进文档。

CLJ-1164 Fix typos in clojure.instant/validated and other internal instant functions.

CLJ-1143 Correct doc string for ns macro.

CLJ-196 Clarify value of file is undefined in the REPL.

CLJ-1228 Fix a number of spelling errors in namespace and doc strings.

CLJ-835 Update defmulti doc to clarify expectations for hierarchy argument.

3.4 Performance，性能。

CLJ-858 Improve speed of STM by removing System.currentTimeMillis.

CLJ-669 clojure.java.io/do-copy: use java.nio for Files

3.5 Other improvements，其它改进。

CLJ-908 Make default-data-reader-fn set!-able in REPL, similar to data-readers.

CLJ-783 Make clojure.inspector/inspect-tree work on sets.

CLJ-896 Make browse-url aware of xdg-open.

CLJ-1160 Fix clojure.core.reducers/mapcat does not stop on reduced? values.

CLJ-1121 -> and ->> have been rewritten to work with a broader set of macros.

CLJ-1105 clojure.walk now supports records.

CLJ-949 Removed all unnecessary cases of sneakyThrow.

CLJ-1238 Allow EdnReader to read foo// (matches LispReader behavior).

CLJ-1264 Remove uses of _ as a var in the Java code (causes warning in Java 8).

========
4 Bug Fixes，bug修复。

CLJ-1018 Make range consistently return () with a step of 0.
当step为0时，range返回空列表。

CLJ-863 Make interleave return () on 0 args and identity on 1 args.

CLJ-1072 Update internal usages of the old metadata reader syntax to new syntax.

CLJ-1193 Make bigint and biginteger functions work on double values outside long range.
使bigint和biginteger函数在双精度值上正常，当双精度值超出long范围时。

CLJ-1154 Make Compile.java flush but not close stdout so errors can be reported.

CLJ-1161 Remove bad version.properties from sources jar.

CLJ-1175 Fix invalid behavior of Delay/deref if an exception is thrown 
- exception will now be rethrown on subsequent calls and not enter a corrupted state.

CLJ-1171 Fix several issues with instance? to make it consistent when used with apply.

CLJ-1202 Protocol fns with dashes may get incorrectly compiled into field accesses.

CLJ-850 Add check to emit invokePrim with return type of double or long if type-hinted.

CLJ-1177 clojure.java.io URL to File coercion corrupts path containing UTF-8 characters.

CLJ-1234 Accept whitespace in Record and Type reader forms (similar to data literals).
记录字面量和类型字面量可以包含空白符。

CLJ-1233 Allow ** as a valid symbol name without triggering dynamic warnings.

CLJ-1246 Add support to clojure.reflect for classes with annotations.

CLJ-1184 Evaling #{do ...} or [do ...] is treated as do special form.
#{do ...} 和 [do ...] 都视为特殊形式do 。

CLJ-1090 Indirect function calls through Var instances fail to clear locals.
（indirect，间接的。）

CLJ-1076 pprint tests fail on Windows, expecting \n.

CLJ-766 Make into-array work consistently with short-array and byte-array on bigger types.

CLJ-1285 Data structure invariants are violated after persistent operations when collision node created by transients.

CLJ-1222 Multiplication overflow issues around Long/MIN_VALUE

CLJ-1118 Inconsistent numeric comparison semantics between BigDecimals and other numerics
bigDecimal和其它数值之间，数值比较的语义不一致。

