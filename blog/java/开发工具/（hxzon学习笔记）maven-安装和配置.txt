（hxzon学习笔记）maven-安装和配置

http://hzbook.group.iteye.com/group/wiki/2872-Maven-in-action

摘要：

$M2_HOME/conf/settings.xml ，全局配置文件，最好不要改动。

~/.m2/settings.xml ，用户私人的配置文件。

设置http代理（无法直接访问外网）。

=====
《2.3 安装目录分析》

本章前面的内容讲述了如何在各种操作系统中安装和升级Maven。
现在我们来仔细分析一下Maven的安装文件。

----
2.3.1 M2_HOME

前面我们讲到设置M2_HOME环境变量指向Maven的安装目录，
本书之后所有使用M2_HOME的地方都指代了该安装目录，让我们看一下该目录的结构和内容：

bin
boot
conf
lib
LICENSE.txt
NOTICE.txt
README.txt

Bin： 

该目录包含了mvn运行的脚本，这些脚本用来配置Java命令，准备好classpath和相关的Java系统属性，然后执行Java命令。
其中mvn是基于UNIX平台的shell脚本，mvn.bat是基于Windows平台的bat脚本。
在命令行输入任何一条mvn命令时，实际上就是在调用这些脚本。
该目录还包含了mvnDebug和mvnDebug.bat两个文件，同样，前者是UNIX平台的shell脚本，后者是windows的bat脚本。
那么mvn和mvnDebug有什么区别和关系呢？
打开文件我们就可以看到，两者基本是一样的，
只是mvnDebug多了一条MAVEN_DEBUG_OPTS配置，作用就是在运行Maven时开启debug，以便调试Maven本身。
此外，该目录还包含m2.conf文件，这是classworlds的配置文件，稍微会介绍classworlds。

Boot： 

该目录只包含一个文件，以maven 3.0为例，该文件为plexus-classworlds-2.2.3.jar。
plexus-classworlds是一个类加载器框架，相对于默认的java类加载器，它提供了更丰富的语法以方便配置，
Maven使用该框架加载自己的类库。
更多关于classworlds的信息请参考http://classworlds.codehaus.org/。
对于一般的Maven用户来说，不必关心该文件。

Conf： 

该目录包含了一个非常重要的文件settings.xml。
直接修改该文件，就能在机器上全局地定制Maven的行为。
一般情况下，我们更偏向于复制该文件至~/.m2/目录下（这里~表示用户目录），然后修改该文件，在用户范围定制Maven的行为。
本书的后面将会多次提到该settings.xml，并逐步分析其中的各个元素。

Lib： 

该目录包含了所有Maven运行时需要的Java类库，Maven本身是分模块开发的，
因此用户能看到诸如mavn-core-3.0.jar、maven-model-3.0.jar之类的文件，
此外这里还包含一些Maven用到的第三方依赖如common-cli-1.2.jar、google-collection-1.0.jar等等。
（对于Maven 2来说，该目录只包含一个如maven-2.2.1-uber.jar的文件原本各为独立JAR文件的Maven模块和第三方类库都被拆解后重新合并到了这个JAR文件中）。
可以说，这个lib目录就是真正的Maven。
关于该文件，还有一点值得一提的是，用户可以在这个目录中找到Maven内置的超级POM，这一点在8.5小节详细解释。

----
2.3.2 ~/.m2

在讲述该小节之前，我们先运行一条简单的命令：mvn help:system。
该命令会打印出所有的Java系统属性和环境变量，这些信息对我们日常的编程工作很有帮助。
这里暂不解释help:system涉及的语法，运行这条命令的目的是为了让Maven执行一个真正的任务。
我们可以从命令行输出看到Maven会下载maven-help-plugin，包括pom文件和jar文件。
这些文件都被下载到了Maven本地仓库中。

现在打开用户目录，比如当前的用户目录是C:\Users\Juven Xu\，你可以在Vista和Windows7中找到类似的用户目录。
如果是更早版本的Windows，该目录应该类似于C:\Document and Settings\Juven Xu\。
在基于Unix的系统上，直接输入cd 回车，就可以转到用户目录。
为了方便，本书统一使用符号 ~ 指代用户目录。

在用户目录下，我们可以发现.m2文件夹。
默认情况下，该文件夹下放置了Maven本地仓库.m2/repository。
所有的Maven构件（artifact）都被存储到该仓库中，以方便重用。

我们可以到~/.m2/repository/org/apache/maven/plugins/maven-help-plugins/目录下找到刚才下载的maven-help-plugin的pom文件和jar文件。
Maven根据一套规则来确定任何一个构件在仓库中的位置，这一点本书第6章将会详细阐述。
由于Maven仓库是通过简单文件系统透明地展示给Maven用户的，
有些时候可以绕过Maven直接查看或修改仓库文件，在遇到疑难问题时，这往往十分有用。

默认情况下，~/.m2目录下除了repository仓库之外就没有其他目录和文件了，
不过大多数Maven用户需要复制M2_HOME/conf/settings.xml文件到~/.m2/settings.xml。
这是一条最佳实践，我们将在本章最后一小节详细解释。

=====
《2.4 设置HTTP代理》
 
有时候你所在的公司由于安全因素考虑，要求你使用通过安全认证的代理访问因特网。
这种情况下，就需要为Maven配置HTTP代理，才能让它正常访问外部仓库，以下载所需要的资源。

首先确认自己无法直接访问公共的Maven中央仓库，直接运行命令ping repo1.maven.org可以检查网络。
如果真的需要代理，先检查一下代理服务器是否畅通，
比如现在有一个IP地址为218.14.227.197，端口为3128的代理服务，
我们可以运行telnet 218.14.227.197 3128来检测该地址的该端口是否畅通。
如果得到出错信息，需要先获取正确的代理服务信息；
如果telnet连接正确，则输入ctrl+]，然后q，回车，退出即可。

检查完毕之后，编辑~/.m2/settings.xml文件（如果没有该文件，则复制$M2_HOME/conf/settings.xml）。
添加代理配置如下：

<settings>
…  
<proxies>
    <proxy>
      <id>my-proxy</id>
      <active>true</active>
      <protocol>http</protocol>
      <host>218.14.227.197</host>
      <port>3128</port>
      <!--
      <username>***</username>
      <password>***</password>
      <nonProxyHosts>repository.mycom.com|*.google.com</nonProxyHosts>
      -->
    </proxy>
  </proxies>
  …
</settings>

这段配置十分简单，proxies下可以有多个proxy元素，
如果你声明了多个proxy元素，则默认情况下第一个被激活的proxy会生效。

这里声明了一个id为my-proxy的代理，active的值为true表示激活该代理，

protocol表示使用的代理协议，这里是http。

当然，最重要的是指定正确的主机名（host元素）和端口（port元素）。

上述XML配置中我注释掉了username、password、nonProxyHost几个元素，

当你的代理服务需要认证时，就需要配置username和password。

nonProxyHost元素用来指定哪些主机名不需要代理，可以使用 | 符号来分隔多个主机名。

此外，该配置也支持通配符，如*.google.com表示所有以google.com结尾的域名访问都不要通过代理。

=====
2.7 Maven安装最佳实践
 
本节介绍一些在安装Maven过程中不是必须的，但十分有用的实践。

----
2.7.1 设置MAVEN_OPTS环境变量

本章前面介绍Maven安装目录时我们了解到，运行mvn命令实际上是执行了Java命令，
既然是运行Java，那么运行Java命令可用的参数当然也应该在运行mvn命令时可用。
这个时候，MAVEN_OPTS环境变量就能派上用场。

我们通常需要设置MAVEN_OPTS的值为：-Xms128m -Xmx512m，

因为Java默认的最大可用内存往往不能够满足Maven运行的需要，
比如在项目较大时，使用Maven生成项目站点需要占用大量的内存，
如果没有该配置，我们很容易得到java.lang.OutOfMemeoryError。
因此，一开始就配置该变量是推荐的做法。

关于如何设置环境变量，请参考前面设置M2_HOME环境变量的做法，
尽量不要直接修改mvn.bat或者mvn这两个Maven执行脚本文件。
因为如果修改了脚本文件，升级Maven时你就不得不再次修改，一来麻烦，二来容易忘记。
同理，我们应该尽可能地不去修改任何Maven安装目录下的文件。

----
2.7.2 配置用户范围settings.xml

Maven用户可以选择配置$M2_HOME/conf/settings.xml或者~/.m2/settings.xml。

前者是全局范围的，整台机器上的所有用户都会直接受到该配置的影响，
而后者是用户范围的，只有当前用户才会受到该配置的影响。

我们推荐使用用户范围的settings.xml，
主要原因是为了避免无意识地影响到系统中的其他用户。
当然，如果你有切实的需求，需要统一系统中所有用户的settings.xml配置，当然应该使用全局范围的settings.xml。

除了影响范围这一因素，配置用户范围settings.xml文件还便于Maven升级。
直接修改conf目录下的settings.xml会导致Maven升级不便，
每次升级到新版本的Maven，都需要复制settings.xml文件，
如果使用~/.m2目录下的settings.xml，就不会影响到Maven安装文件，升级时就不需要触动settings.xml文件。

----
2.7.3 不要使用IDE内嵌的Maven


