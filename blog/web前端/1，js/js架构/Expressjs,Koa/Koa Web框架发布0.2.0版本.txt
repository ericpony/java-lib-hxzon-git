Koa Web框架发布0.2.0版本
作者 Burke Holland ，译者 夏雪 发布于 一月 27, 2014
http://www.infoq.com/cn/news/2014/01/koa-0.2.0-release

====
基于Koa的NodeJS web应用框架发布了0.2.0版本。
Koa是广为流行的Express MVC平台的后续产品，但它在很大程度上依赖了ES6的新概念。

项目领导TJ Holowaychuck说，Koa作为“我从Connect和Express中发现的一个机会，让我这一次做‘正确’的事。” 
这个版本被人称为“短小精悍”，这个版本的标号是重要的暗示，
它重申了团队要从0.1.0开始发布的构想，本版本针对Koa的未来版本和产品用途充实了一些API。

====
0.2.0版本变更内容

这个版本最大的更新实际上是koa-compose模块，
它把请求在中间件操作前和操作后的内容都记录到标准输出(stdout)中，使开发人员可以调试这些发到中间件的请求。 

一些附加的小变更包括：

套接字错误路由，以避免节点层的套接字处理对节点服务器的冲击；

重构函数，目前已经把它们共享到了Express和Koa的模块，使它们都能在框架中使用；

比如“accepts”模块，它负责内容协商，基于HTTP应答头信息的值分辨请求带有的内容类型，使服务器能够响应带有不同内容的请求。

====
以生成器为基础

Koa把它自己称为“下一代生成器web框架”，它充分利用了co库，
它们使用ECMAScript 6语言规范中的生成器创建用在节点上的无阻塞同步过程。
Prior节点框架依靠回调函数和约定实现了某种程度的“栈处理”，这对于HTTP请求来说是必需的。 
虽然实际上生成器是用来创建Harmony迭代器的“工厂”，但Koa却用它们把函数变成了同步操作。
Koa的应用程序可以向中间件的各个层发送请求。
每次调用中间件函数时必须先yield它的返回结果然后再继续执行。

var koa = require('koa'); 
var app = koa(); 
 
app.use(route.get('/', google)); 
 
function *people() { 
   // “get”异步的HTTP调用
   var result = yield get('http://www.google.com'); 
   // 在上面那句yield返回之前本句不会执行 
   this.body = result; 
}

====
没有中间件

Koa本身不包含中间件，这使它保持着轻量级的封装。
Holowaychuk解释说：“为方便起见（不仅仅针对最终用户），我们本打算把许多中间件捆绑到Connect里，
但从节点到整个生态系统都针对我们进行了非常快速的更新，这使它的维护更加简单。
回首这几年，绝大多数人都觉得捆绑这些中间件会是个错误的决定”。

Holowaychuk接着说，基于这种认识让我们决定不让Koa捆绑任何中间件，而是在单独的模块中提供它，为了方便可以捆绑这些模块。 
koa-common模块捆绑了web应用通常所需的大多数中间件。
开发人员可以通过NPM中把所有这些中间件添加到他们的Koa应用中。

$ npm install koa-common

====
Koa和Express的未来

Holowaychuk提到，除了一些偶尔出现的古怪需求，大家认为Koa已经彻底完成了。
Express的未来成了Koa的版本，用户“deif”对此表达了自己的忧虑。 

对此我有以下疑问：

请在FAQ上对Express的状态给出了官方的回答，但我猜你们不再会积极维护Express了，对吗？

假设现在把重点放到了Koa上，Express已经是著名的节点框架了，为什么还要改名字呢？

如果一名新的开发人员同时看到Express和Koa，他们能够马上知道哪个是现在的发展重点吗？

大体上我很奇怪为什么它不能称为Express 3.0（或者4.0）。 

Holowaychuk解释了改名的原因： 
从Express到Koa的发展过程有着非凡的意义，虽然他们看上去很相似，
但从本质上说它们完全不同，所以我不想把它称为Express 4.0，
我想我们应该给它起个新名字……
有的人想要保留Express，我们非常愿意有更多对它感兴趣的人加入到这个团队中。 

查看英文原文：Koa Web Framework 0.2.0 Release

