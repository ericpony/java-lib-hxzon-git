《java7并发编程指南》3，线程同步工具（2）控制并发访问多个资源（Semaphore）

线程同步工具（二）控制并发访问多个资源（Semaphore）
http://ifeve.com/thread-synchronization-utilities-3/

声明：本文是《 Java 7 Concurrency Cookbook 》的第三章， 作者： Javier Fernández González 译者：郑玉婷

=========
控制并发访问多个资源

在并发访问资源的控制中，你学习了信号量（semaphores）的基本知识。

在上个指南，你实现了使用binary semaphores的例子。
那种semaphores是用来保护访问一个共享资源的，或者说一个代码片段每次只能被一个线程执行。
但是semaphores也可以用来保护多个资源的副本，也就是说当你有一个代码片段每次可以被多个线程执行。

在这个指南中，你将学习怎样使用semaphore来保护多个资源副本。
你将实现的例子会有一个print queue但可以在3个不同的打印机上打印文件。

========
准备

指南中的例子是使用 Eclipse IDE 来实现的。如果你使用Eclipse 或者其他的IDE，例如NetBeans, 打开并创建一个新的java任务。实现在控制并发访问资源里描述的例子。

怎么做呢…

按照这些步骤来实现下面的例子：

01
//1.  如我们之前提到的，你将实现semaphores来修改print queue例子。打开PrintQueue类并声明一个boolean array名为 freePrinters。这个array储存空闲的等待打印任务的和正在打印文档的printers。
02
private boolean freePrinters[];
03
 
04
//2.   接着，声明一个名为lockPrinters的Lock对象。将要使用这个对象来保护freePrinters array的访问。
05
private Lock lockPrinters;
06
 
07
//3.   修改类的构造函数并初始化新声明的对象们。freePrinters array 有3个元素，全部初始为真值。semaphore用3作为它的初始值。
08
public PrintQueue(){
09
 
10
semaphore=new Semaphore(3);
11
freePrinters=new boolean[3];
12
 
13
for (int i=0; i<3; i++){
14
    freePrinters[i]=true;
15
}
16
lockPrinters=new ReentrantLock();
17
}
18
 
19
//4.   修改printJob()方法。它接收一个称为document的对象最为唯一参数。
20
public void printJob (Object document){
21
 
22
//5.   首先，调用acquire()方法获得semaphore的访问。由于此方法会抛出 InterruptedException异常，所以必须加入处理它的代码。
23
try {
24
    semaphore.acquire();
25
 
26
//6.   接着使用私有方法 getPrinter()来获得被安排打印任务的打印机的号码。
27
int assignedPrinter=getPrinter();
28
 
29
//7.    然后， 随机等待一段时间来实现模拟打印文档的行。
30
long duration=(long)(Math.random()*10);
31
System.out.printf("%s: PrintQueue: Printing a Job in Printer%d during %d seconds\n",Thread.currentThread().getName(), assignedPrinter,duration);
32
TimeUnit.SECONDS.sleep(duration);
33
 
34
//8.   最后，调用release() 方法来解放semaphore并标记打印机为空闲，通过在对应的freePrinters array引索内分配真值。
35
freePrinters[assignedPrinter]=true;
36
} catch (InterruptedException e) {
37
    e.printStackTrace();
38
} finally {
39
    semaphore.release();
40
}
41
 
42
//9.  实现 getPrinter() 方法。它是一个私有方法，返回一个int值，并不接收任何参数。
43
private int getPrinter() {
44
 
45
//10. 首先，声明一个int变量来保存printer的引索值。
46
int ret=-1;
47
 
48
//11. 然后， 获得lockPrinters对象 object的访问。
49
try {
50
lockPrinters.lock();
51
 
52
//12. 然后，在freePrinters array内找到第一个真值并在一个变量中保存这个引索值。修改值为false，因为等会这个打印机就会被使用。
53
for (int i=0; i<freePrinters.length; i++) {
54
if (freePrinters[i]){
55
    ret=i;
56
    freePrinters[i]=false;
57
    break;
58
}
59
}
60
 
61
//13. 最后，解放lockPrinters对象并返回引索对象为真值。
62
} catch (Exception e) {
63
    e.printStackTrace();
64
} finally {
65
    lockPrinters.unlock();
66
}
67
return ret;
68
 
69
//14. Job 和 Core 类不做任何改变。

========
它是怎么工作的…

在例子中的PrintQueue类的关键是：Semaphore对象创建的构造方法是使用3作为参数的。
这个例子中，前3个调用acquire() 方法的线程会获得临界区的访问权，其余的都会被阻塞 。
当一个线程结束临界区的访问并解放semaphore时，另外的线程才可能获得访问权。

在这个临界区，线程获得被分配打印的打印机的引索值。
例子的这部分让例子更真实，而且它没有使用任何与semaphores相关的代码。
以下的裁图展示了这个例子的执行输出：



每个文档都被安排到第一个空闲的打印机打印。

=======
更多…

The acquire(), acquireUninterruptibly(), tryAcquire(),和release()方法有一个外加的包含一个int参数的版本。
这个参数表示 线程想要获取或者释放semaphore的许可数。
也可以这样说，这个线程想要删除或者添加到semaphore的内部计数器的单位数量。

在这个例子中acquire(), acquireUninterruptibly(), 和tryAcquire() 方法, 
如果计数器的值小于许可值，那么线程就会被阻塞直到计数器到达或者大于许可值。

参见

第三章，线程同步应用：并发地访问资源的控制
第八章，同步应用的测试：修改Lock接口
第二章，基本线程同步：修改lock的公平性

（全文完）