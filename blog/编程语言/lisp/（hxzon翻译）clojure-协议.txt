（hxzon翻译）clojure-协议

by hxzon
=======
http://clojure.org/protocols

Motivation，动机。
Basics
========
Protocols

Protocols were introduced in Clojure 1.2.

---------
Motivation，动机。

Clojure is written in terms of abstractions. 
There are abstractions for sequences, collections, callability, etc. 
In addition, Clojure supplies many implementations of these abstractions. 
The abstractions are specified by host interfaces, and the implementations by host classes. 
While this was sufficient for bootstrapping the language, 
it left Clojure without similar abstraction and low-level implementation facilities. 
The protocols and datatypes features add powerful and flexible mechanisms for abstraction 
and data structure definition with no compromises vs the facilities of the host platform.

There are several motivations for protocols:
协议设计的几点动机：

Provide a high-performance, dynamic polymorphism construct as an alternative to interfaces
提供高性能的，动态多态的机制，作为jvm接口的替代。

Support the best parts of interfaces
保留jvm接口好的部分。

specification only, no implementation
只描述功能，没有具体实现。

a single type can implement multiple protocols
一个类型可实现多个协议。

While avoiding some of the drawbacks
（drawback，缺点。）但避开一些缺点。

Which interfaces are implemented is a design-time choice of the type author, 
cannot be extended later (although interface injection might eventually address this)
implementing an interface creates an isa/instanceof type relationship and hierarchy
实现一个接口，产生了isa和instanceof关系和层级关系。

Avoid the 'expression problem' by allowing independent extension of the set of types, protocols, 
and implementations of protocols on types, by different parties
解决“表达力问题”。

do so without wrappers/adapters
不必使用装饰器和适配器。

Support the 90% case of multimethods (single dispatch on type) while providing higher-level abstraction/organization
覆盖90%的多重方法使用场景（基于单个参数类型分派），同时提供较高的抽象和组织能力。

----------
Basics

A protocol is a named set of named methods and their signatures, defined using defprotocol:
一个协议包括一个协议名字，和一组方法签名。

(defprotocol AProtocol
  "A doc string for AProtocol abstraction"
  (bar [a b] "bar docs")
  (baz [a] [a b] [a b c] "baz docs"))

No implementations are provided
不包含具体实现。

Docs can be specified for the protocol and the functions

The above yields a set of polymorphic functions and a protocol object

all are namespace-qualified by the namespace enclosing the definition
被限定为定义它的命名空间。

The resulting functions dispatch on the type of their first argument, and thus must have at least one argument
基于第一个参数分派，所以每个方法必须至少一个参数。

defprotocol is dynamic, and does not require AOT compilation
（compilation，汇编。）
协议是动态的，所以不需要AOT汇编。

defprotocol will automatically generate a corresponding interface, with the same name as the protocol, 
i.e. given a protocol my.ns/Protocol, an interface my.ns.Protocol. 
The interface will have methods corresponding to the protocol functions, 
and the protocol will automatically work with instances of the interface.
定义协议会自动生成一个同名的jvm接口。


Note that you do not need to use this interface with deftype , defrecord , or reify, as they support protocols directly:
deftype,defrecord,reify都支持继承协议。

(defprotocol P
  (foo [x])
  (bar-me [x] [x y]))
 
(deftype Foo [a b c]
  P
  (foo [x] a)
  (bar-me [x] b)
  (bar-me [x y] (+ c y)))
 
(bar-me (Foo. 1 2 3) 42)
=> 45
 
(foo
 (let [x 42]
   (reify P
     (foo [this] 17)
     (bar-me [this] x)
     (bar-me [this y] x))))
 
=> 17


A Java client looking to participate in the protocol can do so most efficiently by implementing the protocol-generated interface.

External implementations of the protocol 
(which are needed when you want a class or type not in your control to participate in the protocol) 
can be provided using the extend construct:

(extend AType
  AProtocol
   {:foo an-existing-fn
    :bar (fn [a b] ...)
    :baz (fn ([a]...) ([a b] ...)...)}
  BProtocol
    {...}
...)


extend takes a type/class (or interface, see below), a one or more protocol + function map (evaluated) pairs.

Will extend the polymorphism of the protocol's methods to call the supplied functions when an AType is provided as the first argument

Function maps are maps of the keywordized method names to ordinary fns

this facilitates easy reuse of existing fns and maps, for code reuse/mixins without derivation or composition

You can implement a protocol on an interface
this is primarily to facilitate interop with the host (e.g. Java)
but opens the door to incidental multiple inheritance of implementation

since a class can inherit from more than one interface, both of which implement the protocol
if one interface is derived from the other, the more derived is used, else which one is used is unspecified.

The implementing fn can presume first argument is instanceof AType
You can implement a protocol on nil
可以将协议扩展到nil。

To define a default implementation of protocol (for other than nil) just use Object

Protocols are fully reified and support reflective capabilities via extends? , extenders , and satisfies? .

Note the convenience macros extend-type , and extend-protocol
If you are providing external definitions inline, these will be more convenient than using extend directly

(extend-type MyType
  Countable
    (cnt [c] ...)
  Foo
    (bar [x y] ...)
    (baz ([x] ...) ([x y zs] ...)))
 
  ;expands into:
 
(extend MyType
  Countable
   {:cnt (fn [c] ...)}
  Foo
   {:baz (fn ([x] ...) ([x y zs] ...))
    :bar (fn [x y] ...)})

