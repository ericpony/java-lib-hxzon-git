（hxzon思考）数据库

by hxzon
============
1，
关系型数据库优点：

基于数学：关系理论，元组，规范化，sql（基于集合）。

--
关系型数据库缺点：


功能多，不能定制（索引、联接），不能裁剪（放弃事务）。

阻抗失谐，scheme不能表达聚合、继承。

阻抗失谐，scheme不容易表达复杂的关系，如树，图。

阻抗失谐，scheme使得数据格式必须一致（但正是一致使得数据库能够统一优化、灵活查询）。

不是面向分布式。

==========
2，
BASE：基本可用，不追求状态的严密性，最终一致即可。
ACID：原子（Atomicity），状态一致（Consistency），隔离（Isolation），持久（Durability）。

==========
3，OR映射


--
内存对象：靠内存地址标识和关联
数据库、跨主机：靠唯一标识符

问题产生的原因是因为对象之间（数据之间）有关联，关联是因为需要拆分，1，数据应公用而必须拆分复用；2，为易于理解而拆分。


需要解决和考虑的问题：
1，数据加载（查询结果映射）：
where语句总是不同的，但返回字段却相似甚至相同，所以查询结果的映射有机会复用。
返回字段还可能需要被映射成一个聚合（多个相关联的对象）。
2，数据保存：只更新必要部分。
3，批量处理（修改，删除）：可对数据直接修改而不通过内存对象。

--
直接使用sql：

优点：最自由的表达，能够使用特定语法（从而能充分利用数据库的能力）。

缺点：最自由的表达意味着“字段名之类到处分散”，能够使用特定语法意味着“迁移问题”。

--
OR映射：

优点：
1，能表达聚合，作为一个整体存取，便于内部重构（字段名之类不会到处分散）。
2，能表达聚合，自动处理关联对象（保存和加载时）。
3，解决阻抗失谐问题（聚合、继承，实体关联）。
4，统一语法，便于数据库迁移。
5，扩展语法，例如hql面向对象。


缺点：
1，统一语法，扩展语法，在底层数据库不支持时会出现迁移问题（失效或性能低下）。
2，作为一个整体存取，如果不能只存取必要字段，则会出现性能问题。
3，自动处理关联对象，如果不能只存取必要字段，则会出现性能问题。

--
clojure等dsl语言：

sql本身就是一种dsl，只是没有面向对象，缺乏联动修改，编译检查。符号。


========
4，斯通布雷克（SQL数据库之父，PostgreSQL之父）：

NoSQL的优势在于性能和灵活性。
NoSQL的性能优于SQL这一说法，并非在所有情况下都成立。
通常认为NoSQL是通过牺牲SQL和ACID特性来实现其性能的，然而性能问题与SQL和ACID是无关的。

决定SQL数据库性能的，是客户端与服务器之间的通信开销，以及服务器上的事务处理开销。
通过将大部分处理放在服务器上的存储过程，可在一定程度上解决通信开销。

服务器开销，主要有4个瓶颈：
日志，事务锁（Locking），内存锁（Latching），缓存管理。

SQL数据库和NoSQL数据库一样，可将开销分摊到多个节点上。
只要涉及磁盘写入操作，以及多线程架构下的缓存管理，NoSQL一样不能避免上述瓶颈。

VoltDB，内存数据库，面向OLTP。由于数据存储在内存中，就不必有缓存管理，由于不存在磁盘崩溃的情况，也就不需要日志。
在VoltDB中，数据库是分割成多个分区来管理的，每个分区都分配了一个独立的管理线程，也就是说，对分区的操作是单线程的，也就不需要用于实现排他处理的事务锁和内存锁。


