计算机程序的构造和解释

http://book.douban.com/subject/1148282/

作者: Harold Abelson / Gerald Jay Sussman / Julie Sussman 
出版社: 机械工业出版社
原作名: Structure and Interpretation of Computer Programs
译者: 裘宗燕 
出版年: 2004-2
页数: 473
定价: 45.00元
装帧: 简裝本
丛书: 计算机科学丛书
ISBN: 9787111135104

=======
《计算机程序的构造和解释(原书第2版)》1984年出版，成型于美国麻省理工学院(MIT)多年使用的一本教材，1996年修订为第2版。
在过去的二十多年里，《计算机程序的构造和解释(原书第2版)》对于计算机科学的教育计划产生了深刻的影响。
第2版中大部分重要程序设计系统都重新修改并做过测试，包括各种解释器和编译器。
作者根据其后十余年的教学实践，还对其他许多细节做了相应的修改。

Harold Abelson是MIT1992年度MacVicarFacultyFellow。
Gerald JaySussman是Matsushita电子工程教授。
他们都在MIT电子工程和计算机科学系工作．
都得到过最重要的计算机科学教育奖：
如Abelson得到了IEEE计算机学会的Booth奖。
Sussman得到了ACM的Karlstrom奖。

Julie Sussman是作家和编辑，同时使用自然语言和计算机语言写作。

======
目录

出版者的话
专家指导委员会
序
第2版前言
第1版前言
致谢


第1章 构造过程抽象

1.1 程序设计的基本元素
1.2 过程与它们所产生的计算
1.3 用高阶函数做抽象

第2章 构造数据抽象

2.1 数据抽象导引
2.2 层次性数据和闭包性质
2.3 符号数据
2.4 抽象数据的多重表示
2.5 带有通用型操作的系统

第3章 模块化、对象和状态

3.1 赋值和局部状态
3.2 求值的环境模型
3.3 用变动数据做模拟
3.4 并发：时间是一个本质问题
3.5 流

第4章 元语言抽象

4.1 元循环求值器
4.2 Scheme的变形——惰性求值
4.3 Scheme的变形——非确定性计算
4.4 逻辑程序设计

第5章 寄存器机器里的计算

5.1 寄存器机器的设计
5.2 一个寄存器机器模拟器
5.3 存储分配和废料收集
5.4 显式控制的求值器
5.5 编译


参考文献
练习表
索引

======
目录

第1章 构造过程抽象 

1.1 程序设计的基本元素 
1.1.1 表达式 
1.1.2 命名和环境 
1.1.3 组合式的求值 
1.1.4 复合过程 
1.1.5 过程应用的代换模型 
1.1.6 条件表达式和谓词 
1.1.7 实例：采用牛顿法求平方根 
1.1.8 过程作为黑箱抽象 

1.2 过程与它们所产生的计算 
1.2.1 线性的递归和迭代 
1.2.2 树形递归 
1.2.3 增长的阶 
1.2.4 求幂 
1.2.5 最大公约数 
1.2.6 实例：素数检测 

1.3 用高阶函数做抽象 
1.3.1 过程作为参数 
1.3.2 用lambda构造过程 
.1.3.3 过程作为一般性的方法 
1.3.4 过程作为返回值 


笫2章 构造数据抽象 

2.1 数据抽象导引 
2.1.1 实例：有理数的算术运算 
2.1.2 抽象屏障 
2.1.3 数据意味着什么 
2.1.4 扩展练习：区间算术 

2.2 层次性数据和闭包性质 
2.2.1 序列的表示 
2.2.2 层次性结构 
2.2.3 序列作为一种约定的界面 
2.2.4 实例：一个图形语言 

2.3 符号数据 
2.3.1 引号 
2.3.2 实例：符号求导 
2.3.3 实例：集合的表示 
2.3.4 实例：huffman编码树 

2.4 抽象数据的多重表示 
2.4.1 复数的表示 
2.4.2 带标志数据 
2.4.3 数据导向的程序设计和可加性 

2.5 带有通用型操作的系统 
2.5.1 通用型算术运算 
2.5.2 不同类型数据的组合 
2.5.3 实例：符号代数 


第3章 模块化、对象和状态 

3.1 赋值和局部状态 
3.1.1 局部状态变量 
3.1.2 引进赋值带来的利益 
3.1.3 引进赋值的代价 

3.2 求值的环境模型 
3.2.1 求值规则 
3.2.2 简单过程的应用 
3.2.3 将框架看作局部状态的展台 
3.2.4 内部定义 

3.3 用变动数据做模拟 
3.3.1 变动的表结构 
3.3.2 队列的表示 
3.3.3 表格的表示 
3.3.4 数字电路的模拟器 
3.3.5 约束的传播 

3.4 并发：时间是一个本质问题 
3.4.1 并发系统中时间的性质 
3.4.2 控制并发的机制 

3.5 流 
3.5.1 流作为延时的表 
3.5.2 无穷流 
3.5.3 流计算模式的使用 
3.5.4 流和延时求值 
3.5.5 函数式程序的模块化和对象的模块化 


第4章 元语言抽象 

4.1 元循环求值器 
4.1.1 求值器的内核 
4.1.2 表达式的表示 
4.1.3 求值器数据结构 
4.1.4 作为程序运行这个求值器 
4.1.5 将数据作为程序 
4.1.6 内部定义 
4.1.7 将语法分析与执行分离 

4.2 scheme的变形--惰性求值 
4.2.1 正则序和应用序 
4.2.2 一个采用惰性求值的解释器 
4.2.3 将流作为惰性的表 

4.3 scheme的变形--非确定性计算 
4.3.1 amb和搜索 
4.3.2 非确定性程序的实例 
4.3.3 实现arab求值器 

4.4 逻辑程序设计 
4.4.1 演绎信息检索 
4.4.2 查询系统如何工作 
4.4.3 逻辑程序设计是数理逻辑吗 
4.4.4 查询系统的实现 


第5章 寄存器机器里的计算 

5.1 寄存器机器的设计 
5.1.1 一种描述寄存器机器的语言 
5. 1.2 机器设计的抽象 
5.1.3 子程序 
5.1.4 采用堆栈实现递归 
5.1.5 指令总结 

5.2 一个寄存器机器模拟器 
5.2.1 机器模型 
5.2.2 汇编程序 
5.2.3 为指令生成执行过程 
5.2.4 监视机器执行 

5.3 存储分配和废料收集 
5.3.1 将存储看作向量 
5.3.2 维持一种无穷存储的假象 

5.4 显式控制的求值器 
5.4.1 显式控制求值器的内核 
5.4.2 序列的求值和尾递归 
5.4.3 条件、赋值和定义 
5.4.4 求值器的运行 

5.5 编译 
5.5.1 编译器的结构 
5.5.2 表达式的编译 
5.5.3 组合式的编译 
5.5.4 指令序列的组合 
5.5.5 编译代码的实例 
5.5.6 词法地址 
5.5.7 编译代码与求值器的互连 


参考文献 
练习表 
索引

