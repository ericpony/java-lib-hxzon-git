稳扎稳打C++11：（函数04）重载函数
来源：ilanever.com | 作者：LanPei | 创建时间：2014-4-8 0:45:11
http://ilanever.com/article/sitedetail.html;jsessionid=612D1550D54A398C5871628498084252?id=265

hxzon学习笔记：

1，一个参数拥有top-level const，与它不含top-level const的参数是相同的。
另一方面，如果const是low-level的，那么我们可以基于此重载函数。

2，我们可以使用const_cast将const类型转换为非const类型，或者将非const类型转换为const类型。

3，如果我们在内层范围声明了一个名称，那么这个名称将会隐藏外层范围声明的同名对象。（hxzon：重点理解）
对于重载函数而言这也是适用的。名称不能跨范围重载。

==========
目录

重载和const参数
const_cast和重载
调用重载函数
重载和范围

====
如果在同一个范围内拥有名称相同但参数列表不同的函数，那么这些函数是重载的。
重载函数必须在参数类型和数量上不同，只在返回类型上不同的两个函数是错误的。

如果两个参数一个用了别名，另一个用了原始类型，那么两个参数分别对应的函数被看作是相同的。

====
重载和const参数 

一个参数拥有top-level const，与它不含top-level const的参数是相同的。例如：

Record lookup(Phone);
Record lookup(const Phone); // 重新声明函数：Record lookup(Phone)
 
Record lookup(Phone*);
Record lookup(Phone* const); // 指针地址为const的声明方式。重新声明函数：Record lookup(Phone*)

在上面的声明中，下一个声明与上一个声明相同。

----
另一方面，如果const是low-level的，那么我们可以基于此重载函数。例如：

Record lookup(Phone&);
Record lookup(const Phone&); // 新函数
 
Record lookup(Phone*);
Record lookup(const Phone*); // 新函数

在上面的声明中，编译器使用实参是否为const的来区分调用哪个函数。

由于没有从const到普通类型的转换，因此我们只能将const对象传递给const参数。
因为有从普通类型到const的转换，因此我们可以将普通类型的对象传递给普通参数和const参数。

====
const_cast和重载

我们可以使用const_cast将const类型转换为非const类型，或者将非const类型转换为const类型。
我们可以使用const_cast重写之前的shortString()函数：

#include <iostream>
#include <string>
 
using namespace std;
 
const string &shortString(const string &s1, const string &s2)
{
    return s1.size() <= s2.size() ? s1 : s2;
}
 
string &shortString(string &s1,string &s2)
{
    auto &r = shortString(const_cast<const string&>(s1),const_cast<const string&>(s2));
    return const_cast<string&>(r);
}
 
int main()
{
    string s1 = "abcdef";
    string s2 = "abcdefgh";
    string &ret1 = shortString(s1,s2);
    cout << "ret1:" << ret1 << endl;
    ret1 = "123";
    cout << "ret1:" << ret1 << endl;
 
    const string s3 = "uvw";
    const string s4 = "uvwxyz";
    const string &ret2 = shortString(s3,s4);
    cout << "ret2:" << ret2 << endl;
    //ret2 = "456"; can't assign.
    //cout << ret2 << endl;
 
    string s5 = "xy";
    string s6 = "xyz";
    string &ret3 = shortString(s5,s6);
    cout << "ret3:" << ret3 << endl;
    ret3 = "789";
    cout << "ret3:" << ret3 << endl;
 
    /*
    ENVIRONTMENT:
    g++-4.8(linux64)
 
    OUTPUT:
    ret1:abcdef
    ret1:123
    ret2:uvw
    ret3:xy
    ret3:789
    */
 
    return 0;
}

====
调用重载函数 

根据函数调用从已重载函数中寻找指定函数的过程称为函数匹配（Function Matching）。
编译器通过比较调用函数的实参与重载函数的形参来决定使用哪个函数。

====
重载和范围 

通常，如果我们在内层范围声明了一个名称，那么这个名称将会隐藏外层范围声明的同名对象。
对于重载函数而言这也是适用的。
名称不能跨范围重载。

#include <iostream>
#include <string>
 
using namespace std;
 
string read();
void print(const string&);
void print(double);
 
int main()
{
    bool read = false;
    //string s = read(); // error: ‘read’ cannot be used as a function
     
    void print(int i);
    //print("Hi..."); // error: invalid conversion from ‘const char*’ to ‘int’
    print(2.14);
    print(2);
 
    /*
    ENVIRONTMENT:
    g++-4.8(linux64)
 
    OUTPUT:
     
    */
 
    return 0;
}

一旦名称在当前范围内被找到，编译器就会忽略外层范围定义的同名对象。

