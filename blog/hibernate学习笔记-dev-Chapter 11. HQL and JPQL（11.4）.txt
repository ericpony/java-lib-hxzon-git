hibernate学习笔记-dev-Chapter 11. HQL and JPQL（11.4）

by hxzon

http://docs.jboss.org/hibernate/orm/4.1/devguide/en-US/html/ch11.html


============
11.4. Expressions

Essentially expressions are references that resolve to basic or tuple values.

11.4.1. Identification variable

See Section 11.3, “The FROM clause”.

11.4.2. Path expressions

Again, see Section 11.3, “The FROM clause”.

11.4.3. Literals

String literals are enclosed in single-quotes. To escape a single-quote within a string literal, use double single-quotes.

Example 11.14. String literal examples

select c
from Customer c
where c.name = 'Acme'

select c
from Customer c
where c.name = 'Acme''s Pretzel Logic'


Numeric literals are allowed in a few different forms.

Example 11.15. Numeric literal examples

// simple integer literal
select o
from Order o
where o.referenceNumber = 123

// simple integer literal, typed as a long
select o
from Order o
where o.referenceNumber = 123L

// decimal notation
select o
from Order o
where o.total > 5000.00

// decimal notation, typed as a float
select o
from Order o
where o.total > 5000.00F

// scientific notation
select o
from Order o
where o.total > 5e+3

// scientific notation, typed as a float
select o
from Order o
where o.total > 5e+3F

In the scientific notation form, the E is case insensitive.

Specific typing can be achieved through the use of the same suffix approach specified by Java. So, L denotes a long; D denotes a double; F denotes a float. The actual suffix is case insensitive.

The boolean literals are TRUE and FALSE, again case-insensitive.

Enums can even be referenced as literals. The fully-qualified enum class name must be used. HQL can also handle constants in the same manner, though JPQL does not define that as supported.

Entity names can also be used as literal. See Section 11.4.10, “Entity type”.

Date/time literals can be specified using the JDBC escape syntax: {d 'yyyy-mm-dd'} for dates, {t 'hh:mm:ss'} for times and {ts 'yyyy-mm-dd hh:mm:ss[.millis]'} (millis optional) for timestamps. These literals only work if you JDBC drivers supports them.

11.4.4. Parameters

HQL supports all 3 of the following forms. JPQL does not support the HQL-specific positional parameters notion. It is good practice to not mix forms in a given query.

11.4.4.1. Named parameters

Named parameters are declared using a colon followed by an identifier - :aNamedParameter. The same named parameter can appear multiple times in a query.

Example 11.16. Named parameter examples

String queryString =
        "select c " +
        "from Customer c " +
        "where c.name = :name " +
        "   or c.nickName = :name";

// HQL
List customers = session.createQuery( queryString )
        .setParameter( "name", theNameOfInterest )
        .list();

// JPQL
List<Customer> customers = entityManager.createQuery( queryString, Customer.class )
        .setParameter( "name", theNameOfInterest )
        .getResultList();

11.4.4.2. Positional (JPQL) parameters

JPQL-style positional parameters are declared using a question mark followed by an ordinal - ?1, ?2. The ordinals start with 1. Just like with named parameters, positional parameters can also appear multiple times in a query.

Example 11.17. Positional (JPQL) parameter examples

String queryString =
        "select c " +
        "from Customer c " +
        "where c.name = ?1 " +
        "   or c.nickName = ?1";

// HQL - as you can see, handled just like named parameters
//      in terms of API
List customers = session.createQuery( queryString )
        .setParameter( "1", theNameOfInterest )
        .list();

// JPQL
List<Customer> customers = entityManager.createQuery( queryString, Customer.class )
        .setParameter( 1, theNameOfInterest )
        .getResultList();

11.4.4.3. Positional (HQL) parameters

HQL-style positional parameters follow JDBC positional parameter syntax. They are declared using ? without a following ordinal. There is no way to relate two such positional parameters as being "the same" aside from binding the same value to each.

This form should be considered deprecated and may be removed in the near future.

11.4.5. Arithmetic

Arithmetic operations also represent valid expressions.

Example 11.18. Numeric arithmetic examples

select year( current_date() ) - year( c.dateOfBirth )
from Customer c

select c
from Customer c
where year( current_date() ) - year( c.dateOfBirth ) < 30

select o.customer, o.total + ( o.total * :salesTax )
from Order o

The following rules apply to the result of arithmetic operations:

If either of the operands is Double/double, the result is a Double;
else, if either of the operands is Float/float, the result is a Float;
else, if either operand is BigDecimal, the result is BigDecimal;
else, if either operand is BigInteger, the result is BigInteger (except for division, in which case the result type is not further defined);
else, if either operand is Long/long, the result is Long (except for division, in which case the result type is not further defined);
else, (the assumption being that both operands are of integral type) the result is Integer (except for division, in which case the result type is not further defined);
Date arithmetic is also supported, albeit in a more limited fashion. This is due partially to differences in database support and partially to the lack of support for INTERVAL definition in the query language itself.

11.4.6. Concatenation (operation)

HQL defines a concatenation operator in addition to supporting the concatenation (CONCAT) function. This is not defined by JPQL, so portable applications should avoid it use. The concatenation operator is taken from the SQL concatenation operator - ||.

Example 11.19. Concatenation operation example

select 'Mr. ' || c.name.first || ' ' || c.name.last
from Customer c
where c.gender = Gender.MALE

See Section 11.4.8, “Scalar functions” for details on the concat() function

11.4.7. Aggregate functions

Aggregate functions are also valid expressions in HQL and JPQL. The semantic is the same as their SQL counterpart. The supported aggregate functions are:

COUNT (including distinct/all qualifiers) - The result type is always Long.
AVG - The result type is always Double.
MIN - The result type is the same as the argument type.
MAX - The result type is the same as the argument type.
SUM - The result type of the avg() function depends on the type of the values being averaged. For integral values (other than BigInteger), the result type is Long. For floating point values (other than BigDecimal) the result type is Double. For BigInteger values, the result type is BigInteger. For BigDecimal values, the result type is BigDecimal.
Example 11.20. Aggregate function examples

select count(*), sum( o.total ), avg( o.total ), min( o.total ), max( o.total )
from Order o

select count( distinct c.name )
from Customer c

select c.id, c.name, sum( o.total )
from Customer c
    left join c.orders o
group by c.id, c.name

Aggregations often appear with grouping. For information on grouping see Section 11.8, “Grouping”

11.4.8. Scalar functions

Both HQL and JPQL define some standard functions that are available regardless of the underlying database in use. HQL can also understand additional functions defined by the Dialect as well as the application.

11.4.8.1. Standardized functions - JPQL

Here are the list of functions defined as supported by JPQL. Applications interested in remaining portable between JPA providers should stick to these functions.

CONCAT
String concatenation function. Variable argument length of 2 or more string values to be concatenated together.

SUBSTRING
Extracts a portion of a string value.

substring( string_expression, numeric_expression [, numeric_expression] )
The second argument denotes the starting position. The third (optional) argument denotes the length.

UPPER
Upper cases the specified string

LOWER
Lower cases the specified string

TRIM
Follows the semantics of the SQL trim function.

LENGTH
Returns the length of a string.

LOCATE
Locates a string within another string.

locate( string_expression, string_expression[, numeric_expression] )
The third argument (optional) is used to denote a position from which to start looking.

ABS
Calculates the mathematical absolute value of a numeric value.

MOD
Calculates the remainder of dividing the first argument by the second.

SQRT
Calculates the mathematical square root of a numeric value.

CURRENT_DATE
Returns the database current date.

CURRENT_TIME
Returns the database current time.

CURRENT_TIMESTAMP
Returns the database current timestamp.

11.4.8.2. Standardized functions - HQL

Beyond the JPQL standardized functions, HQL makes some additional functions available regardless of the underlying database in use.

BIT_LENGTH
Returns the length of binary data.

CAST
Performs a SQL cast. The cast target should name the Hibernate mapping type to use. See the chapter on data types for more information.

EXTRACT
Performs a SQL extraction on datetime values. An extraction extracts parts of the datetime (the year, for example). See the abbreviated forms below.

SECOND
Abbreviated extract form for extracting the second.

MINUTE
Abbreviated extract form for extracting the minute.

HOUR
Abbreviated extract form for extracting the hour.

DAY
Abbreviated extract form for extracting the day.

MONTH
Abbreviated extract form for extracting the month.

YEAR
Abbreviated extract form for extracting the year.

STR
Abbreviated form for casting a value as character data.

11.4.8.3. Non-standardized functions

Hibernate Dialects can register additional functions known to be available for that particular database product. These functions are also available in HQL (and JPQL, though only when using Hibernate as the JPA provider obviously). However, they would only be available when using that database/Dialect. Applications that aim for database portability should avoid using functions in this category.

Application developers can also supply their own set of functions. This would usually represent either custom SQL functions or aliases for snippets of SQL. Such function declarations are made by using the addSqlFunction method of org.hibernate.cfg.Configuration

11.4.9. Collection-related expressions

There are a few specialized expressions for working with collection-valued associations. Generally these are just abbreviated forms or other expressions for the sake of conciseness.

SIZE
Calculate the size of a collection. Equates to a subquery!

MAXELEMENT
Available for use on collections of basic type. Refers to the maximum value as determined by applying the max SQL aggregation.

MAXINDEX
Available for use on indexed collections. Refers to the maximum index (key/position) as determined by applying the max SQL aggregation.

MINELEMENT
Available for use on collections of basic type. Refers to the minimum value as determined by applying the min SQL aggregation.

MININDEX
Available for use on indexed collections. Refers to the minimum index (key/position) as determined by applying the min SQL aggregation.

ELEMENTS
Used to refer to the elements of a collection as a whole. Only allowed in the where clause. Often used in conjunction with ALL, ANY or SOME restrictions.

INDICES
Similar to elements except that indices refers to the collections indices (keys/positions) as a whole.

Example 11.21. Collection-related expressions examples

select cal
from Calendar cal
where maxelement(cal.holidays) > current_date()

select o
from Order o
where maxindex(o.items) > 100

select o
from Order o
where minelement(o.items) > 10000

select m
from Cat as m, Cat as kit
where kit in elements(m.kittens)

// the above query can be re-written in jpql standard way:
select m
from Cat as m, Cat as kit
where kit member of m.kittens

select p
from NameList l, Person p
where p.name = some elements(l.names)

select cat
from Cat cat
where exists elements(cat.kittens)

select p
from Player p
where 3 > all elements(p.scores)

select show
from Show show
where 'fizard' in indices(show.acts)

Elements of indexed collections (arrays, lists, and maps) can be referred to by index operator.

Example 11.22. Index operator examples

select o
from Order o
where o.items[0].id = 1234

select p
from Person p, Calendar c
where c.holidays['national day'] = p.birthDay
  and p.nationality.calendar = c

select i
from Item i, Order o
where o.items[ o.deliveredItemIndices[0] ] = i
  and o.id = 11

select i
from Item i, Order o
where o.items[ maxindex(o.items) ] = i
  and o.id = 11

select i
from Item i, Order o
where o.items[ size(o.items) - 1 ] = i

See also Section 11.3.5.1, “Special case - qualified path expressions” as there is a good deal of overlap.

11.4.10. Entity type

We can also refer to the type of an entity as an expression. This is mainly useful when dealing with entity inheritance hierarchies. The type can expressed using a TYPE function used to refer to the type of an identification variable representing an entity. The name of the entity also serves as a way to refer to an entity type. Additionally the entity type can be parametrized, in which case the entity's Java Class reference would be bound as the parameter value.

Example 11.23. Entity type expression examples

select p
from Payment p
where type(p) = CreditCardPayment

select p
from Payment p
where type(p) = :aType


HQL also has a legacy form of referring to an entity type, though that legacy form is considered deprecated in favor of TYPE. The legacy form would have used p.class in the examples rather than type(p). It is mentioned only for completeness.

11.4.11. CASE expressions

Both the simple and searched forms are supported, as well as the 2 SQL defined abbreviated forms (NULLIF and COALESCE)

11.4.11.1. Simple CASE expressions

The simple form has the following syntax:

CASE {operand} WHEN {test_value} THEN {match_result} ELSE {miss_result} END
Example 11.24. Simple case expression example

select case c.nickName when null then '<no nick name>' else c.nickName end
from Customer c

// This NULL checking is such a common case that most dbs
// define an abbreviated CASE form.  For example:
select nvl( c.nickName, '<no nick name>' )
from Customer c

// or:
select isnull( c.nickName, '<no nick name>' )
from Customer c

// the standard coalesce abbreviated form can be used
// to achieve the same result:
select coalesce( c.nickName, '<no nick name>' )
from Customer c

11.4.11.2. Searched CASE expressions

The searched form has the following syntax:

CASE [ WHEN {test_conditional} THEN {match_result} ]* ELSE {miss_result} END
Example 11.25. Searched case expression example

select case when c.name.first is not null then c.name.first
            when c.nickName is not null then c.nickName
            else '<no first name>' end
from Customer c

// Again, the abbreviated form coalesce can handle this a
// little more succinctly
select coalesce( c.name.first, c.nickName, '<no first name>' )
from Customer c

11.4.11.3. NULLIF expressions

NULLIF is an abbreviated CASE expression that returns NULL if its operands are considered equal.

Example 11.26. NULLIF example

// return customers who have changed their last name
select nullif( c.previousName.last, c.name.last )
from Customer c

// equivalent CASE expression
select case when c.previousName.last = c.name.last then null
            else c.previousName.last end
from Customer c

11.4.11.4. COALESCE expressions

COALESCE is an abbreviated CASE expression that returns the first non-null operand. We have seen a number of COALESCE examples above.

