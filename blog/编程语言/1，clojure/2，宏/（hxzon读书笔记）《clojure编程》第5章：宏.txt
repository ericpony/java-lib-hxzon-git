（hxzon读书笔记）《clojure编程》第5章：宏

by hxzon
《clojure编程》第5章：宏

----
hxzon摘要：

1，用宏来实现类似java5的改进型for。
2，写一个宏，把clojure里面所有的符号倒过来写。
postwalk函数。
3，展开宏：macroexpand-1 ，macroexpand ，macroexpand-all 。
4，什么时候使用宏。

5，定义宏时最好遵循一些约定。

6，自己实现串行宏。
其它串行宏：.. ，->> 。

hxzon：
可以把宏看成特殊处理的函数，参数被处理成字符串。
宏体即是函数体（即不是模板），但是返回值必须为一个S表达式（不一定可执行）。
语法引述，反引述，编接反引述都是靠函数（seq，concat，list）实现的。

=========
1，

读取期（读者宏）
编译期（宏）
运行期（函数）

高阶函数消灭一批“设计模式”，宏消灭最后残存的“模式”。

2，
宏在实现上其实也是函数，只是它有一些特殊的元数据表明它是一个宏。

宏只在编译期被求值。

=======
3，用宏来实现类似java5的改进型for。

p233

(defmacro foreach [[sym coll] & body]
    `(loop  [coll# ~coll]
            (when-let [[~sym & xs#] (seq coll#)]    ;如果coll可以转成一个序列（当coll为nil时失败），则序列的第一个元素绑定到sym，其它元素绑定到xs# 。
                      ~@body
                     (recur xs#))))
;= #'user/foreach

(foreach [x [1 2 3]]
	(println x))
; 1
; 2
; 3

=========
4，写一个宏，把clojure里面所有的符号倒过来写。

例如写(reverse-it (nltnirp "foo")) ，最终求值成 (println "foo")。

(require '(clojure  [string :as str]
                    [walk :as walk]))

(defmacro reverse-it
    [form] 
    (walk/postwalk #(if (symbol? %) 
                        (symbol (str/reverse (name %))) 
                        %)
                    form))

postwalk函数递归地对form的每个元素执行给定的匿名函数。

匿名函数把form里面的所有符号替换成相反的名字，而对于非符号的元素则不进行处理。

--
(reverse-it
    (qesod [gra (egnar 5)]
           (nltnirp (cni gra))))
; 1
; 2
; 3
; 4
; 5
;= nil

--
(macroexpand-1 '(reverse-it
                    (qesod [gra (egnar 5)]
                           (nltnirp (cni gra)))))
;= (doseq [arg (range 5)]
;= (println (inc arg)))

==========
5，调试宏（把宏展开）

macroexpand-1 ：只扩展宏一次。

macroexpand ：扩展宏，知道最顶级形式不再是一个宏。

(macroexpand '(cond a b c d))
;= (if a b (clojure.core/cond c d))

----
完全扩展宏

(require '[clojure.walk :as w])

(w/macroexpand-all '(cond a b c d))
;= (if a b (if c d nil))

--
只是模拟编译器，但对于特殊形式的处理不一定正确。

(w/macroexpand-all ''(when x a))
;= (quote (if x (do a)))

事实上应该扩展成 (quote (when x a)) ，不应该扩展quote后面的代码。

=========
6，语法

引述：返回参数的不求值形式。

语法引述：跟引述很像，但语法引述把无命名空间限定的符号求值成当前命名空间的符号。
符号的默认空间化对于产生正确的代码非常关键。
它使我们不会因为疏忽而重定义一个已经定义过的值。这被称为“宏卫生”。
另，语法引述里面允许“反引述”。

反引述。

编接反引述。

hxzon：这些引述和反引述都是在clojure.lang.Compiler中实现。

----
看一下语法引述的实现。

(use 'clojure.pprint)

'`(map println ~[foo])
;= (clojure.core/seq
;=     (clojure.core/concat
;=         (clojure.core/list (quote clojure.core/map))
;=         (clojure.core/list (quote clojure.core/println))
;=         (clojure.core/list [foo])))

'`(map println ~[foo] ~@(+ 2 3))
;= (clojure.core/seq 
;        (clojure.core/concat 
;           (clojure.core/list (quote clojure.core/map)) 
;           (clojure.core/list (quote clojure.core/println)) 
;           (clojure.core/list [foo]) 
;           (+ 2 3)))

'`(map println ~[foo] ~@(+ 2 3) (a b c))
;=(clojure.core/seq 
;		(clojure.core/concat 
;			(clojure.core/list (quote clojure.core/map)) 
;			(clojure.core/list (quote clojure.core/println)) 
;			(clojure.core/list [foo]) 
;			(+ 2 3) 
;			(clojure.core/list 
;               (clojure.core/seq 
;                   (clojure.core/concat 
;                       (clojure.core/list (quote clojure-demo.core/+)) 
;                       (clojure.core/list (quote clojure-demo.core/b)) 
;                       (clojure.core/list (quote clojure-demo.core/c)))))))

'`(map println ~[foo] ~@(+ 2 3) (+ b 'c))
;=(clojure.core/seq 
;       (clojure.core/concat 
;           (clojure.core/list (quote clojure.core/map)) 
;           (clojure.core/list (quote clojure.core/println)) 
;           (clojure.core/list [foo]) 
;           (+ 2 3) 
;           (clojure.core/list 
;               (clojure.core/seq 
;                   (clojure.core/concat 
;                       (clojure.core/list (quote clojure.core/+)) 
;                       (clojure.core/list (quote clojure-demo.core/b)) 
;                       (clojure.core/list 
;                           (clojure.core/seq 
;                               (clojure.core/concat 
;                                   (clojure.core/list (quote quote)) 
;                                   (clojure.core/list (quote clojure-demo.core/c))))))))))

----
注，原书此处有误，应为：
(defmacro while
  [test & body]
  (list 'loop []
    (concat (list 'when test) body
      '((recur)))))

======
7，什么时候使用宏

宏在编译期被调用，所以无法访问运行时的信息。

(defn fn-hello [x]
      (str "Hello, " x "!"))

(defmacro   macro-hello [x]
            `(str "Hello, " ~x "!"))

(fn-hello "Brian")
;= "Hello, Brian!"

(macro-hello "Brian")
;= "Hello, Brian!"

(map fn-hello ["Brian" "Not Brian"])
;= ("Hello, Brian!" "Hello, Not Brian!")

(map macro-hello ["Brian" "Not Brian"])
;= #<CompilerException java.lang.RuntimeException:
;= Can't take value of a macro: #'user/macro-hello, compiling:(NO_SOURCE_PATH:1)>

宏根本就没有运行时值的概念，宏不能作为值来进行组合或者传递。
对于那些需要传递高阶函数的习惯用法，宏是不合适的。

应该只在需要自己的语言组件时才使用宏。
换种说法，只在函数满足不了需要的时候才去使用宏。
例如，
-1，需要特殊的求值语义。
-2，需要自定义的语法，特别是一些领域特定的表示法。
-3，需要在编译期提前计算一些中间值。

宏是clojure的终极表达力的体现。
但是你不应该把它当做你写代码的首选。
函数式编程和数据建模已经给了我们很强的表达力，并且使得我们可以把代码里面的重复模式抽象出来。
宏应该作为我们的终极武器，用它来简化控制流，添加一些语法糖，
以消除重复代码，以及一些难看的代码。


===========
8，定义宏时最好遵循一些约定

-1，如果宏需要指定本地绑定，那么把绑定指定在一个vector里面。
clojure内置的一些宏，都是这种风格，如let、if-let、for和with-open等。

(for [  x (range 10)
        y (range x)]
     [x y])

（相当于java中的：
    (for x=0;x<=10;x++){
        (for y=0;y<=x;y++){...}
    }
）

for是一个有趣的例子，因为它这里的“初始化表达式”提供的值并不是对应绑定的值，
x不会被初始化成(range 10)，在for里面，它的意思是x将作为遍历过程中(range 10)的每个元素的引用。
所以你应该始终记住，“初始化表达式的值不一定是你绑定的值”。

-2，定义var的宏的名字应该以def开头。
-3，把var的名字作为第一个参数。
-4，每个宏形式只定义一个var（内部私有的var不计入）。

-5，不要在宏里面实现复杂的行为。
宏应该只在函数或其它宏的基础上薄薄的封装一层。
有个反例for，它的扩展形式很复杂，这是为了优化性能和语法。

宏应该把大多数逻辑都代理给下层函数来做，它应该专注于那些函数没办法实现的功能：对求值进行控制。


=========
9，自己实现串行宏。

首先，验证一个形式是不是序列，如果不是，构造一个只包含这个形式的序列。

(defn ensure-seq [x]
    (if (seq? x) x (list x)))

(ensure-seq 'x)
;= (x)

(ensure-seq '(x))
;= (x)

接着，对于给定的两个形式x和ys，把x插入到ys的第二个元素的位置上，并且确保ys是一个序列。

(defn insert-second
    "Insert x as the second item in seq y."
    [x ys]
    (let [ys (ensure-seq ys)]
         (concat (list (first ys) x)
                 (rest ys))))

(defn insert-second
    "Insert x as the second item in seq y."
    [x ys]
    (let [ys (ensure-seq ys)]
         `(~(first ys) ~x ~@(rest ys))))
语法引述不只可以在宏里面使用，在函数中也可以使用。
不过这里，用list*更简洁：

(defn insert-second
    "Insert x as the second item in seq y."
    [x ys]
    (let [ys (ensure-seq ys)]
         (list* (first ys) x (rest ys))))

(defmacro thread
    "Thread x through successive forms."
    ([x] x)
    ([x form] (insert-second x form))
    ([x form & more] `(thread (thread ~x ~form) ~@more)))
宏可以支持不同个数的参数。


(thread [1 2 3] (conj 4) reverse println)
;= (4 3 2 1)

(-> [1 2 3] (conj 4) reverse println)
;= (4 3 2 1)

--
也可以用函数来实现“串行宏”。

(defn thread-fns
    ([x] x)
    ([x form] (form x))
    ([x form & more] (apply thread-fns (form x) more)))

(thread-fns [1 2 3] reverse #(conj % 4) prn)
;= (4 3 2 1)
这里需要用匿名函数。
对比一下宏版本：
(thread [1 2 3] reverse (conj 4) prn)

而且这个函数版本不支持java的方法调用。

(thread-fns [1 2 3] .toString #(.split % " ") seq)
;= #<CompilerException java.lang.RuntimeException:
;= Unable to resolve symbol: .toString in this context, 
compiling:(NO_SOURCE_PATH:1)>
;; This is starting to look a bit hairy...

(thread-fns [1 2 3] #(.toString %) #(.split % " ") seq)
;= ("[1" "2" "3]")

对比一下宏版本：
(thread [1 2 3] .toString (.split " ") seq)
;= ("[1" "2" "3]")

----
.. 它的行为跟-> 差不多，但是它只支持对于java方法的调用（它还支持->所不支持的java静态方法）。
点点是在->之前引入clojure的，现在已经很少使用。

->> 它把前面一个form插入后面一个form的最后一个元素的位置上。这个宏经常用来对一个序列或者其他数据结构进行转换。
例如：
(->> (range 10) (map inc) (reduce +))
;= 55


