（hxzon学习笔记）java nio netty

by hxzon
==========
1，netty基于事件驱动，
如何主动收发数据（客户端一般都是主动发数据，偶尔服务器也需要主动发数据）？

自定制事件？应该没有这种机制。（netty只有连接，可读等通用事件）

服务端主动发送数据：将连接上来的客户端channel自行管理起来，按需调用？（可行）

客户端按需发送数据：连接成功后获得channel，按需调用？（可行）

2，


======
1，在Twitter，Netty 4 GC开销降为五分之一
http://www.infoq.com/cn/news/2013/11/netty4-twitter

Netty 3使用Java对象表示I/O事件。
Lee谈道：这样简单，但会产生大量的垃圾，尤其是在我们这样的规模下。
Netty 4在新版本中对此做出了更改，取代生存周期短的事件对象，
而以定义在生存周期长的通道对象上的方法处理I/O事件。
它还有一个使用池的专用缓冲区分配器。……
每当收到新信息或者用户发送信息到远程端，Netty 3均会创建一个新的堆缓冲区。
这意味着，对应每一个新的缓冲区，都会有一个‘new byte[capacity]’。
这些缓冲区会导致GC压力，并消耗内存带宽：为了安全起见，新的字节数组分配时会用零填充，这会消耗内存带宽。
然而，用零填充的数组很可能会再次用实际的数据填充，这又会消耗同样的内存带宽。
如果Java虚拟机（JVM）提供了创建新字节数组而又无需用零填充的方式，
那么我们本来就可以将内存带宽消耗减少50%，但是目前没有那样一种方式。
在Netty 4中，代码定义了粒度更细的API，用来处理不同的事件类型，而不是创建事件对象。
它还实现了一个新缓冲池，那是一个纯Java版本的jemalloc（Facebook也在用）。
现在，Netty不会再因为用零填充缓冲区而浪费内存带宽了。
不过，由于它不依赖于GC，开发人员需要小心内存泄漏。
如果忘记在处理程序中释放缓冲区，那么内存使用率会无限地增长。
这些变化没有向后兼容Netty 3，但其垃圾生成速度是原来的1/5，而垃圾清理速度快了5倍。
Lee写道：我们比较了两个分别建立在Netty 3和4基础上echo协议服务器。
（Echo非常简单，这样，任何垃圾的产生都是Netty的原因，而不是协议的原因）。
我使它们服务于相同的分布式echo协议客户端，来自这些客户端的16384个并发连接重复发送256字节的随机负载，几乎使千兆以太网饱和。
根据测试结果，Netty 4：
GC中断频率是原来的1/5：45.5 vs. 9.2次/分钟
垃圾生成速度是原来的1/5：207.11 vs 41.81 MiB/秒
Lee提到，在Twitter中采用Netty 4还有一些障碍，那就是缓冲区泄漏和核心复杂。
该项目希望增加更多功能，包括HTTP/2、异步DNS解析以及客户端HTTP和SOCKS代理支持。


2，