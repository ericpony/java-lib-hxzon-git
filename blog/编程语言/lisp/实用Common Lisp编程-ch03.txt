实用Common Lisp编程-ch03

定义条件函数：
(defmacro where (&rest clauses)
	`#'(lambda (cd) 
		(and ,@(make-comparisons-list clauses))
	)
)
--
(defun make-comparisons-list (fields)
	(loop while fields
		collection (make-comparison-expr (pop fields) (pop fields))
	)
)
--
(defun make-comparison-expr (field value)
	`(equal (getf cd ,field) ,value)
)
----
定义选择函数：
(defun select (selector-fn)
	(remove-if-not selector-fn *db*)
)
----------------
&rest 表示其余参数。
,@将表达式（必须求值为一个列表）的值嵌入到其外围的列表里。
反引用`阻止表达式求值。
lambda是一个指示器，表示匿名函数。
#'表示获取函数。
--
pop宏，弹出元素。
--
在一个反引用表达式里,逗号开始的子表达式都是被求值的。
----
remove-if-not返回一个新列表，删除不满足谓词的元素。
如：
(remove-if-not 
	#'(lambda (x) (= 0 (mod x 2)))
	'(1 2 3 4 5 6 7 8 9 10)
)
----------------
(where :title "Give Us a Break" :ripped t)
将展开为
#'(lambda (cd)
	(and (equal (getf cd :title) "Give Us a Break")
		(equal (getf cd :ripped) t)
	)
)
================
(select (where :title "Give Us a Break" :ripped t))
===============
定义删除函数：
(defun delete-rows (selector-fn)
	(setf *db* (remove-if selector-fn *db*))
)
===============
定义更新函数：
(defun update 
	(selector-fun &key title artist rating (ripped nil ripped-p) )
	(setf *db*
		(mapcar
			#'(lambda (row)
				(when (funcall selector-fn row)
					(if title (setf (getf row :title) title) )
					(if artist (setf (getf row :artist) artist) )
					(if rating (setf (getf row :rating) rating) )
					(if ripped-p (setf (getf row :ripped) ripped) )
				)
				row)
			*db*
		)
	)
)
--
&key定义关键字形参。
(ripped nil ripped-p)中间表示默认值，最后一个表示该参数是否被实际传递。
mapcar逐个转换列表元素。