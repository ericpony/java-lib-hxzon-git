;（hxzon读书笔记）《clojure编程》第6章：数据类型和协议-自己实现一个set

;by hxzon
;==========
;9，自己实现一个set

;一个用数组实现的set，在保存的数据数量较少时，它将比标准的set有更好的性能，使用更少的内存。

;查看接口包含了哪些方法
(defn scaffold
  "Given an interface, returns a 'hollow' body suitable for use with `deftype`."
  [interface]
  (doseq [[iface methods] (->> interface
                            .getMethods
                            (map #(vector (.getName (.getDeclaringClass %))
                                    (symbol (.getName %))
                                    (count (.getParameterTypes %))))
                            (group-by first))]
    (println (str " " iface))
    (doseq [[_ name argcount] methods]
      (println
        (str " "
          (list name (into '[this] (take argcount (repeatedly gensym)))))))))

(scaffold clojure.lang.IPersistentSet)
; clojure.lang.IPersistentSet
; (get [this G__5617])
; (contains [this G__5618])
; (disjoin [this G__5619])
; clojure.lang.IPersistentCollection
; (count [this])
; (cons [this G__5620])
; (empty [this])
; (equiv [this G__5621])    ;equiv跟equals类似，但是它确保数字之间的值语义。
; clojure.lang.Seqable 
; (seq [this])
; clojure.lang.Counted
; (count [this])    ;这里有两个count方法，其中一个会被遮住。

;----
;示例：用vector实现的set

(declare empty-array-set)

(def ^:private ^:const max-size 4)  ;当数据量多于4时（已不在最佳范围），自动升级为一个普通的hashset。

(deftype ArraySet [^objects items
                   ^int size
                   ^:unsynchronized-mutable ^int hashcode]
  clojure.lang.IPersistentSet
  (get [this x]
    (loop [i 0]
      (when (< i size)
        (if (= x (aget items i))
          (aget items i)
          (recur (inc i))))))
  (contains [this x]
    (boolean
      (loop [i 0]
        (when (< i size)
          (or (= x (aget items i)) (recur (inc i)))))))

  (disjoin [this x]
    (loop [i 0]
      (if (== i size)
        this
        (if (not= x (aget items i))
          (recur (inc i))
          (ArraySet. (doto (aclone items)
                       (aset i (aget items (dec size)))
                       (aset (dec size) nil))
            (dec size)
            -1)))))
  clojure.lang.IPersistentCollection
  (count [this] size)
  (cons [this x]
    (cond
      (.contains this x) this       ;当数据量多于4时，自动升级为一个普通hashset。
      (== size max-size) (into #{x} this)
      :else (ArraySet. (doto (aclone items)
                         (aset size x))
              (inc size)
              -1)))
  (empty [this] empty-array-set)
  (equiv [this that] (.equals this that))   ;equiv直接代理给equals，使得ArraySet的行为跟clojure.lang.APersistentSet行为一致。
  clojure.lang.Seqable
  (seq [this] (take size items))
  Object
  (hashCode [this]
    (when (== -1 hashcode)
      (set! hashcode (int (areduce items idx ret 0
                            (unchecked-add-int ret (hash (aget items idx)))))))
    hashcode)
  (equals [this that]
    (or
      (identical? this that)
      (and (or (instance? java.util.Set that)
             (instance? clojure.lang.IPersistentSet that))
        (= (count this) (count that))
        (every? #(contains? this %) that)))))

(def ^:private empty-array-set (ArraySet. (object-array max-size) 0 -1))

(defn array-set     ;对用户友好的工厂函数，而不是让用户直接使用ArraySet构造函数。
  "Creates an array-backed set containing the given values."
  [& vals]
  (into empty-array-set vals))

;测试
(array-set)
;= #{}

(conj (array-set) 1)
;= #{1}

(apply array-set "hello")
;= #{\h \e \l \o}

(get (apply array-set "hello") \w)
;= nil

(get (apply array-set "hello") \h)
;= \h

(contains? (apply array-set "hello") \h)
;= true

(= (array-set) #{})
;= true

;故障，array-set不是函数。
((apply array-set "hello") \h)
; #<ClassCastException java.lang.ClassCastException:
; user.ArraySet cannot be cast to clojure.lang.IFn>

;故障，打破了=的对称性，根源在于clojure set也是java.util.Set。
(= #{} (array-set))
;= false


(scaffold java.util.Set)
; java.util.Set
; (add [this G__6140])
; (equals [this G__6141])
; (hashCode [this])
; (clear [this])
; (isEmpty [this])
; (contains [this G__6142])
; (addAll [this G__6143])
; (size [this])
; (toArray [this G__6144])
; (toArray [this])
; (iterator [this])
; (remove [this G__6145])
; (removeAll [this G__6146])
; (containsAll [this G__6147])
; (retainAll [this G__6148])

;只需要读的那部分即可。
java.util.Set
(isEmpty [this])
(size [this])
(toArray [this G__6144])
(toArray [this])
(iterator [this])
(containsAll [this G__6147])

;----
;使用数组实现的set
(deftype ArraySet [^objects items
                   ^int size
                   ^:unsynchronized-mutable ^int hashcode]
  clojure.lang.IPersistentSet
  (get [this x]	;查看是否包含x
    (loop [i 0]
      (when (< i size)
        (if (= x (aget items i))	;如果找到x，返回x，否则递增i（即进入下一个元素）
          (aget items i)
          (recur (inc i))))))
  (contains [this x]
    (boolean
      (loop [i 0]
        (when (< i size)
          (or (= x (aget items i)) (recur (inc i)))))))	;如果找到x，返回true，否则递增i（即进入下一个元素）
  (disjoin [this x]		;删除x
    (loop [i 0]
      (if (== i size)
        this
        (if (not= x (aget items i))
          (recur (inc i))	;如果不是x，递增i（即进入下一个元素）
          (ArraySet. (doto (aclone items)
                       (aset i (aget items (dec size)))	;在i处找到x，将末尾的值放入i处
                       (aset (dec size) nil))		;删除末尾（已放到i处），size是自定义字段。
            (dec size)
            -1)))))

  clojure.lang.IPersistentCollection
  (count [this] size)
  (cons [this x]	;添加x
    (cond
      (.contains this x) this
      (== size max-size) (into #{x} this)	;元素个数超过阀值时，自动升级成普通hashmap。
      :else (ArraySet. (doto (aclone items)
                         (aset size x))	;末尾添加x
              (inc size)
              -1)))
  (empty [this] empty-array-set)
  (equiv [this that] (.equals this that))

  clojure.lang.Seqable
  (seq [this] (take size items))	;为何使用take？

  Object
  (hashCode [this]
    (when (== -1 hashcode)		;hashcode是自定义字段。
      (set! hashcode (int (areduce items idx ret 0
                            (unchecked-add-int ret (hash (aget items idx)))))))
    hashcode)
  (equals [this that]
    (or
      (identical? this that)
      (and (instance? java.util.Set that)       ;简化为测试that是否实现java.util.Set接口。
        (= (count this) (count that))
        (every? #(contains? this %) that))))	;that的每个元素都在this中（前面已确保了元素个数一样）。

  clojure.lang.IFn
  (invoke [this key] (.get this key))

  (applyTo [this args]      ;对于通过apply来产生的调用，IFn定义了applyTo函数，它的参数是apply参数的序列。
    (when (not= 1 (count args))
      (throw (clojure.lang.ArityException. (count args) "ArraySet")))
    (this (first args)))

  java.util.Set
  (isEmpty [this] (zero? size))
  (size [this] size)
  (toArray [this array]		;将集合中的元素放到array数组中。
    (.toArray ^java.util.Collection (sequence items) array))        ;sequence从来不会返回nil，而seq会返回nil。
  (toArray [this] (into-array (seq this)))
  (iterator [this] (.iterator ^java.util.Collection (sequence this)))   ;序列本身是java集合，直接返回序列的Iterator。
  (containsAll [this coll]	;是否含有coll的所有元素。
    (every? #(contains? this %) coll)))

(def ^:private empty-array-set (ArraySet. (object-array max-size) 0 -1))

;测试
(= #{3 1 2 0} (array-set 0 1 2 3))
;= true

((apply array-set "hello") \h)
;= \h

;性能测试
(defn microbenchmark
  [f & {:keys [size trials] :or {size 4 trials 1e6}}]
  (let [items (repeatedly size gensym)]
    (time (loop [s (apply f items)
                 n trials]
            (when (pos? n)
              (doseq [x items] (contains? s x))
              (let [x (rand-nth items)]
                (recur (-> s (disj x) (conj x)) (dec n))))))))

(doseq [n (range 1 5)

        f [#'array-set #'hash-set]]
  (print n (-> f meta :name) ": ")
  (microbenchmark @f :size n))
; size 1 array-set : "Elapsed time: 839.336 msecs"
; size 1 hash-set : "Elapsed time: 1105.059 msecs"
; size 2 array-set : "Elapsed time: 1201.81 msecs"
; size 2 hash-set : "Elapsed time: 1369.192 msecs"
; size 3 array-set : "Elapsed time: 1658.36 msecs"
; size 3 hash-set : "Elapsed time: 1740.955 msecs"
; size 4 array-set : "Elapsed time: 2197.424 msecs"
; size 4 hash-set : "Elapsed time: 2154.637 msecs"