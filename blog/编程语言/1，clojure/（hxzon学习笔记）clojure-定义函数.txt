（hxzon学习笔记）clojure-定义函数

by hxzon
《clojure编程》第1章：进入clojure仙境-定义函数（fn），函数字面量

-----
hxzon学习笔记：

fn，letfn（局部函数），defn，defn-（私有函数） 。

=======
一、创建函数：

---- 
1，fn： 
fn是一个特殊形式，用来创建一个函数。

fn接受let样式的绑定数组，let解构在这里同样适用。

函数可以有多个参数列表（即函数可以根据参数个数不同进行重载）。
定义多参数列表的函数时，每套“参数-函数体”都要放在一个单独的括号内。

fn的第一个参数是一个可选的函数名字，使得可以在函数体中引用函数自己。

(def strange-adder (fn  adder-self-reference
                        ([x] (adder-self-reference x 1))
                        ([x y] (+ x y))))
;= #'user/strange-adder

(strange-adder 10)
;= 11

(strange-adder 10 50)
;= 60

----
2，用letfn来解决函数定义互相引用的问题。

具名函数使得可以很简单的创建自递归的函数。

一种更极端的情况是，定义两个互相引用的函数。
这可以使用letfn来解决。

(letfn [ (odd? [n]
                (even? (dec n)))
         (even? [n]
            (or (zero? n)
                (odd? (dec n))))] 
       (odd? 11))
;= true

user=> (fn [] "hello")  
#<user$eval375$fn__376 user$eval375$fn__376@eabd2f>  

user=> ((fn [] "hello"))  
"hello"  

user=> ((fn [x] x) "hello") ; 带参数  
"hello"  

----
http://clojuredocs.org/clojure_core/clojure.core/letfn

(letfn fnspecs & body)
fnspec ==> (fname [params*] exprs) or (fname ([params*] exprs)+)

Takes a vector of function specs and a body, and generates a set of bindings of functions to their names. 
All of the names are available in all of the definitions of the functions, as well as the body.

user=> (letfn [(twice [x]
                 (* x 2))
               (six-times [y]
                 (* (twice y) 3))]
         (println "Twice 15 =" (twice 15))
         (println "Six times 15 =" (six-times 15)))
Twice 15 = 30
Six times 15 = 90
nil

外部不可见。
;; Unable to resolve symbol: twice in this context
user=> (twice 4)
; Evaluation aborted.

;; Unable to resolve symbol: six-times in this context
user=> (six-times 100)
; Evaluation aborted.

----
3，defn是一个封装了def和fn的宏。

defn 宏用来定义一个函数。
它的参数包括一个函数名字，一个可选的注释字符串，参数列表，然后一个方法体。
而函数的返回值则是方法体里面最后一个表达式的值。
所有的函数都会返回一个值， 只是有的返回的值是nil。

user=> (defn f4 "f4 function" [] (println "f4 function"))
#'user/f4  

user=> (f4)  
f4 function  
nil  

user=> (doc f4);通过doc查看函数注释信息  
-------------------------  
user/f4  
([])  
  f4 function  
nil  

--
user=> (defn exp [a f1 b f2 c] (f2 (f1 a b) c));函数作为参数  
#'user/exp  

user=> (exp 5 - 2 + 3)  
6  

--
user=> (defn f [a] (fn [b] (- a b)));函数作为返回值  
#'user/f  

user=> ((f 7) 4)  
3  

----
4，defn-： 

defn-与defn功能一致，都是用于定义函数的，
但是defn-定义的函数作用域是私有的，而defn定义的函数是公有的。

user=> (ns test1)
nil  

test1=> (defn- foo [] "world");定义私有函数foo，返回字符串world  
#'test1/foo  

test1=> (defn bar [] (str "hello " (foo)));定义公有函数bar，并调用私有函数foo  
#'test1/bar  

test1=> (foo)
"world"  

test1=> (bar)
"hello world"  

test1=> (ns test2);切换到test2命名空间中  
nil  

test2=> (test1/bar)
"hello world"  

test2=> (test1/foo);调用test1命名空间的foo函数，出现异常，提示test1的foo函数不是公开的
CompilerException java.lang.IllegalStateException: var: #'test1/foo is not public, compiling:(NO_SOURCE_PATH:1)  


----
5，解构函数参数

defn使用let来做函数参数的绑定。

-1，可变参函数。
使用&表示“剩余参数”。
“剩余参数”列表可以像其它序列一样进行解构。

(defn concat-rest
    [x & rest]  ;不定参数
    (apply str (butlast rest)))
;= #'user/concat-rest

(concat-rest 0 1 2 3 4)
;= "123"

(defn make-user
    [& [user-id]]   ;解构“剩余参数”
    {:user-id (or user-id
        (str (java.util.UUID/randomUUID)))})
;= #'user/make-user

(make-user)
;= {:user-id "ef165515-6d6f-49d6-bd32-25eeb024d0b4"}

(make-user "Bobby")
;= {:user-id "Bobby"}

-2，关键字参数。
有些参数不是必选的，有些参数可能有默认值，有时希望使用者可以不必按照某个特定顺序来传参。
关键字参数跟在固定位置参数后面。

(defn make-user
    [username & {:keys [email join-date] 
                 :or {join-date (java.util.Date.)}}]    ;给join-date定义了默认值。
    {:username username
     :join-date join-date
     :email email
     ;; 2.592e9 -> one month in ms
     :exp-date (java.util.Date. (long (+ 2.592e9 (.getTime join-date))))})
;= #'user/make-user

(make-user "Bobby") 
;= {:username "Bobby", :join-date #<Date Mon Jan 09 16:56:16 EST 2012>,
;= :email nil, :exp-date #<Date Wed Feb 08 16:56:16 EST 2012>}

(make-user "Bobby" 
    :join-date (java.util.Date. 111 0 1)
    :email "bobby@example.com")     ;多余的参数被当做map解构。
;= {:username "Bobby", :join-date #<Date Sun Jan 01 00:00:00 EST 2011>,
;= :email "bobby@example.com", :exp-date #<Date Tue Jan 31 00:00:00 EST 2011>}

注：因为关键字参数是利用let的map解构的特性来实现的，
所以关键字的参数名字理论上可以用任何类型的值（比如数字，字符串，甚至集合）。
下面的示例，使用一个向量做关键字。

(defn foo
    [& {k ["m" 9]}]
    (inc k))
;= #'user/foo

(foo ["m" 9] 19)
;= 20


----
6，前置条件和后置条件。

fn提供对函数参数和函数返回值进行检查的前置和后置条件。
这在单元测试以及确保参数正确性方面非常有用。

========
----
7，函数字面量。
简短的函数可以使用#()，即函数字面量，省去了fn，以及参数列表。
%和%1表示第1个参数，%2，%n ..表示第2、n..个参数；最大的n表示参数个数。

使用 %& 可以定义不定参数， 并且通过 %& 来引用那些剩余的参数。

函数字面量不能嵌套。函数字面量嵌套会很难读懂，也没法区分参数是属于内层还是外层函数。

函数字面量没有隐式地使用do。

#(do (println (str %1 \^ %2))
     (Math/pow %1 %2))

user=> (#(/ % 3) 4);结果为3/4  
4/3  

user=> (#(/ %2 %1) 3 4);结果为3/4  
4/3  

user=> (#(apply / %&) 3 5 7);结果为3/5/7  
3/35  


========
8，
----
8.1，组合函数comp： 
形如： 

((comp f1 f2 .. fn) arg1 arg2 .. argn)  

就是对参数从右到左组合执行所有函数，可以转变为： 

(f1 (f2 (.. (fn arg1 arg2 .. argn))))  

举例如下： 

user=> (defn f [x y] (- (* x y)));使用defn定义函数方式  
#user/f  

user=> (f 2 4)  
-8  

user=> (def fc (comp - *));使用comp定义组合函数方式  
#user/fc  

user=> (fc 2 4)  
-8  

----
8.2，偏函数partial： 
形如： 

((partial  f  arg1 arg2 .. argn)  arga argb .. argz)  

就是执行： 
(f  arg1 arg2 .. argn  arga argb .. argz) 
注意：偏函数的第一个参数是一个函数，后面至少有1个其他参数 。

partial函数称为“偏函数”或者“部分完整函数”，因为它是不完整的，定义也用def而不是defn。 

user=> (defn f [n] (* n 10));正常函数  
#'user/f  

user=> (f 2)  
20  

user=> (def fp (partial * 10));偏函数  
#'user/fp  

user=> (fp 2)  
20  

----
8.3，constantly函数： 

constantly函数接受一个参数x，并返回一个变参函数，该变参函数无论参数是什么，都返回这个x值。 

user=> (def consf (constantly "a"))  
#'user/consf  

user=> (consf 1 2 3)  
"a"  

user=> (consf "a")  
"a"  

user=> (consf [1 2 3])  
"a"  


============
二、函数调用

----
1，->: 
宏-> 我们也称为 “thread” 宏, 它本质上是调用一系列的函数，前一个函数的返回值作为后一个函数的参数，返回最后一次函数调用的值。
比如下面两行代码的作用是一样的： 

user=>(first (.split (.replace (.toUpperCase "a b c d") "A" "X") " "))  
user=>"X"   

user=> (-> "a b c d" .toUpperCase (.replace "A" "X") (.split " ") first)  
user=>"X"   

这样调用的好处是更少的()，也更接近于scala的习惯。 

(-> (/ 144 12) (/ 2 3) str keyword list)  

(list (keyword (str (/ (/ 144 12) 2 3))))  

上面两句结果一样。 

----
2，->>： 
后面的函数迭代使用之前的函数结果作为最后一个参数，返回最后一次函数调用的值 。


(-> 10 (/ 3)) ; 10/3  10作为/函数第一个参数  

(->> 10 (/ 3)) ; 3/10  10作为/函数最后一个参数  

----
3，eval： 

eval解析表达式数据结构（不是字符串），并返回结果。 

user=> (eval (str "(println 1)"));str函数返回字符串  
"(println 1)"  

user=> (read-string "(println 1)");而read-string函数用于从字符串中读取对象  
(println 1)  

user=>  (eval (read-string "(println 1)"))  
1  

----
4，apply函数： 

apply 把给定的集合里面的所有元素一次性地给指定的函数作为参数调用，然后返回这个函数的返回值。
可以把apply看作是SQL里面的聚合函数，如下： 

user=> (apply + [1 2 3 4])  
10  


==========
三、函数检查 

fn?: 
fn?用于检查给定的参数是否为函数，是返回true，否则返回false。

user=> (fn? #("test"))  
true  

user=> (fn? +)  
true  

user=> (fn? 1)  
false  

参考资料：
clojure-基本语法-函数定义
http://dead-knight.iteye.com/blog/1828075
