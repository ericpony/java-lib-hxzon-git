（hxzon读书笔记）《计算机程序的构造和解释》-非确定性计算

by hxzon
=====
第4章 元语言抽象

4.3 scheme的变形--非确定性计算 
4.3.1 amb和搜索 
4.3.2 非确定性程序的实例 
4.3.3 实现arab求值器

http://mitpress.mit.edu/sicp/full-text/book/book-Z-H-28.html

======
给求值器添加一种支持自动搜索的功能。

非确定性计算与流处理类似，对于“生成和检测式”的应用特别有价值。

有两个正整数的列表，我们要从两个列表中各取一个整数，它们之和是素数。
这件事可以采用下面的过程描述：

(define (prime-sum-pair list1 list2)
    (let ((a (an-element-of list1))
          (b (an-element-of list2)))
        (require (prime? (+ a b))))
        (list a b))

这个过程没有描述出一种解决它的方法，但它就是一个合法的“非确定性”程序。

在一个非确定性语言里，表达式可以有多于一个可能的值。
例如上面的an-element-of，可能返回一个给定表里的任何一个元素。

非确定性程序求值器将进行相关的工作，从中选出一个可能的值，并维持有关选择的轨迹。
如果随后的要求无法满足，求值器就会尝试另一种不同的选择，
而且它会不断的做出新选择，直到求值成功。

惰性求值器使程序员摆脱有关值如何延时或者强迫的细节，
而非确定性求值器，使程序员摆脱如何做出选择的细节。

流处理中利用惰性求值器，设法松弛装配出可能回答的流的时间，与实际的流元素产生出来的时间之间的关系。
它支持产生一种错觉，好像所有可能的结果都以一种无时间顺序的方式摆在面前。

非确定性程序求值器支持另一种错觉，时间是有分支的，而我们的程序里保存着所有可能的不同执行历史。
在遇到一个死胡同时，我们总可以回到以前的某个选择点，并沿着另一个分支继续下去。

非确定性程序求值器称为amb求值器，因为它基于一个新的特殊操作符，amb。

====
4.3.1，amb和搜索

表达式(amb e1 e2 e3 ...)“有歧义性地”返回n个表达式中某一个的值。

例如(list (amb 1 2 3) (amb 'a 'b) )
可以有如下六个可能的值：
(1 a) (1 b) (2 a) (2 b) (3 a) (3 b)

只有一个选择的amb将产生常规的一个值。

没有选择的amb是一个没有可接受值的表达式，可以理解为，对它的求值将导致计算“失败”。

定义，某个特定谓词必须为真：
(define (require p)
    (if (not p) (amb)))

有了amb和require，就可以定义其它过程。

(define (an-element-of items)
    (require (not (null? items)))
    (amb (car items) (an-element-of (cdr items))))

还可以表述无穷的选择。
(define (an-integer-starting-from n)
    (amb n (an-integer-starting-from (+ n 1))))

非确定性选择潜在的返回了所有可能的值，而计算是分支的，所以各个值将被分别探查。

一个amb表示了一个非确定性的“选择点”。

系统化的搜索所有可能的执行路径。
求值器每遇到一个amb时，一开始总是选择第一个可能性。
这一选择又可能导致随后的选择。
如果选择的结果导致失败，那么求值器就自动魔法般的回溯到最近的选择点，并去试验下一个可能性。
如果它在任何选择点用完了所有的可能性，就退回到前一个选择点，并从那里继续下去。
这个过程产生的是一种称为“深度优先”的搜索策略，也称为“按照历史回溯”。

基于相互关联的事实之间的依赖关系的非历史的回溯模式，称为“依赖导向的回溯”。
新的构造搜索的形式，称为“真值保持”。

驱动循环

如果希望得到下一个成功执行的值，那就可以要求解释器回溯（try-again），让它试着产生第二个没有失败的运行。

;;; Amb-Eval input:
(prime-sum-pair '(1 3 5 8) '(20 35 110))
;;; Starting a new problem
;;; Amb-Eval value:
(3 20)
;;; Amb-Eval input:
try-again
;;; Amb-Eval value:
(3 110)
;;; Amb-Eval input:
try-again
;;; Amb-Eval value:
(8 35)
;;; Amb-Eval input:
try-again
;;; There are no more values of
(prime-sum-pair (quote (1 3 5 8)) (quote (20 35 110)))
;;; Amb-Eval input:
(prime-sum-pair '(19 27 30) '(11 36 58))
;;; Starting a new problem
;;; Amb-Eval value:
(30 11)

====
4.3.2，非确定性程序的示例

----
-1，逻辑谜题

贝克、库伯、弗莱舍、米勒、斯麦尔住在一个五层公寓楼的不同层。
贝克不住在顶层，库伯不住在底层，弗莱舍不住在顶层也不住在底层。
米勒住的比库伯高一层，斯麦尔不住在弗莱舍相邻的层，弗莱舍不住在库伯相邻的层。
请问他们各住哪一层。

(define (multiple-dwelling)
    (let (  (baker (amb 1 2 3 4 5))
            (cooper (amb 1 2 3 4 5))
            (fletcher (amb 1 2 3 4 5))
            (miller (amb 1 2 3 4 5)))
        (require
            (distinct? (list baker cooper fletcher miller smith)))
        (require (not (= baker 5)))
        (require (not (= cooper 1)))
        (require (not (= fletcher 5)))
        (require (not (= fletcher 1)))
        (require (> miller cooper))
        (require (not (= (abs (- smith fletcher)) 1)))
        (require (not (= (abs (- fletcher cooper)) 1)))
        (list   (list 'baker baker)
                (list 'cooper cooper)
                (list 'fletcher fletcher)
                (list 'miller miller)
                (list 'smith smith))))

(multiple-dwelling)
;= ((baker 3) (cooper 2) (fletcher 4) (miller 5) (smith 1))

----
-2，自然语言的语法分析

(define nouns '(noun student professor cat class))
(define verbs '(verb studies lectures eats sleeps))
(define articles '(article the a))

(sentence (noun-phrase (article the) (noun cat))
          (verb eats))

(define (parse-sentence)
  (list 'sentence
         (parse-noun-phrase)
         (parse-word verbs)))

(define (parse-noun-phrase)
  (list 'noun-phrase
        (parse-word articles)
        (parse-word nouns)))

(define (parse-word word-list)
  (require (not (null? *unparsed*)))
  (require (memq (car *unparsed*) (cdr word-list)))
  (let ((found-word (car *unparsed*)))
    (set! *unparsed* (cdr *unparsed*))
    (list (car word-list) found-word)))

(define *unparsed* '())
(define (parse input)
  (set! *unparsed* input)
  (let ((sent (parse-sentence)))
    (require (null? *unparsed*))
    sent))

;;; Amb-Eval input:
(parse '(the cat eats))
;;; Starting a new problem
;;; Amb-Eval value:
(sentence (noun-phrase (article the) (noun cat)) (verb eats))

(define prepositions '(prep for to in by with))

(define (parse-prepositional-phrase)
  (list 'prep-phrase
        (parse-word prepositions)
        (parse-noun-phrase)))

(define (parse-sentence)
  (list 'sentence
         (parse-noun-phrase)
         (parse-verb-phrase)))
(define (parse-verb-phrase)
  (define (maybe-extend verb-phrase)
    (amb verb-phrase
         (maybe-extend (list 'verb-phrase
                             verb-phrase
                             (parse-prepositional-phrase)))))
  (maybe-extend (parse-word verbs)))

(define (parse-simple-noun-phrase)
  (list 'simple-noun-phrase
        (parse-word articles)
        (parse-word nouns)))
(define (parse-noun-phrase)
  (define (maybe-extend noun-phrase)
    (amb noun-phrase
         (maybe-extend (list 'noun-phrase
                             noun-phrase
                             (parse-prepositional-phrase)))))
  (maybe-extend (parse-simple-noun-phrase)))

(sentence
 (noun-phrase
  (simple-noun-phrase (article the) (noun student))
  (prep-phrase (prep with)
               (simple-noun-phrase
                (article the) (noun cat))))
 (verb-phrase
  (verb sleeps)
  (prep-phrase (prep in)
               (simple-noun-phrase
                (article the) (noun class)))))

(sentence
 (simple-noun-phrase (article the) (noun professor))
 (verb-phrase
  (verb-phrase
   (verb lectures)
   (prep-phrase (prep to)
                (simple-noun-phrase
                 (article the) (noun student))))
  (prep-phrase (prep with)
               (simple-noun-phrase
                (article the) (noun cat)))))

(sentence
 (simple-noun-phrase (article the) (noun professor))
 (verb-phrase
  (verb lectures)
  (prep-phrase (prep to)
               (noun-phrase
                (simple-noun-phrase
                 (article the) (noun student))
                (prep-phrase (prep with)
                             (simple-noun-phrase
                              (article the) (noun cat)))))))









====
4.3.3，实现amb求值器

（暂略）


