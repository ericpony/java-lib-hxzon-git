（hxzon读书笔记）《大型多人在线游戏开发》3，服务端开发

by hxzon
==========
《3，服务端开发》

《3.1，无缝服务器：优点和缺点》
《3.2，服务端对象的更新频率》
《3.3，MMP服务器开发和维护》
《3.4，小型入口：使用手持设备来接入MMP游戏世界》
《3.5，使用python进行精确的游戏事件广播》

===========
《3.6，在MMP游戏中实现移动和物理模块的注意事项》
（2013.11.15）

防御恶意玩家（作弊）。
《3.6.3，服务端永远是对的》
游戏系统应该通过客户端代码来让玩家感觉他们在进行控制，而对这些事物的最终裁决则应该由服务端来进行。

《3.6.4，移动的代价》
客户端能够以和帧频一样的速度向服务端发送移动消息，但这数据量太大了。
只有在一个更新周期中最新的移动数据包才会真正地发送给服务器。

使用这样的技术最重要的就是要确保在两个位置之间的采样点距离应该小于游戏中最小的碰撞/触发体（collision/trigger volume）。
譬如说，如果两个采样位置之间最大不超过1.2米，那么所有的墙壁、陷阱、瞬间移动门户等玩家可能会被阻挡或是触发的物体的尺寸都必须超过1.2米，
这样才可以确保玩家不会穿过它。
《3.6.5，移动速度》
一种保守的方法，即只允许以两种速度移动：快速移动和慢速移动。

《3.6.7，碰撞检测》

碰撞测试的基本方针是尽量把任何时刻必须进行碰撞检测的物体数量最小化。

-1，碰撞体（collision volumes）。
用一个简单的几何形状来构建碰撞体并把它用于粗略的判断。
-2，角色碰撞体。
不应该试图把整个角色都用所选择的形体来包住。
通常可以使用一个和角色躯干类似的圆柱体，最低不要低于膝盖上方，最高不要超过角色的肩膀。
-3，角色与角色之间的碰撞。
角色之间是否碰撞，各有优点。
有些游戏实现角色碰撞时采用“推挤（shove）”，即一个玩家角色可以把另一个玩家角色推开。
-4，缩放。如果游戏支持改变角色几何建模的大小。

《3.6.8，物品放置》
允许玩家在游戏世界任意放置物品通常会导致大量的问题。
一些可行方案：
-1，在一定时间内，把放置的物品标记为属于它原先的主人。这段时间过后，其它玩家可以拿走。
-2，实现一个非常积极的衰变机制：如果某个物品在一段时间内没有人认领，会自动销毁。
-3，把放置的物品抽象为某种通用的容器，看上去就好像一个袋子一样；并且不能被堆叠，也不能放置在其它容器中。
-4，在游戏世界中指定一些预先定义的、可接受的位置来让玩家放置物品。
-5，不允许在公共区域放置任何物品。
-6，实现一些会四处走动并且会把放置在地上的物品捡起的npc。
-7，物品只能在预先定义的放置点上进行有限的堆叠，譬如说可以把画挂在墙上，可以把银器放在桌子上。
-8，在每次向客户端发送更新数据时，为与物品相关的信息设置一个上限，赋予那些会影响游戏的对象更高的优先级，譬如说有威胁的怪物。

《3.6.9，侵入检测（hack detection）》

恶意玩家所带来的潜在影响值得对他们进行如此细致的审查。

（第3章结束。）
