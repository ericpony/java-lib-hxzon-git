（hxzon学习笔记）clojure-var，def，let，binding

by hxzon
《clojure编程》第4章：多线程和并发-Vars

var，def，let，binding

----------
hxzon摘要：

1，定义var（def），私有var（^:private），私有函数（defn-），常量（^:const）。
（hxzon：var是一个存储位置，不同的存储位置可以同名，它们会相互遮蔽。）

--
2，动态作用域（^:dynamic）。
binding，在某个线程上给这个全局“标识”设置一个新值，
所以在这个线程上覆盖了这个“标识”的根绑定值（不影响其它线程）。
而let则是一个完全不同的“标识”，只是名字刚好相同，所以遮住了同名的全局“标识”。

(set! *response-code* response-code)

set! ，替换动态var在本地绑定的当前值。

动态绑定传播。（需认真理解。）

--
3，前置声明declare（定义var时先不给它赋值）。

4，defonce（只赋值一次）。

--
5，
varA捕获当时的值。
#‘varA捕获此时的值。

(defn a [x] (+ 5 x))
;= #'user/a

(def b (partial a 5))
;= #'user/b

(def c (partial #'a 5))
;= #'user/c

(b)
;= 10

(c)
;= 10

(defn a [x] (+10 b))
;= #'user/a

(b)
;= 10

(c)
;= 15


======
根绑定：变量的初始值称为根绑定。
当你使用def和defn定义一个对象时，对象就存贮在变量中。
--
绑定：函数调用时，传入参数值绑定到参数名称，函数参数绑定有一个词法作用域：仅在函数体范围内可见。
特殊形式let可以创建一组词法绑定：
(let [bingdings*] exprs*)

其中bingdings在exprs中有效，let返回exprs最后一个表达式的值。
--
Interning：命名空间维护了每个Var对象的全局符号映射。
使用def定义变量时，如果没有在当前的命名空间找到该符号，就创建一个，否则使用现有的。
创建或者寻找的过程被称作interning。
（hxzon：intern的意思是扣留、羁押，这里指放入常量池。）

======
1，clojure中有4种引用类型可以用来表示标识：var，ref，agent，atom。

2，var跟其它引用类型的不同在于，var的状态不是在时间尺度上维护的，
它们提供的是一个命名空间内全局的实体，可以在每个线程上把这个实体绑定到不同的值。

clojure中，用var来表示稳定的标识。
(def sarah {:name "Sarah" :age 25 :wears-glasses? false})
我们可以说，Sarah是由var sarah来标识的。

clojure对一个符号进行求值，其实就是在当前命名空间寻找名字是这个符号的那个var，
并对它解引用获取它的值。

var是一种可修改的内存地址，从而可以保存任何值。
在var被定义的命名空间里，var和一个符号相关联，
通过符号来使用这个var，得到这个var的值。

======
3，定义var：使用def或者它的引申物。

user=> (def x "just a value, nothing else." 10086)
#'user/x

user=> (doc x)
-------------------------
user/x
  just a value, nothing else.
  nil

========
4，私有var

通过给var添加一个:private的元数据。

一个私有var有以下特性：
-1，在其它命名空间里面只能通过全限定名称对其进行访问。
-2，要访问它的值只能通过解引用。

（hxzon理解：即只能 @#'xx/yy ？不能 xx/yy ？）

(def ^:private everything 42)
;= #'user/everything

(ns other-namespace)
;= nil

(refer 'user)
;= nil

everything
;= #<CompilerException java.lang.RuntimeException:
;= Unable to resolve symbol: everything in this context, compiling:(NO_SOURCE_PATH:0)>

@#'user/everything
;= 42

--
user=> (def ^{:private true} v 123)
#'user/v

user=> (meta #'v)
{:ns #<Namespace user>, :name v, :private true, :line 36, :file "NO_SOURCE_PATH"}

5，私有函数
通过defn-来定义，和defn完全一样，只是会自动加上一个:private元数据。

6，文档字符串也只是var上的元数据而已。

7，常量
给var加上一个:const元数据，但它不只是一个简单标记，它在运行时会有一些实质影响：
任何对于常量var的引用都不是在运行时求值的（普通var则是），
这些引用在编译器会被全部替换成这个常量所对应的值。

(def ^:const max-value 255)
;= #'user/max-value

(defn valid-value?
	[v]
	(<= v max-value))
;= #'user/valid-value?

(def max-value 500)
;= #'user/max-value
这里重新定义了var，但不会影响valid-value? 。

(valid-value? 299)
;= false

==========
8，动态作用域

一个var的作用域在定义它的形式之内。

(let [a 1
	b 2]
	(println (+ a b)) 
	(let [b 3
		+ -]
		(println (+ a b)))) 
;= 3
;= -2

内层定义了两个绑定，它们“遮盖”了外层的绑定。
（hxzon：
相当于其它语言的本地局部变量，但它们不是变量。
所有的本地绑定都是不可变的。内层可以“遮盖”外层的值，但是无法改变一个let绑定的值。
另，loop和recur满足你在每个循环都对本地值进行改变的需求。
）

----
每个var有一个根绑定，是使用def及其变种定义var的时候赋予的值，同时也是一般情况下对它解引用得到的值。

但如果把一个var定义成动态的（加上:dynamic元数据），就可以利用binding在当前线程上覆盖这个根绑定的值（不影响其它线程）。

(def ^:dynamic *max-value* 255)
;= #'user/*max-value*

(defn valid-value?
	[v]
	(<= v *max-value*))
;= #'user/valid-value?

(binding [*max-value* 500]
	(valid-value? 299))
;= true

(binding [*max-value* 500]
	(println (valid-value? 299))
	(doto (Thread. #(println "in other thread:" (valid-value? 299)))
		.start
		.join))
;= true
;= in other thread: false

注：对于那些你期望通过binding来对根绑定进行覆盖的动态var，一般在命名时以星号开头和结尾。

--
(def ^:dynamic *var* :root)
;= #'user/*var*

(defn get-*var* [] *var*)
;= #'user/get-*var*

(binding [*var* :a]
    (binding [*var* :b]
        (binding [*var* :c]
            (get-*var*))))
;= :c

----
动态作用域被广泛使用在各种类库及clojure本身的实现里，
用来提供一种修改api默认配置的方法，本质上其实是给函数提供了一个隐式的参数。

反过来，也可以通过动态作用域，让下层函数给上层函数返回一些东西。

（hxzon：动态作用域相当于其它语言的全局变量。）

示例：下层给上层返回一些值：

(def ^:dynamic *response-code* nil)

(defn http-get
  [url-string]
  (let [conn (-> url-string java.net.URL. .openConnection)
        response-code (.getResponseCode conn)]
    (when (thread-bound? #'*response-code*)
      (set! *response-code* response-code)) //注意！set! ，替换动态var在本地绑定的当前值。
//因此通过binding建立这个绑定的——不管这个调用者是在调用栈的上一层还是上50层的函数，都可以拿到这个“返回值”。
//这种方式，简单的如本例，用来返回一些附加的值，复杂的，可以实现非本地的返回机制。
    (when (not= 404 response-code) (-> conn .getInputStream slurp))))

(http-get "http://google.com")
;= "<!doctype html><html><head>..."

*response-code*
;= nil

(binding [*response-code* nil]
  (let [content (http-get "http://google.com/bad-url")]
    (println "Response code was:" *response-code*)
    ; ... do something with `content` if it is not nil ...
    ))
;= Response code was: 404
;= nil

----
动态作用域会通过clojure原生的并发形式进行传播。
clojure的动态var绑定可以在线程之间进行传播，这种机制叫做“绑定传播”
——当使用agent（通过send和send-off），future以及pmap和它的变种的时候。

(binding [*max-value* 500]
	(println (valid-value? 299))
	@(future (valid-value? 299)))
; true
;= true

虽然valid-value?是在另外一个独立的线程上被调用的，但是future把这个动态作用域传播到了这个线程上面。

不过要注意，虽然pmap是支持绑定传播的，但是一般的惰性序列是不支持的。

(binding [*max-value* 500]
	(map valid-value? [299]))
;= (false)

一种解决方法是，手动将这个动态作用域“传播”到惰性序列中“计算实际用到这个动态var的”地方。

(map #(binding [*max-value* 500]
		(valid-value? %))
	[299])
;= (true)

--
(def ^:dynamic *num* 1)

(binding [*num* 2] (future (println *num*)))
;; prints "2", not "1"

============
9，var不是变量。
def定义的都是顶级var，是全局可访问的。

var从本质上来说，是被设计用来保存一些值，然后直到程序或者repl结束的时候都不再改变。
如果你想要一种可以改变的东西，可以尝试clojure提供的其它的引用类型。

----
但是，在某些情况下，如果确实需要对一个var的根绑定进行修改，可以使用alter-var-root函数，
它以这个var本身以及一个将要作用在var身上的函数作为参数。

(def x 0)
;= #'user/x

(alter-var-root #'x inc)
;= 1

如果这个var是一个函数，那就可以利用这种机制来实现面向切面的编程。

----
我们也可以使用with-redefs来暂时修改一些var的根绑定，
它会在程序控制流离开它的作用域时，把var的根绑定恢复到之前的状态。
这个对于测试非常有用，可以让我们对一些函数或者函数所依赖的一些跟环境有关的变量进行mock。


========
10，提前声明

如果定义一个var时不给它赋值，则称这个var是“未绑定”的，
如果你对它进行解引用，它会返回一个“占位符”对象。

(def j)
;= #'user/j
j
;= #<Unbound Unbound: #'user/j>

在你需要先使用var，后续代码再给它赋值的情况下，这个特性很有用。

例如要实现某种类型的算法，它的实现需要交替递归。
或者，你只是想把主要的、公共的api放在源文件的最前面，但这些api需要引用别的帮助函数（这些函数你想放在后面）。

不过，更好的方式是使用declare宏，用它可以明确告诉读者，你是在定义一个未绑定的var，
而且它允许你在一个表达式里面一次定义多个未绑定的var。

(declare complex-helper-fn other-helper-fn) 

(defn public-api-function
	[arg1 arg2]
	...)

(other-helper-fn arg1 arg2 (complex-helper-fn arg1 arg2)) 

(defn- complex-helper-fn 
	[arg1 arg2]
	...)

(defn- other-helper-fn
	[arg1 arg2 arg3]
	...)
=========
hxzon补充：

11，defonce提供了 def 的一个变种：当且仅当给定符号还没有绑定时，它才为这个符号设置绑定：

user=> (defonce s "a string")
#'user/s

user=> s
"a string"

user=> (defonce s "another string")     ; 设置无效
nil

user=> s
"a string"

