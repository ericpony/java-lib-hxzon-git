（hxzon学习笔记）C++

by hxzon
====
1，函数中的变量使用static修饰，
该变量仍然是局部作用域，但是生命周期变为整个程序运行期间。
该变量只在函数第一次调用时初始化一次。
《C++ Primer中文版第3版》

#include <iostream> 
int traceGcd( int v1, int v2 ) 
{ 
 static int depth = 1; 
 cout << "depth #" << depth++ << endl; 
 if ( v2 == 0 ) { 
  depth = 1; 
    return v1; 
 } 
 return traceGcd( v2, v1%v2 ); 
} 

====
2，
《C++ Primer中文版第5版》2.2，3.3

在C++中，初始化和赋值是不同的操作。

--
默认初始化：声明变量时，没有指定值。
在函数体外的内置类型变量，会被默认初始化。
在函数体内的内置类型变量，不会默认初始化。

--
列表初始化（List Initialization）：使用花括号。

intunits_sold = 0;
int units_sold = {0};
int units_sold{0};
int units_sold(0);

使用列表初始化还有个好处，会检查精度丢失。

longdouble ld = 3.1415926536;
int a{ld}, b = {ld}; // error: narrowing conversion required
int c(ld), d = ld;  // ok: but value will be truncated

vector的列表初始化：

vector<int> v1(10);  // v1 has ten elements with value 0
vector<int> v2{10};  // v2 has one element with value 10
vector<int> v3(10, 1); // v3 has ten elements with value 1
vector<int> v4{10, 1}; // v4 has two elements with values 10 and 1

vector<string> v5{"hi"}; // list initialization: v5 has one element
vector<string> v6("hi"); // error: can't construct a vector from a string
literal
vector<string> v7{10};  // v7 has ten default-initialized elements
vector<string> v8{10, "hi"}; // v8 has ten elements with value "hi"

列表初始化优先作为元素值，如果不能作为元素值，才使用构造函数。

----
直接初始化

复制初始化

strings1;  // default initialization; s1 is the empty string
string s2 = s1;  // s2 is a copy of  s1
string s3 = "hiya";  // s3 is a copy of the string literal
string s5 = "hiya";  // copy initialization
string s6("hiya");  // direct initialization
string s4(10, 'c');  // s4 is cccccccccc

字符串默认初始化为空串。

3，

