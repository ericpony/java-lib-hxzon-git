游戏引擎架构
杰森·格雷戈瑞 (Jason Gregory) (作者), 叶劲峰 (Milo Yip) (译者)

出版社: 电子工业出版社; 第1版 (2014年1月1日)
外文书名: Game Engine Architecture
平装: 772页
语种： 简体中文
开本: 16

====
编辑推荐

《游戏引擎架构》由游戏界传奇人物云风及“天天爱消除”团队倾情作序推荐，既是游戏工作者必读Bible，对其他IT从业者也不无裨益。

內容包括：
- 游戏开发中的大规模C++软件架构
- 游戏编程所需的数学
- 供调试、源代码控制及性能剖析的游戏开发工具
- 引擎基础系统、渲染、碰撞、物理、角色动画、游戏世界对象模型等引擎子系统
- 多平台游戏引擎
- 多处理器环境下的游戏编程
- 工作管道及游戏资产数据库

媒体推荐

本书针对每一个现代游戏开发相关的重要系统和话题，给出一个完美、综合的概览，无论是计算机科学、软件工程，或是游戏主程，以及业余爱好者、游戏玩家，本书均不可或缺。
——获评CHOICE杰出学术作品

……这里有最专业的领域知识与概念讲解……有了它，你将具备对如何构建游戏引擎的深入理解……本书让人印象尤其深刻，因为该领域再也找不到另一本如此详尽的图书。 
——Eric Haines, www.realtimerendering.com/blog/

作者将数年经验及专业积累集中在这本完整、全面的著作中，内容跨越游戏引擎开发理论与实践。书中提供的游戏开发过程各方面的精彩实例，保罗万象且对读者大有补益。不仅游戏引擎开发人员看后会大受鼓舞，甚至也可作为有经验的该领域技术专家的实用参考。本书可谓无价，除内容“用户友好”外，其附录也值得强烈推荐，无论是个人开发者、专家还是计算机科学学术人员，都可将其作为资源集合与参考资料，当然游戏设计架构人员更是不可不读。
——The Midwest Book Review

本书涵盖有关如何开发游戏引擎要旨的巨量数据。 
——Gamasutra.com, November 2009

本书曾位列“the Game Developer”杂志前沿大奖候选图书。
——PR Newswire

作者简介

Jason Gregory在1994年开始任职专业软件工程师，自1999年3月开始在游戏产业中任职软件工程师。在圣迭哥Midway Home Entertainment公司开始游戏编程的他，为《疯狂飞行员（Freaky Flyers）》及《Crank the Weasel》开发PlayStation 2/Xbox上的动画系统。在2003年，他转到洛杉矶艺电，为《荣誉勋章：血战太平洋（Medal of Honor: Pacific Assault）》开发游戏引擎及游戏性技术，并在《荣誉勋章：空降神兵（Medal of Honor: Airborne）》中担任首席工程师。他现时是顽皮狗公司的通才程序员，为《神秘海域：德雷克船长的宝藏（Uncharted: Drake's Fortune）》及《神秘海域：纵横四海（Uncharted: Among Thieves）》开发引擎及游戏性软件。他也在南加州大学教授游戏技术的课程。

叶劲峰（Milo Yip）从小自习编程，并爱好计算机图形学。
上中学时兼职开发策略RPG《王子传奇》，该游戏在1995年于台湾发行。
其后他获取了香港大学认知科学学士、香港中文大学系统工程及工程管理哲学硕士。
毕业后在香港理工大学设计学院从事游戏引擎及相关技术的研发，职至项目主任。
除发表学术文章外，也曾合著《DirectX9游戏编程实务》。
2008年往上海育碧担任引擎工程师开发《美食从天而降（Cloudy with a Chance of Meatballs）》Xbox360/PS3/Wii/PC，
2009年起于麻辣马开发《爱丽丝：疯狂回归（Alice: Madness Returns）》Xbox360/PS3/PC，
2011年加入腾讯互动娱乐引擎技术中心担任专家工程师，所研发的技术已用于《斗战神》、《天涯明月刀》、《众神争霸》等项目中。

====
目录

推荐序1 
推荐序2 
译序 
序言 
前言 
致谢 

第一部分基础 

第1章导论 
1.1典型游戏团队的结构 
1.2游戏是什么 
1.3游戏引擎是什么 
1.4不同游戏类型中的引擎差异 
1.5游戏引擎概观 
1.6运行时引擎架构 
1.7工具及资产管道 

第2章专业工具 
2.1版本控制 
2.2微软VisualStudio 
2.3剖析工具 
2.4内存泄漏和损坏检测 
2.5其他工具 

第3章游戏软件工程基础 
3.1重温C++及最佳实践 
3.2C／C++的数据、代码及内存 
3.3捕捉及处理错误 

第4章游戏所需的三维数学 
4.1在二维中解决三维问题 
4.2点和矢量 
4.3矩阵 
4.4四元数 
4.5比较各种旋转表达方式 
4.6其他数学对象 
4.7硬件加速的SIMD运算 
4.8产生随机数 

第二部分低阶引擎系统 

第5章游戏支持系统 
5.1子系统的启动和终止 
5.2内存管理 
5.3容器 
5.4字符串 
5.5引擎配置 

第6章资源及文件系统 
6.1文件系统 
6.2资源管理器 

第7章游戏循环及实时模拟 
7.1渲染循环 
7.2游戏循环 
7.3游戏循环的架构风格 
7.4抽象时间线 
7.5测量及处理时间 
7.6多处理器的游戏循环 
7.7网络多人游戏循环 

第8章人体学接口设备（HID） 
8.1各种人体学接口设备 
8.2人体学接口设备的接口技术 
8.3输入类型 
8.4输出类型 
8.5游戏引擎的人体学接口设备系统 
8.6人体学接口设备使用实践 

第9章调试及开发工具 
9.1日志及跟踪 
9.2调试用的绘图功能 
9.3游戏内置菜单 
9.4游戏内置主控台 
9.5调试用摄像机和游戏暂停 
9.6作弊 
9.7屏幕截图及录像 
9.8游戏内置性能剖析 
9.9游戏内置的内存统计和泄漏检测 

第三部分图形及动画 

第10章渲染引擎 
10.1采用深度缓冲的三角形光栅化基础 
10.2渲染管道 
10.3高级光照及全局光照 
10.4视觉效果和覆盖层 
10.5延伸阅读 

第11章动画系统 
11.1角色动画的类型 
11.2骨骼 
11.3姿势 
11.4动画片段 
11.5蒙皮及生成矩阵调色板 
11.6动画混合 
11.7后期处理 
11.8压缩技术 
11.9动画系统架构 
11.10动画管道 
11.11动作状态机 
11.12动画控制器 

第12章碰撞及刚体动力学 
12.1你想在游戏中加入物理吗 
12.2碰撞／物理中间件 
12，3碰撞检测系统 
12.4刚体动力学 
12.5整合物理引擎至游戏 
12.6展望：高级物理功能 

第四部分游戏性 

第13章游戏性系统简介 
13.1剖析游戏世界 
13.2实现动态元素：游戏对象 
13.3数据驱动游戏引擎 
13.4游戏世界编辑器 

第14章运行时游戏性基础系统 
14.1游戏性基础系统的组件 
14.2各种运行时对象模型架构 
14.3世界组块的数据格式 
14.4游戏世界的加载和串流 
14.5对象引用与世界查询 
14.6实时更新游戏对象 
14.7事件与消息泵 
14.8脚本 
14.9高层次的游戏流程 

第五部分总结 

第15章还有更多内容吗 
15.1一些未谈及的引擎系统 
15.2游戏性系统 

参考文献 
中文索引 
英文索引

====
序言

欢迎来到《游戏引擎架构》世界。本书旨在全面探讨典型商业游戏引擎的主要组件。游戏编程是一个庞大的主题，有许多内容需要讨论。不过相信你会发现，我们讨论的深度将足以使你充分理解本书所涵盖的工程理论及常用实践的方方面面。话虽如此，令人着迷的漫长游戏编程之旅其实才刚刚启程。与此相关的每项技术都包含丰富内容，本书将为你打下基础，并引领你进入更广阔的学习空间。
本书焦点在于游戏引擎的技术及架构。我们会探讨商业游戏引擎中，各个子系统的相关理论，以及实现这些理论所需要的典型数据结构、算法和软件接口。游戏引擎与游戏的界限颇为模糊。我们将把注意力集中在引擎本身，包括多个低阶基础系统（low-level foundation system）、渲染引擎（rendering engine）、碰撞系统（collision system）、物理模拟（physics simulation）、人物动画（character animation），及一个我称为游戏性基础层（gameplay foundation layer）的深入讨论。此层包括游戏对象模型（game object model）、世界编辑器（world editor）、事件系统（event system）及脚本系统（scripting system）。我们也将会接触游戏性编程（gameplay programming）的多个方面，包括玩家机制（player mechanics）、摄像机（camera）及人工智能（artificial intelligence，AI）。然而，这类讨论会被限制在游戏性系统和引擎接口范围。 
本书可以作为大学中等级游戏程序设计中两到三门课程的教材。当然，本书也适合软件工程师、业余爱好者、自学的游戏程序员，以及游戏行业从业人员。通过阅读本书，资历较浅的游戏程序员可以巩固他们所学的游戏数学、引擎架构及游戏科技方面的知识。专注某一领域的资深程序员也能从本书更为全面的介绍中获益。
为了更好地学习本书内容，你需要掌握基本的面向对象编程概念并至少拥有一些C++编程经验。尽管游戏行业已经开始尝试使用一些新的、令人兴奋的编程语言，然而工业级的3D游戏引擎仍然是用C或C++编写的，任何认真的游戏程序员都应该掌握C++。我们将在第3章重温一些面向对象编程的基本原则，毫无疑问，你还会从本书学到一些C++的小技巧，不过C++的基础最好还是通过阅读[39]、[31]及[32]来获得。如果你对C++已经有点生疏，建议你在阅读本书的同时，最好能重温这几本或者类似书籍。如果你完全没有C++经验，在看本书之前，可以考虑先阅读[39]的前几章，或者尝试学习一些C++的在线教程。
学习编程技能最好的方法就是写代码。在阅读本书时，强烈建议你选择一些特别感兴趣的主题付诸实践。举例来说，如果你觉得人物动画很有趣，那么可以首先安装OGRE，并测试一下它的蒙皮动画示范。接着还可以尝试用OGRE实现本书谈及的一些动画混合技巧。下一步你可能会打算用游戏手柄控制人物在平面上行走。等你能玩转一些简单的东西了，就应该以此为基础，继续前进！之后可以转移到另一个游戏技术范畴，周而复始。这些项目是什么并不重要，重要的是你在实践游戏编程的艺术，而不是纸上谈兵。
游戏科技是一个活生生、会呼吸的家伙 ，永远不可能将之束缚于书本之上 。因此，附加的资源、勘误、更新、示例代码、项目构思等已经发到本书的网站。
