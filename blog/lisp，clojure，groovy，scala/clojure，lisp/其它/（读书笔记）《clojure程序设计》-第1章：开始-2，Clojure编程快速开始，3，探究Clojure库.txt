（读书笔记）《clojure程序设计》-第1章：开始-2，Clojure编程快速开始，3，探究Clojure库

Programming Clojure学习笔记——开始-1.2 Clojure编程快速开始，1.3 探究Clojure库
http://blog.csdn.net/zh2qiang/article/details/7080420

======
1.2 Clojure编程快速开始

Clojure的运行条件：
(1) Java运行环境，JDK5.0及以上
(2) Clojure包

运行REPL(read-eval-print-loop):

>set PATH=D:\Java\jdk1.5.0\BIN
>set CLOJURE_HOME=G:\Downloads\Clojure\clojure-1.3.0
>java -cp clojure-1.3.0.jar clojure.main

----
特殊变量

REPL包含一些特殊变量

1. 变量*1,*2,*3分别指向REPL中最近使用的三个表达式

user=> (defn hello [name] (str "Hello, " name))
#'user/hello
user=> (hello "Stu")
"Hello, Stu"
user=> (hello "Jim")
"Hello, Jim"
user=> (hello "Tom")
"Hello, Tom"

user=> (str *1 " and " *2 " and " *3)
"Hello, Tom and Hello, Jim and Hello, Stu"

2. *e变量指向上一个异常对象

user=> (/ 1 0)
ArithmeticException Divide by zero clojure.lang.Numbers.divide (Numbers.java:156)

user=> (.printStackTrace *e)
java.lang.ArithmeticException: Divide by zero
        at clojure.lang.Numbers.divide(Numbers.java:156)
        at clojure.lang.Numbers.divide(Numbers.java:3677)
        at user$eval13.invoke(NO_SOURCE_FILE:8)
        at clojure.lang.Compiler.eval(Compiler.java:6465)
        at clojure.lang.Compiler.eval(Compiler.java:6431)
        at clojure.core$eval.invoke(core.clj:2795)
        at clojure.main$repl$read_eval_print__5967.invoke(main.clj:244)
        at clojure.main$repl$fn__5972.invoke(main.clj:265)
        at clojure.main$repl.doInvoke(main.clj:265)
        at clojure.lang.RestFn.invoke(RestFn.java:421)
        at clojure.main$repl_opt.invoke(main.clj:331)
        at clojure.main$main.doInvoke(main.clj:427)
        at clojure.lang.RestFn.invoke(RestFn.java:397)
        at clojure.lang.Var.invoke(Var.java:397)
        at clojure.lang.AFn.applyToHelper(AFn.java:159)
        at clojure.lang.Var.applyTo(Var.java:518)
        at clojure.main.main(main.java:37)
nil

说明：Clojure异常都是Java异常，因此可以调用Java异常对象的方法printStackTrace打印堆栈信息

----
添加共享状态

接下来写一个跟踪访问者的Hello函数，使用集合来存贮访问者。

预备知识

1. #{} 表示一个空集合

2. (conj coll item) 将元素item加入集合coll
user=> (conj #{} "Stu")
#{"Stu"}

3. (ref initial-state) 引用initial-state数据

4. (def symbol initial-value?) 给数据或引用命名

user=> (def visitors #{})
#'user/visitors

user=> (str visitors)
"#{}"

5. (alter r update-fn & args) 修改引用数据，参数args可选

6. (dosync & exprs) 创建事务，在事务中执行表达式exprs

user=> (def visitors (ref #{}))
#'user/visitors

user=> (dosync (alter visitors conj "Stu"))
#{"Stu"}

7. (deref ref-name) 或 @ref-name 查看引用数据或引用变量值

user=> (deref visitors)
#{"Stu"}

user=> @visitors
#{"Stu"}

--
完整代码：
user=> (defn hello
    "Writes hello message to *out*. Calls you by username.
    Knows if you have been here before."
    [username]
    (dosync
        (let [past-visitor (@visitors username)]
        (if past-visitor
            (str "Welcome back, " username)
            (do
                (alter visitors conj username)
                (str "Hello, " username))))))
#'user/hello

user=> (hello "Rich")
"Hello, Rich"

user=> (hello "Rich")
"Welcome back, Rich"

=====
1.3 探究Clojure库

Colujure代码都打包进库，每个库属于一个命名空间namespace，命名空间类似Java包。

可以使用require来加载Clojure库：
(require quoted-namespace-symbol):

user=> (require 'examples.introduction)
nil

说明：前导单引号必须，它将库名引起来。

使用库中函数：
user=> (take 10 examples.introduction/fibs)
(0 1 1 2 3 5 8 13 21 34)

为了方便库中函数引用，可以引用命名空间，在当前命名空间中生成引用命名空间中所有名称的映射，
这样在当前命名空间中就可以直接使用引用命名空间中的函数等，不需要带空间名前缀。

(refer quoted-namespace-symbol):

user=> (refer 'examples.introduction)
nil
user=> (take 10 fibs)
(0 1 1 2 3 5 8 13 21 34)

说明：REPL中默认命名空间为user。

为了方便可以使用use函数一步完成require和refer库：
(use quoted-namespace-symbol):

user=> (use 'examples.introduction)
nil

user=> (take 10 fibs)
(0 1 1 2 3 5 8 13 21 34)

说明：use函数加上:reload-all标识可以强制重新加载库。

----
查找文档

1. 最基本的帮助函数doc
(doc name)

user=> (doc str)
-------------------------
clojure.core/str
([] [x] [x & ys])
  With no args, returns the empty string. With one arg x, returns
  x.toString().  (str nil) returns the empty string. With more than
  one arg, returns the concatenation of the str values of the args.
nil

说明：
(1) doc函数的返回值第一行输出函数的全名称命名空间+函数名；
(2) 第二行输出函数的参数列表；
(3) 第三行输出函数的doc-string（函数注释位于函数名后，参数列表前）。


2. find-doc函数模糊查询
(find-doc s)

参数命名惯例：
Parameter Usage

a A Java array
agt An agent
coll A collection
expr An expression
f A function
idx Index
r A ref
v A vector
val A value


3. 查看Clojure函数源码
(clojure.contrib.repl-utils/source a-symbol)

user=> (use 'clojure.contrib.repl-utils)
nil

user=> (source identity)
(defn identity
  "Returns its argument."
  [x] x)
nil


4. 枚举Java对象属性和方法
(clojure.contrib.repl-utils/show obj)

user=> (show java.util.HashMap)
===  public java.util.HashMap  ===
[ 0] ()
[ 1] (Map)
[ 2] (int)
[ 3] (int,float)
[ 4] clear : void ()
[ 5] clone : Object ()
[ 6] containsKey : boolean (Object)
其他省略不列出。

说明：由于Clojure对象都是Java对象，因此也可以使用show函数来查看Clojure形式内部的Java API。
如：
user=> (show #{})
