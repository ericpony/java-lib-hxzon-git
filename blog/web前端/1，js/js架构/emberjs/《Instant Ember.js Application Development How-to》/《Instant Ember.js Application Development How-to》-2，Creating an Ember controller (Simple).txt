《Instant Ember.js Application Development How-to》-Creating an Ember controller (Simple)

注释by hxzon

====
Creating an Ember controller (Simple)
控制器。

A controller is an object capable of storing the application state. Application views connect to 
controllers and translate the current state of the controller into HTML. Another way of thinking 
of controllers is that they act as a direct representation of models for your views and can send 
CRUD commands to the models on behalf of the views.

How to do it...

We can now create a controller for a part of our application.

1.  Add the following controller into application.jslocated in the 
controllers folder:

MovieTracker.moviesController = Ember.ArrayController.create({
	content: [],
	init: function(){
		this._super();
		var list = [
			MovieTracker.Movie.create({
				title: 'Movie 1',
				rating: 4
			}),
			MovieTracker.Movie.create({
				title: 'Movie 2',
				rating: 5
		})];
		this.set('content', list);
	}
});

2.  We can also create a controller that will allow us to keep track of a movie that has 
been selected by the user in our application.

MovieTracker.selectedMovieController = 
	Ember.ObjectController.create({
		selectedMovie: [],
		select: function(item) {
			this.set('selectedMovie', item);
		},
		toggleWatched: function() {
			this.selectedMovie.toggleProperty('watched');
		}
});

How it works...

In Ember.js, controllers are split into three different categories:

f ArrayController
f ObjectController
f Controller

ArrayController is used for managing a collection of objects, that is, a collection of 
movies and actors. Each ArrayController uses a content property to store its data. 
Properties and methods in this controller will have a proxy that will allow access to its 
contentproperty. In moviesController, we create an empty content array and then 
populate it with some example data. 
The this._super() call lets you access the init
function of the parent class that you are overriding.

ObjectControlleris essentially the same as ArrayController, except that it is used 
for one object as opposed to a collection. For our application, we are going to need a 
controller for changing a movie to watchedwhen the user clicks on a corresponding button 
for this action. In selectedMovieController, we are only concerned with one specific 
Movie object. The function inside this controller will change the watched property of the 
associated movie to true if it was false previously and vice versa.

The Controller class in Ember is used when you have a controller that is not a proxy. 
In other words, the controller does not take care of an object or an array.
If we look back at the code in our application.js within the controllers folder, we 
added the following:

MovieTracker.ApplicationController = Ember.Controller.extend();

This line does not need any arrays or objects contained within it, so we simply assign it 
the Controller class. This controller handles the controls at the application level.

We can paste the following line into the browser's console to check that moviesController
is in proper working order:

MovieTracker.moviesController.get('length');

The preceding line should print out 2to the console.

====
Handlebar HTML templates (Simple)
模板。

Handlebars is a logic-less semantic templating engine that will interact with our views to 
render HTML elements. Handlebars is the default engine for Ember.js. Handlebars is an 
extension of the mustache templating engine. At runtime, Ember.js will compile all 
Handlebar templates. A Handlebars expression takes the form of {{contents}}.
Apart from plain HTML, templates embed:

f Expressions: An expression takes data from a controller, view, or context and places 
it into HTML and automatically keeps the data in sync.
表达式。

f Outlets: Outlets are placeholders for other templates. The router places different 
templates in your outlets as your application state changes. Handlebars has the 
{{outlet}} helper for doing this.
输出。

f Views: Views handle user events.
视图，视图处理用户事件。

How to do it...

Handlebars are HTML templates with embedded Handlebars expressions. These templates 
go within the <script> tags so that your browser can recognize them.
模板写在script标签中。

1.  In index.html, add the following within the <body>tags.

<script type="text/x-handlebars" data-templatename="movie_title">
<h2>{{title}}</h2>
</script>

2.  Global paths can also be defined in your templates. We can change the template 
as shown in the following code snippet:

<script type="text/x-handlebars" data-templatename="movie_title">
<h2>{{MovieTracker.selectedMovieController.title}}</h2>
</script>

3.  Handlebars include conditional expressions. A common use for this is when you 
want to display part of a template only if a property exists. The template can be 
further modified as follows:
条件表达式。

{{#if movie}}
<h2>{{movie.title}}</h2>
{{else}}
<h2>No movie</h2>
{{/if}}

4.  We can also render a template only if the value is false, undefined, null, and so on.

{{#unless hasBeenWatched}}
<h2>You should watch this movie!</h2>
{{/if}}

5.  The default context for our template blocks is Ember.View associated with the 
block. The context is the object where properties are looked upon. If we want 
to invoke a template with a context other than Ember.View, we can use the 
{{#with}} helper.
指定对象上下文。

{{#with movie}}
<h2>{{title}}</h2>
{{/with}}

6.  At some point in our application, we will most likely want to bind HTML attributes into 
our templates. Common use cases are when you want an src attribute for an image 
and/or when you want an href attribute for a link.
绑定html元素的属性。

<a {{bindAttr href="url"}}>More Details</a>

7.  We can add a child view to a parent by using the {{view}} helper. This helper takes 
in a path to a view class.

MovieTracker.ActorView = Ember.View.extend({
	templateName: 'actor'
	mainActor: "John Smith"
});

{{#with movie}}
<h2>{{title}}</h2>
{{view MovieTracker.ActorView}}
{{/with}}

<script type="text/x-handlebars" data-templatename="actor">
{{view.mainActor}}
</script>

8.  You can also use view templates inline. You can think of this as assigning views 
to portions of a page. It allows you to encapsulate event handling for one part of 
a page. We can rewrite the previously mentioned code as the following:
内联。

MovieTracker.ActorView = Ember.View.extend({
	mainActor: "John Smith"
});

{{#with movie}}
<h2>{{title}}</h2>
{{#view MovieTracker.ActorView}}
{{view.mainActor}}
{{/view}}
{{/with}}

How it works...

All the features previously described are binding-aware. This means that as values in your 
templates change, the HTML will be updated automatically. If you do not want a value to 
automatically update, you can use the unbound view helper.

This basic template has data-template-name that is typically used as a reference by a 
view. The {{title}} expression will print the value of the title property that we send to 
the template using a view.

Ember determines whether a path is global or relative to the view by checking if the first letter 
is capitalized. 
通过变量名首字母的大小写来判断是全局的还是相对的。
This is why your Ember.Applicationname should start with a capital letter.

The #symbol within {{}} means that it is a block expression. These expressions require a 
closing expression (such as {{/if}} in the previous example). If the movie property is not 
false, undefined, or null, then it will display the movie title.
块表达式。

{{#with movie}}
<h2>{{title}}</h2>
{{/with}}

We changed the context of our template block to movie in this block of code, and thus 
we were able to reference the title directly.

<a {{bindAttr href="url"}}>More Details</a>

When we used bindAttr for our URL, the template took the url property from the view 
and inserted it as an href attribute.

<a href="http://moredetails.com">More Details</a>

{{view.mainActor}} within the actor template would render as John Smith.

The {{view}} helpers in Handlebars can include optional parameters to help in displaying 
information.

f class: Used to assign class names.

f tagName: By default, new instances of Ember.View create the <div>elements. 
Use tagNameto override this.
标签名。

f contentBinding: Binds the specified content as the context of the template block.

As you are developing your templates, remember that Handlebars is capable of rendering the 
following elements from different parts of your application with different scopes:

f Controller
f View
f Context

These parts would look like the following in Handlebars:

title from controller: {{controller.title}}
title from view: {{view.title}}
title from context: {{title}}

====
Creating an Ember view (Simple)
视图。

Views will help you to translate low-level browser events into semantic events. These semantic 
events will allow the Ember router to adjust your application into the proper state. 
路由到某个状态。
Views can be created and destroyed at render time as well as during the run loop of your application. 
The Ember.View class includes a variety of properties for creating different types of views. 
A few of the common ones that you could use are as follows:

f tagName: The default HTML tag is div, but it can be changed using tagName.

f classNames: Sets the HTML class attribute with the provided array of strings.

f classNameBindings: Sets the HTML class attribute based on an array of properties 
for the view. These properties can be computed properties, allowing you to perform 
logic to determine whether class names should be assigned or not.

f HTML attributes such as href can also be added using the attributeBindings
property.

Views in Ember are more about user interaction and less about markup. As you read on, 
keep in mind that Ember.js gives you a lot of flexibility in the way you define your templates 
and views and the interaction between them. For example, you can define the tag name 
or class names within a view class constructor or you can define them in your Handlebars. 
As your application grows, you will most likely find better ways of defining classes that are 
relevant to your needs.

It is up to you the way you want to structure your application depending on what you 
are doing. If a view must be a certain tag, then it should go in the view constructor. If you 
find that your views are often set to other tags, then defining tags in your Handlebars 
saves you from having to make lots of extended view objects.

How to do it...

Views in Ember can be created in many different ways. One way to create your view is to 
define the view directly in your JavaScript, and then display it on the page using a Handlebars 
view helper.
创建视图。

1.  We can create something like this for our MovieTracker application. If you recall 
from earlier, we created moviesController as shown in the following code, but 
with changed movie titles:

MovieTracker.moviesController = Ember.ArrayController.create({
	content: [],
	init: function(){
		this._super();
		var list = [
			MovieTracker.Movie.create({
				title:'The Avengers',
				rating: 4
			}),
			MovieTracker.Movie.create({
				title: 'Spiderman',
				rating: 1
			})];
		this.set('content', list);
		}
});

2.  We can now create a view in views/application.js that will send the necessary 
data to Handlebars for rendering.

MovieTracker.MovieListingsView = Ember.View.extend({
	templateName: 'movie_listings',
	controllerBinding: 'MovieTracker.moviesController'
});

3.  Now that we have our view bound to a controller, we can create the template that will 
render the data in the view. The following code will go inside index.html after the 
main application <script>tags, right before the section where we include all our 
scripts.

<script type="text/x-handlebars" data-templatename="movie_listings">
<ul class="movie_listings">
{{#each movie in content}}
<li>
<h4>{{movie.title}}</h4>
<br/>
<h4>{{movie.rating}}</h4>
</li>
{{/each}}
</ul>
</script>

How it works...

Views have three main responsibilities. They are as follows:

f Render HTML elements
f Handle DOM events
f Trigger actions to change the state of your application

The Handlebars templating engine is used for rendering HTML elements.

this.set('content', list);

In moviesController, we set the content key to our list array with the preceding 
command. set takes in the parameters (key, value).

'movie_listings'is the name of the template that we are going to sync our data to. 
We can bind this view to our moviesController controller.

With the following piece of code, we are using the Handlebars notation we learned about 
earlier. We iterate through the moviesController content object containing a list of 
movies, and display them as an HTML list.

{{#each movie in content}}
<li>
<h4>{{movie.title}}</h4>
<br/>
<h4>{{movie.rating}}</h4>
</li>
{{/each}}

There's more...

There are multiple ways to handle DOM events. The two main ones are:
有多种方式处理dom事件。

f Ember-dispatched events
f Handlebars action helper

For Ember-dispatched events, we can implement a function that will respond to user events 
such as the following:

MovieTracker.ToggleWatched = Ember.View.extend({
	templateName: 'movie-watched',
	click: function(event){
		alert('I pressed movie-watched!');
	}
});

The jQuery.event object is passed into our function as an argument.

A Handlebars action helper can be used to handle custom events created by you.

<div {{action "mark_watched"}}>
I have watched this movie
</div>

This will call the mark_watched function of the template associated with Ember.View
when the div tag is clicked. There are various other events that can be linked to the action
helpers as well.

If we wanted to pass a value from the template context to the handler, we could have done 
something as follows:

{{#each movie in content}}
<div {{action "mark_watched" movie}}>
I have watched this movie
</div>
{{/each}}

The preceding code will call the mark_watched method with a jQuery.Event object 
containing a movie.

A view that references the properties of a model should be bound to one controller in charge 
of those properties. You can also bring in data from elsewhere if needed. You can do this by 
binding one view's controller to another by using the connectControllers function.

Absolute paths
绝对路径。

When dealing with Ember views, an absolute path in a class is a path pointing to a global 
variable. You may see other examples where the view will contain a contentBinding
property.

MovieTracker.MovieTrackerView = Ember.View.extend({
	templateName: 'movie_main_details',
	controllerBinding: 'MovieTracker.moviesController',
	contentBinding: 'controller.content' 
});

This example will still work technically but it does not work when considering a good design. 
Taking contentBinding out of our view and inserting it into a template instead will solve 
this problem.

{{view MovieTracker.MovieTrackerView 
contentBinding="controller.content"}}

Moving the contentBinding variable into the Handlebars template binds the content of 
the particular view, MovieTrackerView, to the specified controller's content property. 
This promotes reusability in our code and makes testing easier because the view is isolated.
测试更加容易。

