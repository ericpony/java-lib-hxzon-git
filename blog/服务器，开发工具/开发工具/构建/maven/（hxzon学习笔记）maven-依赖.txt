（hxzon学习笔记）maven-依赖

摘要：

依赖范围。
可选依赖，排除依赖。
在一个地方写版本号。

======
http://www.iteye.com/topic/1123232

<project>
  ...
  <dependencies>
    <dependency>
      <groupId>group-a</groupId>
      <artifactId>artifact-a</artifactId>
      <version>1.0</version>
      <exclusions>
        <exclusion>
          <groupId>group-c</groupId>
          <artifactId>excluded-artifact</artifactId>
        </exclusion>
      </exclusions>
    </dependency>
    <dependency>
      <groupId>group-a</groupId>
      <artifactId>artifact-b</artifactId>
      <version>1.0</version>
      <type>bar</type>
      <scope>runtime</scope>
    </dependency>
  </dependencies>
</project>

groupId，artifactId和version：依赖的基本坐标，对于任何一个依赖来说，基本坐标是最重要的，Maven根据坐标才能找到需要的依赖。
大部分依赖声明只包含基本坐标。

type: 依赖的类型，对应于项目坐标定义的packaging。大部分情况下，该元素不必声明，其默认值是jar。

scope: 依赖的范围。

optional: 标记依赖是否可选。

exclusions: 用来排除传递性依赖。

=====
依赖范围

Maven在编译主代码的时候需要使用一套classpath，
在编译和执行测试的时候会使用另一套classpath，
实际运行项目的时候，又会使用一套classpath。

依赖范围就是用来控制依赖与这三种classpath(编译classpath、测试classpath、运行classpath)的关系，
Maven有以下几种依赖范围：
 
compile: 编译依赖范围。如果没有指定，就会默认使用该依赖范围。
使用此依赖范围的Maven依赖，对于编译、测试、运行三种classpath都有效。
 
test: 测试依赖范围。使用此依赖范围的Maven依赖，只对于测试classpath有效，
在编译主代码或者运行项目的使用时将无法使用此类依赖。
典型的例子就是JUnit，它只有在编译测试代码及运行测试的时候才需要。
 
provided: 已提供依赖范围。使用此依赖范围的Maven依赖，对于编译和测试classpath有效，但在运行时无效。
典型的例子是servlet-api，编译和测试项目的时候需要该依赖，
但在运行项目的时候，由于容器已经提供，就不需要Maven重复地引入一遍。
 
runtime: 运行时依赖范围。使用此依赖范围的Maven依赖，对于测试和运行classpath有效，但在编译主代码时无效。
典型的例子是JDBC驱动实现，项目主代码的编译只需要JDK提供的JDBC接口，
只有在执行测试或者运行项目的时候才需要实现上述接口的具体JDBC驱动。
 
system: 系统依赖范围。该依赖与三种classpath的关系，和provided依赖范围完全一致。
但是，使用system范围依赖时必须通过systemPath元素显式地指定依赖文件的路径。
由于此类依赖不是通过Maven仓库解析的，而且往往与本机系统绑定，可能造成构建的不可移植，因此应该谨慎使用。
systemPath元素可以引用环境变量，如：

<dependency>
    <groupId>javax.sql</groupId>
    <artifactId>jdbc-stdext</artifactId>
    <version>2.0</version>
    <scope></scope>
    <systemPath>${java.home}/lib/rt.jar</systemPath>
</dependency>

import(Maven 2.0.9及以上): 导入依赖范围。该依赖范围不会对三种classpath产生实际的影响，稍后会介绍到。

=====
传递性依赖

<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>

  <groupId>com.mycompany.app</groupId>
  <artifactId>my-app-simple</artifactId>
  <version>0.0.1-SNAPSHOT</version>
  <packaging>jar</packaging>

  <name>my-app-simple</name>
  <url>http://maven.apache.org</url>

  <properties>
    <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
  </properties>

  <dependencies>
    <dependency>
      <groupId>junit</groupId>
      <artifactId>junit</artifactId>
      <version>3.8.1</version>
      <scope>test</scope>
    </dependency>
    
     <dependency>
      <groupId>org.springframework</groupId>
      <artifactId>spring-core</artifactId>
      <version>2.5.6</version>
    </dependency>
  </dependencies>
</project>

我们可以看到此项目引入依赖junit和spring-core，
而spring-core构件则包含了commons-logging依赖，
那么该依赖会传递到当前项目中，这就是依赖的传递性。

----
可选依赖

有时候我们不想让依赖传递，那么可配置该依赖为可选依赖，将元素optional设置为true即可。

----
排除依赖

当我们引入第三方jar包的时候，难免会引入传递性依赖，有些时候这是好事，
然而有些时候我们不需要其中的一些传递性依赖。
比如上例中的项目，我们不想引入传递性依赖commons-logging，我们可以使用exclusions元素声明排除依赖，
exclusions可以包含一个或者多个exclusion子元素，因此可以排除一个或者多个传递性依赖。

需要注意的是，声明exclusions的时候只需要groupId和artifactId，而不需要version元素，
这是因为只需要groupId和artifactId就能唯一定位依赖图中的某个依赖。
换句话说，Maven解析后的依赖中，不可能出现groupId和artifactId相同，但是version不同的两个依赖。

<dependency>	
     <groupId>org.springframework</groupId>
     <artifactId>spring-core</artifactId>
     <version>2.5.6</version>
     <exclusions>
           <exclusion>	
                <groupId>commons-logging</groupId>		  
				<artifactId>commons-logging</artifactId>
           </exclusion>
     </exclusions>
</dependency>

=====
依赖归类（在一个地方写版本号）

如果我们项目中用到很多关于Spring Framework的依赖，
它们分别是org.springframework:spring-core:2.5.6, org.springframework:spring-beans:2.5.6,org.springframework:spring-context:2.5.6,
它们都是来自同一项目的不同模块。
因此，所有这些依赖的版本都是相同的，而且可以预见，如果将来需要升级Spring Framework，这些依赖的版本会一起升级。
因此，我们应该在一个唯一的地方定义版本，并且在dependency声明引用这一版本，
这使得在Spring Framework升级的时候只需要修改一处即可。

<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>

	<groupId>com.mycompany.app</groupId>
	<artifactId>my-app-simple</artifactId>
	<version>0.0.1-SNAPSHOT</version>
	<packaging>jar</packaging>
	<name>my-app-simple</name>
	<properties>
		<springframework.version>2.5.6</springframework.version>
	</properties>

	<dependencies>
		<dependency>
			<groupId>junit</groupId>
			<artifactId>junit</artifactId>
			<version>3.8.1</version>
			<scope>test</scope>
		</dependency>

		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-core</artifactId>
			<version>${springframework.version}</version>
		</dependency>
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-beans</artifactId>
			<version>${springframework.version}</version>			
		</dependency>
	</dependencies>
</project>
