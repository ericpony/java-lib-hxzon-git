（hxzon学习笔记）java并发
by hxzon

==========
1，并发不是并行

一个并发程序是指能同时执行通常不相关的各种任务。以一个游戏服务器为例子：它通常是有各种组件组成，每种组件都跟外部世界进行着复杂的信息交互。一个组件有可能要处理多个用户聊聊；另外一些可能要处理用户的输入，并把最新状态反馈给用户；其它的用来进行物理计算。这些都是并发处理。

并发程序并不需要多核处理器。

相比之下，并行程序是用来解决一个单一任务的。以一个试图预估某支股票价格在下一分钟波动情况的金融组件为例，如果想最快速度的知道标普500中哪知股票应该卖出还是买进，你不能一个一个的计算，而是将这些所有的股票同时计算。这是并行。

并发就是一心二用(多用)，比如你一边听老师讲课，一边低头看课桌下韩寒的小说。这两件事你在同时做，而且这两件事并不一定需要相关。
而并行就是兵分几路干同一个事情。比如别人看小说只能一行一行的看，而你能一目十行，这就是并行。:) 。

关于并发和并行的区别，Go语言有一个非常好的教材，叫做“并发不是并行”，它以Go语言为例，图文并茂的为我们讲解了并发和并行之间的联系和区别。

并发不是并行

文中使用地鼠烧书为例，通过设计出不同的并发装书、运书、烧书的流程来比较并发和并行技术的组合运用。原文是英文的，这里是外刊IT评论网翻译的中文版并发不是并行，供大家欣赏。

http://www.aqee.net/docs/Concurrency-is-not-Parallelism/

============
2，基本线程同步（四）在同步代码中使用条件（synchronized和wait）

在并发编程中的一个经典问题是生产者与消费者问题，我们有一个数据缓冲区，
一个或多个数据的生产者在缓冲区存储数据，而一个或多个数据的消费者，把数据从缓冲区取出。

由于缓冲区是一个共享的数据结构，我们必须采用同步机制，比如synchronized关键字来控制对它的访问。
但是我们有更多的限制因素，如果缓冲区是满的，生产者不能存储数据，如果缓冲区是空的，消费者不能取出数据。

对于这些类型的情况，Java在Object对象中提供wait()，notify()，和notifyAll() 方法的实现。
一个线程可以在synchronized代码块中调用wait()方法。
如果在synchronized代码块外部调用wait()方法，JVM会抛出IllegalMonitorStateException异常。

当线程调用wait()方法，JVM让这个线程睡眠，并且释放控制 synchronized代码块的对象，
这样，虽然它正在执行但允许其他线程执行由该对象保护的其他synchronized代码块。
为了唤醒线程，你必须在由相同对象保护的synchronized代码块中调用notify()或notifyAll()方法。

在这个指南中，你将学习如何通过使用synchronized关键字
和wait()和notify(),notifyAll()方法实现生产者消费者问题。

hxzon：
1，是控制对象的wait，notify，notifyAll方法。
2，wait方法，使得允许synchronized代码块执行到一半时睡眠，让其它线程执行同个控制对象的synchronized代码块。

========
3，线程同步工具（五）运行阶段性并发任务（Phaser）

假设移相器的参与者为n，前(n-1)次arriveAndAwaitAdvance()会休眠，第n次arriveAndAwaitAdvance()会全部继续运行（同时进入下一相位）。

========
4，线程同步工具（四）在同一个点同步任务（CyclicBarrier）

Java 并发 API 提供了可以允许2个或多个线程在在一个确定点的同步应用。它是 CyclicBarrier 类。
此类与在此章节的等待多个并发事件完成指南中的 CountDownLatch 类相似，但是它有一些特殊性让它成为更强大的类。

CyclicBarrier 类有一个整数初始值，此值表示将在同一点同步的线程数量。
当其中一个线程到达确定点，它会调用await() 方法来等待其他线程。
当线程调用这个方法，CyclicBarrier阻塞线程进入休眠直到其他线程到达。
当最后一个线程调用CyclicBarrier 类的await() 方法，它唤醒所有等待的线程并继续执行它们的任务。

CyclicBarrier 类有个有趣的优势是，你可以传递一个外加的 Runnable 对象作为初始参数，
并且当全部线程都到达同一个点时，CyclicBarrier类 会把这个对象当做线程来执行。
此特点让这个类在使用 divide 和 conquer 编程技术时，可以充分发挥任务的并行性。

=======
5，




