稳扎稳打C++11：（函数01）函数基础
来源：ilanever.com | 作者：LanPei | 创建时间：2014-3-30 9:56:38
http://ilanever.com/article/sitedetail.html?id=262

hxzon学习笔记：
1，本地对象：自动对象，本地静态对象（函数体内的static）。
2，单独编译

===========
目录
本地对象
函数声明
单独编译

====
一个典型的函数包含一个返回类型、一个名称、零或者多个参数的列表以及一个函数体。
我们通过调用运算符（call operator,()）来执行一个函数。

函数调用执行两项任务：一是从实参初始化形参，二是传递控制权给函数。执行调用的函数被挂起，被调用的函数开始执行。

当函数遇到return语句时，函数执行结束。
正如函数调用，return语句也做了两件事：一是返回值，二是将控制权从被调用的函数传递到执行调用的函数。

实参（argument）是形参（parameter）的初始化器。
虽然我们知道哪个实参初始化哪个形参，但我们无法保证参数初始化的执行顺序。

为了兼容C，我们可以在参数列表中使用void关键字用于表明函数没有参数。

====
本地对象 

C++中名称有作用域（scope），对象有生存周期（lifetimes）。
名称的作用域是指名称在程序文本的哪些部分是可见的。
对象的生存周期是指程序执行过程中对象的存活时间。

定义在函数体内部的参数和变量被看作是本地变量（local variables）。
他们本地于当前函数，并且隐藏了外部作用域声明的同名函数。
本地变量的生存周期依赖于它是如何被定义的。

----
自动对象（Automatic Objects）
普通的本地变量在函数的控制路径通过变量定义时被创建，在控制路径通过定义变量的块的结尾时被销毁。
只当块被执行时才存在的对象被称为自动对象。
自动对象有：被实参初始化的形参，被初始化的本地变量。
未初始化的内置类型的本地变量的值是未定义的(undefined value)。

----
本地静态对象（Local static Objects）
本地静态对象的生存周期是跨越函数调用的。
使用static关键字进行声明。
本地静态变量在执行路径第一次经过其定义时被创建，但函数结束后不被销毁，而是在程序终止时才被销毁。
未初始化的内置类型的本地静态变量的值是0，这点与自动对象不同。


#include <iostream>
#include <cstddef>
 
using namespace std;
 
size_t count_calls()
{
    static size_t ct = 0;
    return ++ct;
}
 
int main()
{
    for(int i = 0; i < 10; i++){
        cout << count_calls() << endl;
    }
    /*
    Environment:
    g++4.8(Linux64bit)
 
    Output:
    1
    2
    3
    4
    5
    6
    7
    8
    9
    10
    */
    return 0;
}

====
函数声明 

同变量一样，函数允许被定义一次，声明多次。
函数在使用前必须被声明。
函数声明没有函数体，被分号代替。
函数声明的参数可以只写参数类型不写参数名称，但由于参数名称利于理解函数，所以建议带上名称。
函数声明也被认为是函数原型（function prototype）。

函数声明应该写在头文件中，定义应该写在源文件中。

====
单独编译 

单独编译允许分别编译每个文件，产生以.o或.obj结尾的对象代码（object code）文件。
然后再将对象文件链接（link）起来形成一个可执行文件。

我们可以使用以下命令将每个源文件编译成对象文件：
$ CC -c xxx.cc

默认情况下，生成的对象文件与源文件同名：xxx.o

然后再将对象文件链接成可执行文件：
$ CC xxx.o -o main

单独编译允许我们开发过程中只重新编译那些被修改的源文件，然后再将所有对象文件链接成可执行文件。

假如我们有个文件func.cpp，还有个main.cpp，main.cpp中使用了func.cpp中的函数。两个文件定义如下：

func.cpp
#include <iostream>
 
using namespace std;
 
void show_msg()
{
    cout << "hi, girl." << endl;
}

main.cpp
#include <iostream>
 
using namespace std;
 
void show_msg();//must do the declaration.
 
int main()
{
    show_msg();
    return 0;
}

对两个文件进行单独编译：

$ g++-4.8 -c func.cpp
$ g++-4.8 -c main.cpp
$ g++-4.8 func.o main.o -o main
$ ./main
hi, girl.

这时，修改func.cpp的输出为“hi,boy.”。只对func.cpp进行编译，产生其对象文件。再进行链接：

$ g++-4.8 -c func.cpp
$ g++-4.8 func.o main.o -o main
$ ./main
hi, boy.

输出发生了改变。

