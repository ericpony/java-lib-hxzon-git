Neal Ford-演化架构与紧急设计系列

http://www.ibm.com/developerworks/cn/java/j-eaed/

研究架构和设计 （2009 年 3 月 17 日）
http://www.ibm.com/developerworks/cn/java/j-eaed1/
演化架构（evolutionary architecture）和紧急设计（emergent design）都是将重要的决策推迟到最后责任时刻（Last Responsible Moment）的敏捷技术。在第一期文章中，系列作者 Neal Ford 将定义架构和设计，然后指明了一些关于整个系列的基本概念。



测试驱动设计，第 1 部分 （2009 年 3 月 27 日）
http://www.ibm.com/developerworks/cn/java/j-eaed2/
大多数开发人员认为使用测试驱动开发（TDD）最有用的部分是测试。但是，正确地完成开发后，TDD 将改进代码的整体设计。这一期文章将介绍一个进一步扩展的示例，演示如何根据测试中显现的关注点进行设计。测试只是 TDD 的次要部分；关键在于它如何优化了代码。



测试驱动设计，第 2 部分 （2009 年 5 月 8 日）
http://www.ibm.com/developerworks/cn/java/j-eaed3/
测试只是测试驱动开发（TDD）的意外结果之一；如果正确地应用，TDD 能够改进代码的整体设计。 这一期文章将介绍一个进一步扩展的示例，演示如何根据测试中显现的关注点进行设计。



组合方法和 SLAP （2009 年 6 月 12 日）
http://www.ibm.com/developerworks/cn/java/j-eaed4/
如何在陈旧的代码库中找出隐藏的设计？本文讨论两种对于代码结构很重要的模式：组合方法和单一抽象层。对代码应用这些原则有助于找到以前隐藏的可重用资产，有助于把现有的代码抽象为成熟的框架。



对设计进行重构 （2009 年 7 月 21 日）
http://www.ibm.com/developerworks/cn/java/j-eaed5/
前面的文章讨论了单元测试如何引导您实现更好的设计。但是如果您已经具备大量的代码，那么如何从代码中发现隐藏的设计元素？上一期文章讨论了为您的代码构建结构化目标。在本期文章中，作者 Neal Ford 进一步拓展了这些主题，介绍了可用于重构并实现紧急设计的各种技术。



通过指标进行紧急设计 （2009 年 8 月 6 日）
http://www.ibm.com/developerworks/cn/java/j-eaed6/
软件指标可以帮助您寻找代码中隐藏的设计元素，让它们能够成为惯用模式。这一期将讲解如何使用指标和可视化发现被复杂性掩盖的重要代码元素。



语言、表达性与设计，第 1 部分 （2009 年 9 月 10 日）
http://www.ibm.com/developerworks/cn/java/j-eaed7/
发现和积累惯用模式的能力对于紧急设计至关重要。对于设计而言同样十分重要的是代码的表达性。在本系列文章中，Neal Ford 分两部分介绍了表达性和模式的交集，通过惯用模式和正式设计模式阐释了这些概念。他用动态语言为 JVM 重构了一些经典的四人组（Gang of Four）模式，以说明表达性更好的语言如何使您看到被透明度不佳的语言遮挡的设计元素。



语言、表达性与设计：第 2 部分 （2009 年 10 月 27 日）
http://www.ibm.com/developerworks/cn/java/j-eaed8/
在第 2 部分中，Neal Ford 将继续讨论表达性和模式的交集，通过惯用模式和正式设计模式阐释这些概念。他用动态语言为 JVM 重构了一些经典的四人组（Gang of Four）模式，以说明表达性更好的语言如何使您看到被透明度不佳的语言遮挡的设计元素。



积累惯用模式 （2010 年 1 月 19 日）
http://www.ibm.com/developerworks/cn/java/j-eaed9/
本期将之前的文章中的紧急设计概念与一个案例研究相结合，展示如何发现、积累和利用代码中意料之外的设计元素。一旦理解了如何识别设计元素，便可以使用该知识改进代码的设计。紧急设计使您可以发现代码中意料之外但是已成为代码库重要部分的那些方面。 



演化架构 （2010 年 3 月 1 日）
http://www.ibm.com/developerworks/cn/java/j-eaed10/
这一期将会介绍演化架构相关的各种主题，包括设计和架构之间的重要区别（以及如何区分两者），您在创建企业级架构时遇到的某些问题，以及面向服务的架构中静态类型和动态类型的区别。 



利用可重用代码，第 1 部分 （2010 年 5 月 12 日）
http://www.ibm.com/developerworks/cn/java/j-eaed11/
本文中，作者探索了代码与设计的关系，这将有利于发现可重用的代码。同时，还介绍了使用表达性强的语言的重要性，以及重新考虑抽象风格的潜在价值。 



利用可重用代码，第 2 部分 （2010 年 6 月 24 日）
http://www.ibm.com/developerworks/cn/java/j-eaed12/
在使用本系列前几期文章中所描述的技术来发现代码中的紧急设计之后，下一步您需要一种获取和利用这些设计元素的方法。本文介绍了两种用于获取惯用模式的方法：将模式作为 APIs 予以捕捉；使用元程序设计方法。 



使用 DSL （2010 年 7 月 26 日）
http://www.ibm.com/developerworks/cn/java/j-eaed13/
至今，演化构架和紧急设计系列主要关注技术模式的紧急设计，本期我们将介绍使用特定领域语言（DSL）捕获领域惯用模式。作者将用一个例子说明该方法，显示这种获取惯用模式的抽象样式的优势。



连贯接口 （2010 年 9 月 7 日）
http://www.ibm.com/developerworks/cn/java/j-eaed14/
本期继续讨论在紧急设计中捕获惯用模式的方法。发现一个可重用模式时，您应当将其与其余代码分离，然后捕获它。特定领域语言（DSL）提供许多可准确捕获数据和功能的方法。这个月，Neal Ford 将展示构建内部 DSL 的三种方法，以捕获惯用域模式。 